
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 91 5b 00 00 dd 5b 00 00 dd 5b 00 00     .P. .[...[...[..
      10:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 00 00 00 00     .[...[...[......
	...
      2c:	b1 49 00 00 dd 5b 00 00 00 00 00 00 bd 4a 00 00     .I...[.......J..
      3c:	f9 4a 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .J...[...[...[..
      4c:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .[...[...[...[..
      5c:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .[...[...[...[..
      6c:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .[...[...[...[..
      7c:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .[...[...[...[..
      8c:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .[...[...[...[..
      9c:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .[...[...[...[..
      ac:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .[...[...[...[..
      bc:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .[...[...[...[..
      cc:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 5d 4e 00 00     .[...[...[..]N..
      dc:	dd 5b 00 00 dd 5b 00 00 dd 5b 00 00 dd 5b 00 00     .[...[...[...[..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     110:	f3ef 8409 	mrs	r4, PSP
     114:	4620      	mov	r0, r4
     116:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     128:	f3ef 8408 	mrs	r4, MSP
     12c:	4620      	mov	r0, r4
     12e:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b490      	push	{r4, r7}
     13e:	b082      	sub	sp, #8
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	f04f 0300 	mov.w	r3, #0
     146:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     148:	f3ef 8412 	mrs	r4, BASEPRI_MAX
     14c:	607c      	str	r4, [r7, #4]
  return(result);
     14e:	687b      	ldr	r3, [r7, #4]
}
     150:	4618      	mov	r0, r3
     152:	f107 0708 	add.w	r7, r7, #8
     156:	46bd      	mov	sp, r7
     158:	bc90      	pop	{r4, r7}
     15a:	4770      	bx	lr

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	f107 070c 	add.w	r7, r7, #12
     16e:	46bd      	mov	sp, r7
     170:	bc80      	pop	{r7}
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b490      	push	{r4, r7}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	f04f 0300 	mov.w	r3, #0
     17e:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     180:	f3ef 8410 	mrs	r4, PRIMASK
     184:	607c      	str	r4, [r7, #4]
  return(result);
     186:	687b      	ldr	r3, [r7, #4]
}
     188:	4618      	mov	r0, r3
     18a:	f107 0708 	add.w	r7, r7, #8
     18e:	46bd      	mov	sp, r7
     190:	bc90      	pop	{r4, r7}
     192:	4770      	bx	lr

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	f107 070c 	add.w	r7, r7, #12
     1a6:	46bd      	mov	sp, r7
     1a8:	bc80      	pop	{r7}
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b490      	push	{r4, r7}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	f04f 0300 	mov.w	r3, #0
     1b6:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b8:	f3ef 8413 	mrs	r4, FAULTMASK
     1bc:	607c      	str	r4, [r7, #4]
  return(result);
     1be:	687b      	ldr	r3, [r7, #4]
}
     1c0:	4618      	mov	r0, r3
     1c2:	f107 0708 	add.w	r7, r7, #8
     1c6:	46bd      	mov	sp, r7
     1c8:	bc90      	pop	{r4, r7}
     1ca:	4770      	bx	lr

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	f107 070c 	add.w	r7, r7, #12
     1de:	46bd      	mov	sp, r7
     1e0:	bc80      	pop	{r7}
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b490      	push	{r4, r7}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	f04f 0300 	mov.w	r3, #0
     1ee:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1f0:	f3ef 8414 	mrs	r4, CONTROL
     1f4:	607c      	str	r4, [r7, #4]
  return(result);
     1f6:	687b      	ldr	r3, [r7, #4]
}
     1f8:	4618      	mov	r0, r3
     1fa:	f107 0708 	add.w	r7, r7, #8
     1fe:	46bd      	mov	sp, r7
     200:	bc90      	pop	{r4, r7}
     202:	4770      	bx	lr

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	f107 070c 	add.w	r7, r7, #12
     216:	46bd      	mov	sp, r7
     218:	bc80      	pop	{r7}
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b490      	push	{r4, r7}
     21e:	b084      	sub	sp, #16
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	f04f 0300 	mov.w	r3, #0
     228:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	ba1c      	rev	r4, r3
     22e:	60fc      	str	r4, [r7, #12]
  return(result);
     230:	68fb      	ldr	r3, [r7, #12]
}
     232:	4618      	mov	r0, r3
     234:	f107 0710 	add.w	r7, r7, #16
     238:	46bd      	mov	sp, r7
     23a:	bc90      	pop	{r4, r7}
     23c:	4770      	bx	lr
     23e:	bf00      	nop

00000240 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     240:	b490      	push	{r4, r7}
     242:	b084      	sub	sp, #16
     244:	af00      	add	r7, sp, #0
     246:	4603      	mov	r3, r0
     248:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     24a:	f04f 0300 	mov.w	r3, #0
     24e:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     250:	88fb      	ldrh	r3, [r7, #6]
     252:	ba5c      	rev16	r4, r3
     254:	60fc      	str	r4, [r7, #12]
  return(result);
     256:	68fb      	ldr	r3, [r7, #12]
}
     258:	4618      	mov	r0, r3
     25a:	f107 0710 	add.w	r7, r7, #16
     25e:	46bd      	mov	sp, r7
     260:	bc90      	pop	{r4, r7}
     262:	4770      	bx	lr

00000264 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     264:	b490      	push	{r4, r7}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	4603      	mov	r3, r0
     26c:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26e:	f04f 0300 	mov.w	r3, #0
     272:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     274:	88fb      	ldrh	r3, [r7, #6]
     276:	badc      	revsh	r4, r3
     278:	60fc      	str	r4, [r7, #12]
  return(result);
     27a:	68fb      	ldr	r3, [r7, #12]
}
     27c:	4618      	mov	r0, r3
     27e:	f107 0710 	add.w	r7, r7, #16
     282:	46bd      	mov	sp, r7
     284:	bc90      	pop	{r4, r7}
     286:	4770      	bx	lr

00000288 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     288:	b490      	push	{r4, r7}
     28a:	b084      	sub	sp, #16
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     290:	f04f 0300 	mov.w	r3, #0
     294:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     296:	687b      	ldr	r3, [r7, #4]
     298:	fa93 f4a3 	rbit	r4, r3
     29c:	60fc      	str	r4, [r7, #12]
   return(result);
     29e:	68fb      	ldr	r3, [r7, #12]
}
     2a0:	4618      	mov	r0, r3
     2a2:	f107 0710 	add.w	r7, r7, #16
     2a6:	46bd      	mov	sp, r7
     2a8:	bc90      	pop	{r4, r7}
     2aa:	4770      	bx	lr

000002ac <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2ac:	b490      	push	{r4, r7}
     2ae:	b084      	sub	sp, #16
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b4:	f04f 0300 	mov.w	r3, #0
     2b8:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	e8d3 4f4f 	ldrexb	r4, [r3]
     2c0:	73fc      	strb	r4, [r7, #15]
   return(result);
     2c2:	7bfb      	ldrb	r3, [r7, #15]
}
     2c4:	4618      	mov	r0, r3
     2c6:	f107 0710 	add.w	r7, r7, #16
     2ca:	46bd      	mov	sp, r7
     2cc:	bc90      	pop	{r4, r7}
     2ce:	4770      	bx	lr

000002d0 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2d0:	b490      	push	{r4, r7}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d8:	f04f 0300 	mov.w	r3, #0
     2dc:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	e8d3 4f5f 	ldrexh	r4, [r3]
     2e4:	81fc      	strh	r4, [r7, #14]
   return(result);
     2e6:	89fb      	ldrh	r3, [r7, #14]
}
     2e8:	4618      	mov	r0, r3
     2ea:	f107 0710 	add.w	r7, r7, #16
     2ee:	46bd      	mov	sp, r7
     2f0:	bc90      	pop	{r4, r7}
     2f2:	4770      	bx	lr

000002f4 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f4:	b490      	push	{r4, r7}
     2f6:	b084      	sub	sp, #16
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2fc:	f04f 0300 	mov.w	r3, #0
     300:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     302:	687b      	ldr	r3, [r7, #4]
     304:	e853 4f00 	ldrex	r4, [r3]
     308:	60fc      	str	r4, [r7, #12]
   return(result);
     30a:	68fb      	ldr	r3, [r7, #12]
}
     30c:	4618      	mov	r0, r3
     30e:	f107 0710 	add.w	r7, r7, #16
     312:	46bd      	mov	sp, r7
     314:	bc90      	pop	{r4, r7}
     316:	4770      	bx	lr

00000318 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     318:	b490      	push	{r4, r7}
     31a:	b084      	sub	sp, #16
     31c:	af00      	add	r7, sp, #0
     31e:	4603      	mov	r3, r0
     320:	6039      	str	r1, [r7, #0]
     322:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     324:	f04f 0300 	mov.w	r3, #0
     328:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     32a:	683b      	ldr	r3, [r7, #0]
     32c:	79fa      	ldrb	r2, [r7, #7]
     32e:	e8c3 2f44 	strexb	r4, r2, [r3]
     332:	60fc      	str	r4, [r7, #12]
   return(result);
     334:	68fb      	ldr	r3, [r7, #12]
}
     336:	4618      	mov	r0, r3
     338:	f107 0710 	add.w	r7, r7, #16
     33c:	46bd      	mov	sp, r7
     33e:	bc90      	pop	{r4, r7}
     340:	4770      	bx	lr
     342:	bf00      	nop

00000344 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     344:	b490      	push	{r4, r7}
     346:	b084      	sub	sp, #16
     348:	af00      	add	r7, sp, #0
     34a:	4603      	mov	r3, r0
     34c:	6039      	str	r1, [r7, #0]
     34e:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     350:	f04f 0300 	mov.w	r3, #0
     354:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     356:	683b      	ldr	r3, [r7, #0]
     358:	88fa      	ldrh	r2, [r7, #6]
     35a:	e8c3 2f54 	strexh	r4, r2, [r3]
     35e:	60fc      	str	r4, [r7, #12]
   return(result);
     360:	68fb      	ldr	r3, [r7, #12]
}
     362:	4618      	mov	r0, r3
     364:	f107 0710 	add.w	r7, r7, #16
     368:	46bd      	mov	sp, r7
     36a:	bc90      	pop	{r4, r7}
     36c:	4770      	bx	lr
     36e:	bf00      	nop

00000370 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     370:	b490      	push	{r4, r7}
     372:	b084      	sub	sp, #16
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
     378:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     37a:	f04f 0300 	mov.w	r3, #0
     37e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     380:	683b      	ldr	r3, [r7, #0]
     382:	687a      	ldr	r2, [r7, #4]
     384:	e843 2400 	strex	r4, r2, [r3]
     388:	60fc      	str	r4, [r7, #12]
   return(result);
     38a:	68fb      	ldr	r3, [r7, #12]
}
     38c:	4618      	mov	r0, r3
     38e:	f107 0710 	add.w	r7, r7, #16
     392:	46bd      	mov	sp, r7
     394:	bc90      	pop	{r4, r7}
     396:	4770      	bx	lr

00000398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     398:	b580      	push	{r7, lr}
     39a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     39c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3ac:	6812      	ldr	r2, [r2, #0]
     3ae:	f042 0201 	orr.w	r2, r2, #1
     3b2:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     3b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c4:	6859      	ldr	r1, [r3, #4]
     3c6:	f04f 0300 	mov.w	r3, #0
     3ca:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     3ce:	400b      	ands	r3, r1
     3d0:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     3d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3de:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3e2:	6812      	ldr	r2, [r2, #0]
     3e4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     3e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     3ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3fe:	6812      	ldr	r2, [r2, #0]
     400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     404:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     40a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     40e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     412:	f2c4 0202 	movt	r2, #16386	; 0x4002
     416:	6852      	ldr	r2, [r2, #4]
     418:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     41c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     41e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     422:	f2c4 0302 	movt	r3, #16386	; 0x4002
     426:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     42a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     42c:	f000 f8ac 	bl	588 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     430:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     434:	f2ce 0300 	movt	r3, #57344	; 0xe000
     438:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     43c:	609a      	str	r2, [r3, #8]
#endif
}
     43e:	bd80      	pop	{r7, pc}

00000440 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     440:	b480      	push	{r7}
     442:	b085      	sub	sp, #20
     444:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     446:	f04f 0300 	mov.w	r3, #0
     44a:	60fb      	str	r3, [r7, #12]
     44c:	f04f 0300 	mov.w	r3, #0
     450:	60bb      	str	r3, [r7, #8]
     452:	f04f 0300 	mov.w	r3, #0
     456:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     45c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     460:	685b      	ldr	r3, [r3, #4]
     462:	f003 030c 	and.w	r3, r3, #12
     466:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     468:	68fb      	ldr	r3, [r7, #12]
     46a:	2b04      	cmp	r3, #4
     46c:	d00d      	beq.n	48a <SystemCoreClockUpdate+0x4a>
     46e:	2b08      	cmp	r3, #8
     470:	d015      	beq.n	49e <SystemCoreClockUpdate+0x5e>
     472:	2b00      	cmp	r3, #0
     474:	d15c      	bne.n	530 <SystemCoreClockUpdate+0xf0>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     476:	f240 0300 	movw	r3, #0
     47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     47e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     482:	f2c0 027a 	movt	r2, #122	; 0x7a
     486:	601a      	str	r2, [r3, #0]
      break;
     488:	e05c      	b.n	544 <SystemCoreClockUpdate+0x104>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     48a:	f240 0300 	movw	r3, #0
     48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     492:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     496:	f2c0 027a 	movt	r2, #122	; 0x7a
     49a:	601a      	str	r2, [r3, #0]
      break;
     49c:	e052      	b.n	544 <SystemCoreClockUpdate+0x104>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4a6:	685b      	ldr	r3, [r3, #4]
     4a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     4ac:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     4ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4b6:	685b      	ldr	r3, [r3, #4]
     4b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     4bc:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	ea4f 4393 	mov.w	r3, r3, lsr #18
     4c4:	f103 0302 	add.w	r3, r3, #2
     4c8:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	2b00      	cmp	r3, #0
     4ce:	d10c      	bne.n	4ea <SystemCoreClockUpdate+0xaa>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     4d0:	68ba      	ldr	r2, [r7, #8]
     4d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
     4d6:	f2c0 033d 	movt	r3, #61	; 0x3d
     4da:	fb03 f202 	mul.w	r2, r3, r2
     4de:	f240 0300 	movw	r3, #0
     4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4e6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4e8:	e02c      	b.n	544 <SystemCoreClockUpdate+0x104>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     4ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4f2:	685b      	ldr	r3, [r3, #4]
     4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4f8:	2b00      	cmp	r3, #0
     4fa:	d00c      	beq.n	516 <SystemCoreClockUpdate+0xd6>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     4fc:	68ba      	ldr	r2, [r7, #8]
     4fe:	f44f 6310 	mov.w	r3, #2304	; 0x900
     502:	f2c0 033d 	movt	r3, #61	; 0x3d
     506:	fb03 f202 	mul.w	r2, r3, r2
     50a:	f240 0300 	movw	r3, #0
     50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     512:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     514:	e016      	b.n	544 <SystemCoreClockUpdate+0x104>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     516:	68ba      	ldr	r2, [r7, #8]
     518:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     51c:	f2c0 037a 	movt	r3, #122	; 0x7a
     520:	fb03 f202 	mul.w	r2, r3, r2
     524:	f240 0300 	movw	r3, #0
     528:	f2c2 0300 	movt	r3, #8192	; 0x2000
     52c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     52e:	e009      	b.n	544 <SystemCoreClockUpdate+0x104>

    default:
      SystemCoreClock = HSI_VALUE;
     530:	f240 0300 	movw	r3, #0
     534:	f2c2 0300 	movt	r3, #8192	; 0x2000
     538:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     53c:	f2c0 027a 	movt	r2, #122	; 0x7a
     540:	601a      	str	r2, [r3, #0]
      break;
     542:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     548:	f2c4 0302 	movt	r3, #16386	; 0x4002
     54c:	685b      	ldr	r3, [r3, #4]
     54e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     552:	ea4f 1213 	mov.w	r2, r3, lsr #4
     556:	f240 0304 	movw	r3, #4
     55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     55e:	5c9b      	ldrb	r3, [r3, r2]
     560:	b2db      	uxtb	r3, r3
     562:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     564:	f240 0300 	movw	r3, #0
     568:	f2c2 0300 	movt	r3, #8192	; 0x2000
     56c:	681a      	ldr	r2, [r3, #0]
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	fa22 f203 	lsr.w	r2, r2, r3
     574:	f240 0300 	movw	r3, #0
     578:	f2c2 0300 	movt	r3, #8192	; 0x2000
     57c:	601a      	str	r2, [r3, #0]
}
     57e:	f107 0714 	add.w	r7, r7, #20
     582:	46bd      	mov	sp, r7
     584:	bc80      	pop	{r7}
     586:	4770      	bx	lr

00000588 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     588:	b580      	push	{r7, lr}
     58a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     58c:	f000 f802 	bl	594 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     590:	bd80      	pop	{r7, pc}
     592:	bf00      	nop

00000594 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     594:	b480      	push	{r7}
     596:	b083      	sub	sp, #12
     598:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     59a:	f04f 0300 	mov.w	r3, #0
     59e:	607b      	str	r3, [r7, #4]
     5a0:	f04f 0300 	mov.w	r3, #0
     5a4:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     5a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5b6:	6812      	ldr	r2, [r2, #0]
     5b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     5bc:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5cc:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	f103 0301 	add.w	r3, r3, #1
     5d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     5d6:	683b      	ldr	r3, [r7, #0]
     5d8:	2b00      	cmp	r3, #0
     5da:	d103      	bne.n	5e4 <SetSysClockTo72+0x50>
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     5e2:	d1ec      	bne.n	5be <SetSysClockTo72+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     5e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5f2:	2b00      	cmp	r3, #0
     5f4:	d003      	beq.n	5fe <SetSysClockTo72+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
     5f6:	f04f 0301 	mov.w	r3, #1
     5fa:	603b      	str	r3, [r7, #0]
     5fc:	e002      	b.n	604 <SetSysClockTo72+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     5fe:	f04f 0300 	mov.w	r3, #0
     602:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     604:	683b      	ldr	r3, [r7, #0]
     606:	2b01      	cmp	r3, #1
     608:	f040 8094 	bne.w	734 <SetSysClockTo72+0x1a0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     60c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     610:	f2c4 0302 	movt	r3, #16386	; 0x4002
     614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     618:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61c:	6812      	ldr	r2, [r2, #0]
     61e:	f042 0210 	orr.w	r2, r2, #16
     622:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     628:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     630:	f2c4 0202 	movt	r2, #16386	; 0x4002
     634:	6812      	ldr	r2, [r2, #0]
     636:	f022 0203 	bic.w	r2, r2, #3
     63a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     640:	f2c4 0302 	movt	r3, #16386	; 0x4002
     644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     648:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64c:	6812      	ldr	r2, [r2, #0]
     64e:	f042 0202 	orr.w	r2, r2, #2
     652:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     658:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     660:	f2c4 0202 	movt	r2, #16386	; 0x4002
     664:	6852      	ldr	r2, [r2, #4]
     666:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     66c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     674:	f2c4 0202 	movt	r2, #16386	; 0x4002
     678:	6852      	ldr	r2, [r2, #4]
     67a:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     680:	f2c4 0302 	movt	r3, #16386	; 0x4002
     684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     688:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68c:	6852      	ldr	r2, [r2, #4]
     68e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     692:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     698:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a4:	6852      	ldr	r2, [r2, #4]
     6a6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     6aa:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     6ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6bc:	6852      	ldr	r2, [r2, #4]
     6be:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     6c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6d4:	6812      	ldr	r2, [r2, #0]
     6d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     6da:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     6dc:	bf00      	nop
     6de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     6ec:	2b00      	cmp	r3, #0
     6ee:	d0f6      	beq.n	6de <SetSysClockTo72+0x14a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     700:	6852      	ldr	r2, [r2, #4]
     702:	f022 0203 	bic.w	r2, r2, #3
     706:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     70c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     714:	f2c4 0202 	movt	r2, #16386	; 0x4002
     718:	6852      	ldr	r2, [r2, #4]
     71a:	f042 0202 	orr.w	r2, r2, #2
     71e:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     720:	bf00      	nop
     722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     726:	f2c4 0302 	movt	r3, #16386	; 0x4002
     72a:	685b      	ldr	r3, [r3, #4]
     72c:	f003 030c 	and.w	r3, r3, #12
     730:	2b08      	cmp	r3, #8
     732:	d1f6      	bne.n	722 <SetSysClockTo72+0x18e>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     734:	f107 070c 	add.w	r7, r7, #12
     738:	46bd      	mov	sp, r7
     73a:	bc80      	pop	{r7}
     73c:	4770      	bx	lr
     73e:	bf00      	nop
     740:	00005c5c 	.word	0x00005c5c
     744:	20000000 	.word	0x20000000
     748:	20000030 	.word	0x20000030
     74c:	20000030 	.word	0x20000030
     750:	200045c8 	.word	0x200045c8

00000754 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     754:	b480      	push	{r7}
     756:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     75c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     764:	f2c4 0202 	movt	r2, #16386	; 0x4002
     768:	6812      	ldr	r2, [r2, #0]
     76a:	f042 0201 	orr.w	r2, r2, #1
     76e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     774:	f2c4 0202 	movt	r2, #16386	; 0x4002
     778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     77c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     780:	6859      	ldr	r1, [r3, #4]
     782:	f04f 0300 	mov.w	r3, #0
     786:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     78a:	400b      	ands	r3, r1
     78c:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     792:	f2c4 0302 	movt	r3, #16386	; 0x4002
     796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     79a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     79e:	6812      	ldr	r2, [r2, #0]
     7a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     7a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     7a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     7aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ba:	6812      	ldr	r2, [r2, #0]
     7bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     7c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d2:	6852      	ldr	r2, [r2, #4]
     7d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     7d8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     7da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7de:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     7e6:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     7e8:	46bd      	mov	sp, r7
     7ea:	bc80      	pop	{r7}
     7ec:	4770      	bx	lr
     7ee:	bf00      	nop

000007f0 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     7f0:	b480      	push	{r7}
     7f2:	b083      	sub	sp, #12
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     7f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     804:	f2c4 0202 	movt	r2, #16386	; 0x4002
     808:	6812      	ldr	r2, [r2, #0]
     80a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     80e:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     814:	f2c4 0302 	movt	r3, #16386	; 0x4002
     818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     81c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     820:	6812      	ldr	r2, [r2, #0]
     822:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     826:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     828:	687b      	ldr	r3, [r7, #4]
     82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     82e:	d003      	beq.n	838 <RCC_HSEConfig+0x48>
     830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     834:	d00d      	beq.n	852 <RCC_HSEConfig+0x62>
     836:	e019      	b.n	86c <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     83c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     844:	f2c4 0202 	movt	r2, #16386	; 0x4002
     848:	6812      	ldr	r2, [r2, #0]
     84a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     84e:	601a      	str	r2, [r3, #0]
      break;
     850:	e00d      	b.n	86e <RCC_HSEConfig+0x7e>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     856:	f2c4 0302 	movt	r3, #16386	; 0x4002
     85a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     85e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     862:	6812      	ldr	r2, [r2, #0]
     864:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     868:	601a      	str	r2, [r3, #0]
      break;
     86a:	e000      	b.n	86e <RCC_HSEConfig+0x7e>

    default:
      break;
     86c:	bf00      	nop
  }
}
     86e:	f107 070c 	add.w	r7, r7, #12
     872:	46bd      	mov	sp, r7
     874:	bc80      	pop	{r7}
     876:	4770      	bx	lr

00000878 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     87e:	f04f 0300 	mov.w	r3, #0
     882:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     884:	f04f 0300 	mov.w	r3, #0
     888:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     88a:	f04f 0300 	mov.w	r3, #0
     88e:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     890:	f04f 0031 	mov.w	r0, #49	; 0x31
     894:	f000 fbce 	bl	1034 <RCC_GetFlagStatus>
     898:	4603      	mov	r3, r0
     89a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     89c:	683b      	ldr	r3, [r7, #0]
     89e:	f103 0301 	add.w	r3, r3, #1
     8a2:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     8a4:	683b      	ldr	r3, [r7, #0]
     8a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     8aa:	d002      	beq.n	8b2 <RCC_WaitForHSEStartUp+0x3a>
     8ac:	79bb      	ldrb	r3, [r7, #6]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d0ee      	beq.n	890 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     8b2:	f04f 0031 	mov.w	r0, #49	; 0x31
     8b6:	f000 fbbd 	bl	1034 <RCC_GetFlagStatus>
     8ba:	4603      	mov	r3, r0
     8bc:	2b00      	cmp	r3, #0
     8be:	d003      	beq.n	8c8 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
     8c0:	f04f 0301 	mov.w	r3, #1
     8c4:	71fb      	strb	r3, [r7, #7]
     8c6:	e002      	b.n	8ce <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
     8c8:	f04f 0300 	mov.w	r3, #0
     8cc:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     8ce:	79fb      	ldrb	r3, [r7, #7]
}
     8d0:	4618      	mov	r0, r3
     8d2:	f107 0708 	add.w	r7, r7, #8
     8d6:	46bd      	mov	sp, r7
     8d8:	bd80      	pop	{r7, pc}
     8da:	bf00      	nop

000008dc <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     8dc:	b480      	push	{r7}
     8de:	b085      	sub	sp, #20
     8e0:	af00      	add	r7, sp, #0
     8e2:	4603      	mov	r3, r0
     8e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     8e6:	f04f 0300 	mov.w	r3, #0
     8ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     8ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8f4:	681b      	ldr	r3, [r3, #0]
     8f6:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     8f8:	68fb      	ldr	r3, [r7, #12]
     8fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     8fe:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     900:	79fb      	ldrb	r3, [r7, #7]
     902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     906:	68fa      	ldr	r2, [r7, #12]
     908:	4313      	orrs	r3, r2
     90a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     90c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     910:	f2c4 0302 	movt	r3, #16386	; 0x4002
     914:	68fa      	ldr	r2, [r7, #12]
     916:	601a      	str	r2, [r3, #0]
}
     918:	f107 0714 	add.w	r7, r7, #20
     91c:	46bd      	mov	sp, r7
     91e:	bc80      	pop	{r7}
     920:	4770      	bx	lr
     922:	bf00      	nop

00000924 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     924:	b480      	push	{r7}
     926:	b083      	sub	sp, #12
     928:	af00      	add	r7, sp, #0
     92a:	4603      	mov	r3, r0
     92c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     92e:	f04f 0300 	mov.w	r3, #0
     932:	f2c4 2342 	movt	r3, #16962	; 0x4242
     936:	79fa      	ldrb	r2, [r7, #7]
     938:	601a      	str	r2, [r3, #0]
}
     93a:	f107 070c 	add.w	r7, r7, #12
     93e:	46bd      	mov	sp, r7
     940:	bc80      	pop	{r7}
     942:	4770      	bx	lr

00000944 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     944:	b480      	push	{r7}
     946:	b085      	sub	sp, #20
     948:	af00      	add	r7, sp, #0
     94a:	6078      	str	r0, [r7, #4]
     94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     94e:	f04f 0300 	mov.w	r3, #0
     952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     958:	f2c4 0302 	movt	r3, #16386	; 0x4002
     95c:	685b      	ldr	r3, [r3, #4]
     95e:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     960:	68fb      	ldr	r3, [r7, #12]
     962:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     966:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     968:	687a      	ldr	r2, [r7, #4]
     96a:	683b      	ldr	r3, [r7, #0]
     96c:	4313      	orrs	r3, r2
     96e:	68fa      	ldr	r2, [r7, #12]
     970:	4313      	orrs	r3, r2
     972:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     978:	f2c4 0302 	movt	r3, #16386	; 0x4002
     97c:	68fa      	ldr	r2, [r7, #12]
     97e:	605a      	str	r2, [r3, #4]
}
     980:	f107 0714 	add.w	r7, r7, #20
     984:	46bd      	mov	sp, r7
     986:	bc80      	pop	{r7}
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     98c:	b480      	push	{r7}
     98e:	b083      	sub	sp, #12
     990:	af00      	add	r7, sp, #0
     992:	4603      	mov	r3, r0
     994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     996:	f04f 0360 	mov.w	r3, #96	; 0x60
     99a:	f2c4 2342 	movt	r3, #16962	; 0x4242
     99e:	79fa      	ldrb	r2, [r7, #7]
     9a0:	601a      	str	r2, [r3, #0]
}
     9a2:	f107 070c 	add.w	r7, r7, #12
     9a6:	46bd      	mov	sp, r7
     9a8:	bc80      	pop	{r7}
     9aa:	4770      	bx	lr

000009ac <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     9ac:	b480      	push	{r7}
     9ae:	b085      	sub	sp, #20
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9b4:	f04f 0300 	mov.w	r3, #0
     9b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     9ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9be:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9c2:	685b      	ldr	r3, [r3, #4]
     9c4:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	f023 0303 	bic.w	r3, r3, #3
     9cc:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     9ce:	68fa      	ldr	r2, [r7, #12]
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	4313      	orrs	r3, r2
     9d4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9da:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9de:	68fa      	ldr	r2, [r7, #12]
     9e0:	605a      	str	r2, [r3, #4]
}
     9e2:	f107 0714 	add.w	r7, r7, #20
     9e6:	46bd      	mov	sp, r7
     9e8:	bc80      	pop	{r7}
     9ea:	4770      	bx	lr

000009ec <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     9ec:	b480      	push	{r7}
     9ee:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     9f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9f8:	685b      	ldr	r3, [r3, #4]
     9fa:	b2db      	uxtb	r3, r3
     9fc:	f003 030c 	and.w	r3, r3, #12
     a00:	b2db      	uxtb	r3, r3
}
     a02:	4618      	mov	r0, r3
     a04:	46bd      	mov	sp, r7
     a06:	bc80      	pop	{r7}
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     a0c:	b480      	push	{r7}
     a0e:	b085      	sub	sp, #20
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a14:	f04f 0300 	mov.w	r3, #0
     a18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a22:	685b      	ldr	r3, [r3, #4]
     a24:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     a26:	68fb      	ldr	r3, [r7, #12]
     a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     a2c:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	4313      	orrs	r3, r2
     a34:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a3e:	68fa      	ldr	r2, [r7, #12]
     a40:	605a      	str	r2, [r3, #4]
}
     a42:	f107 0714 	add.w	r7, r7, #20
     a46:	46bd      	mov	sp, r7
     a48:	bc80      	pop	{r7}
     a4a:	4770      	bx	lr

00000a4c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     a4c:	b480      	push	{r7}
     a4e:	b085      	sub	sp, #20
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a54:	f04f 0300 	mov.w	r3, #0
     a58:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a62:	685b      	ldr	r3, [r3, #4]
     a64:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     a6c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     a6e:	68fa      	ldr	r2, [r7, #12]
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	4313      	orrs	r3, r2
     a74:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a7e:	68fa      	ldr	r2, [r7, #12]
     a80:	605a      	str	r2, [r3, #4]
}
     a82:	f107 0714 	add.w	r7, r7, #20
     a86:	46bd      	mov	sp, r7
     a88:	bc80      	pop	{r7}
     a8a:	4770      	bx	lr

00000a8c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     a8c:	b480      	push	{r7}
     a8e:	b085      	sub	sp, #20
     a90:	af00      	add	r7, sp, #0
     a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a94:	f04f 0300 	mov.w	r3, #0
     a98:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aa2:	685b      	ldr	r3, [r3, #4]
     aa4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     aa6:	68fb      	ldr	r3, [r7, #12]
     aa8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     aac:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     ab4:	68fa      	ldr	r2, [r7, #12]
     ab6:	4313      	orrs	r3, r2
     ab8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     abe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac2:	68fa      	ldr	r2, [r7, #12]
     ac4:	605a      	str	r2, [r3, #4]
}
     ac6:	f107 0714 	add.w	r7, r7, #20
     aca:	46bd      	mov	sp, r7
     acc:	bc80      	pop	{r7}
     ace:	4770      	bx	lr

00000ad0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     ad0:	b480      	push	{r7}
     ad2:	b083      	sub	sp, #12
     ad4:	af00      	add	r7, sp, #0
     ad6:	4602      	mov	r2, r0
     ad8:	460b      	mov	r3, r1
     ada:	71fa      	strb	r2, [r7, #7]
     adc:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ade:	79bb      	ldrb	r3, [r7, #6]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d00e      	beq.n	b02 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     ae4:	f241 0309 	movw	r3, #4105	; 0x1009
     ae8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aec:	f241 0209 	movw	r2, #4105	; 0x1009
     af0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     af4:	7812      	ldrb	r2, [r2, #0]
     af6:	b2d1      	uxtb	r1, r2
     af8:	79fa      	ldrb	r2, [r7, #7]
     afa:	430a      	orrs	r2, r1
     afc:	b2d2      	uxtb	r2, r2
     afe:	701a      	strb	r2, [r3, #0]
     b00:	e010      	b.n	b24 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     b02:	f241 0309 	movw	r3, #4105	; 0x1009
     b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b0a:	f241 0209 	movw	r2, #4105	; 0x1009
     b0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b12:	7812      	ldrb	r2, [r2, #0]
     b14:	b2d1      	uxtb	r1, r2
     b16:	79fa      	ldrb	r2, [r7, #7]
     b18:	ea6f 0202 	mvn.w	r2, r2
     b1c:	b2d2      	uxtb	r2, r2
     b1e:	400a      	ands	r2, r1
     b20:	b2d2      	uxtb	r2, r2
     b22:	701a      	strb	r2, [r3, #0]
  }
}
     b24:	f107 070c 	add.w	r7, r7, #12
     b28:	46bd      	mov	sp, r7
     b2a:	bc80      	pop	{r7}
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop

00000b30 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     b30:	b480      	push	{r7}
     b32:	b083      	sub	sp, #12
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     b38:	f04f 03d8 	mov.w	r3, #216	; 0xd8
     b3c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b40:	687a      	ldr	r2, [r7, #4]
     b42:	601a      	str	r2, [r3, #0]
}
     b44:	f107 070c 	add.w	r7, r7, #12
     b48:	46bd      	mov	sp, r7
     b4a:	bc80      	pop	{r7}
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop

00000b50 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     b50:	b480      	push	{r7}
     b52:	b085      	sub	sp, #20
     b54:	af00      	add	r7, sp, #0
     b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b58:	f04f 0300 	mov.w	r3, #0
     b5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b66:	685b      	ldr	r3, [r3, #4]
     b68:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     b6a:	68fb      	ldr	r3, [r7, #12]
     b6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     b70:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     b72:	68fa      	ldr	r2, [r7, #12]
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	4313      	orrs	r3, r2
     b78:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b82:	68fa      	ldr	r2, [r7, #12]
     b84:	605a      	str	r2, [r3, #4]
}
     b86:	f107 0714 	add.w	r7, r7, #20
     b8a:	46bd      	mov	sp, r7
     b8c:	bc80      	pop	{r7}
     b8e:	4770      	bx	lr

00000b90 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     b90:	b480      	push	{r7}
     b92:	b083      	sub	sp, #12
     b94:	af00      	add	r7, sp, #0
     b96:	4603      	mov	r3, r0
     b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b9a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ba2:	f04f 0200 	mov.w	r2, #0
     ba6:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     ba8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bb0:	f04f 0200 	mov.w	r2, #0
     bb4:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     bb6:	79fb      	ldrb	r3, [r7, #7]
     bb8:	2b01      	cmp	r3, #1
     bba:	d002      	beq.n	bc2 <RCC_LSEConfig+0x32>
     bbc:	2b04      	cmp	r3, #4
     bbe:	d008      	beq.n	bd2 <RCC_LSEConfig+0x42>
     bc0:	e00f      	b.n	be2 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     bc2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bca:	f04f 0201 	mov.w	r2, #1
     bce:	701a      	strb	r2, [r3, #0]
      break;
     bd0:	e008      	b.n	be4 <RCC_LSEConfig+0x54>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     bd2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bda:	f04f 0205 	mov.w	r2, #5
     bde:	701a      	strb	r2, [r3, #0]
      break;
     be0:	e000      	b.n	be4 <RCC_LSEConfig+0x54>

    default:
      break;
     be2:	bf00      	nop
  }
}
     be4:	f107 070c 	add.w	r7, r7, #12
     be8:	46bd      	mov	sp, r7
     bea:	bc80      	pop	{r7}
     bec:	4770      	bx	lr
     bee:	bf00      	nop

00000bf0 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     bf0:	b480      	push	{r7}
     bf2:	b083      	sub	sp, #12
     bf4:	af00      	add	r7, sp, #0
     bf6:	4603      	mov	r3, r0
     bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     bfa:	f44f 6390 	mov.w	r3, #1152	; 0x480
     bfe:	f2c4 2342 	movt	r3, #16962	; 0x4242
     c02:	79fa      	ldrb	r2, [r7, #7]
     c04:	601a      	str	r2, [r3, #0]
}
     c06:	f107 070c 	add.w	r7, r7, #12
     c0a:	46bd      	mov	sp, r7
     c0c:	bc80      	pop	{r7}
     c0e:	4770      	bx	lr

00000c10 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     c10:	b480      	push	{r7}
     c12:	b083      	sub	sp, #12
     c14:	af00      	add	r7, sp, #0
     c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c24:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c28:	6a11      	ldr	r1, [r2, #32]
     c2a:	687a      	ldr	r2, [r7, #4]
     c2c:	430a      	orrs	r2, r1
     c2e:	621a      	str	r2, [r3, #32]
}
     c30:	f107 070c 	add.w	r7, r7, #12
     c34:	46bd      	mov	sp, r7
     c36:	bc80      	pop	{r7}
     c38:	4770      	bx	lr
     c3a:	bf00      	nop

00000c3c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     c3c:	b480      	push	{r7}
     c3e:	b083      	sub	sp, #12
     c40:	af00      	add	r7, sp, #0
     c42:	4603      	mov	r3, r0
     c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     c46:	f240 433c 	movw	r3, #1084	; 0x43c
     c4a:	f2c4 2342 	movt	r3, #16962	; 0x4242
     c4e:	79fa      	ldrb	r2, [r7, #7]
     c50:	601a      	str	r2, [r3, #0]
}
     c52:	f107 070c 	add.w	r7, r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	bc80      	pop	{r7}
     c5a:	4770      	bx	lr

00000c5c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     c5c:	b480      	push	{r7}
     c5e:	b087      	sub	sp, #28
     c60:	af00      	add	r7, sp, #0
     c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     c64:	f04f 0300 	mov.w	r3, #0
     c68:	617b      	str	r3, [r7, #20]
     c6a:	f04f 0300 	mov.w	r3, #0
     c6e:	613b      	str	r3, [r7, #16]
     c70:	f04f 0300 	mov.w	r3, #0
     c74:	60fb      	str	r3, [r7, #12]
     c76:	f04f 0300 	mov.w	r3, #0
     c7a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c84:	685b      	ldr	r3, [r3, #4]
     c86:	f003 030c 	and.w	r3, r3, #12
     c8a:	617b      	str	r3, [r7, #20]

  switch (tmp)
     c8c:	697b      	ldr	r3, [r7, #20]
     c8e:	2b04      	cmp	r3, #4
     c90:	d00a      	beq.n	ca8 <RCC_GetClocksFreq+0x4c>
     c92:	2b08      	cmp	r3, #8
     c94:	d00f      	beq.n	cb6 <RCC_GetClocksFreq+0x5a>
     c96:	2b00      	cmp	r3, #0
     c98:	d14d      	bne.n	d36 <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c9a:	687a      	ldr	r2, [r7, #4]
     c9c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     ca0:	f2c0 037a 	movt	r3, #122	; 0x7a
     ca4:	6013      	str	r3, [r2, #0]
      break;
     ca6:	e04d      	b.n	d44 <RCC_GetClocksFreq+0xe8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     ca8:	687a      	ldr	r2, [r7, #4]
     caa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     cae:	f2c0 037a 	movt	r3, #122	; 0x7a
     cb2:	6013      	str	r3, [r2, #0]
      break;
     cb4:	e046      	b.n	d44 <RCC_GetClocksFreq+0xe8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cba:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cbe:	685b      	ldr	r3, [r3, #4]
     cc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     cc4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     cd4:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     cd6:	693b      	ldr	r3, [r7, #16]
     cd8:	ea4f 4393 	mov.w	r3, r3, lsr #18
     cdc:	f103 0302 	add.w	r3, r3, #2
     ce0:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d109      	bne.n	cfc <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     ce8:	693a      	ldr	r2, [r7, #16]
     cea:	f44f 6310 	mov.w	r3, #2304	; 0x900
     cee:	f2c0 033d 	movt	r3, #61	; 0x3d
     cf2:	fb03 f202 	mul.w	r2, r3, r2
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     cfa:	e023      	b.n	d44 <RCC_GetClocksFreq+0xe8>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d00:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d04:	685b      	ldr	r3, [r3, #4]
     d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     d0a:	2b00      	cmp	r3, #0
     d0c:	d009      	beq.n	d22 <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     d0e:	693a      	ldr	r2, [r7, #16]
     d10:	f44f 6310 	mov.w	r3, #2304	; 0x900
     d14:	f2c0 033d 	movt	r3, #61	; 0x3d
     d18:	fb03 f202 	mul.w	r2, r3, r2
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     d20:	e010      	b.n	d44 <RCC_GetClocksFreq+0xe8>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     d22:	693a      	ldr	r2, [r7, #16]
     d24:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     d28:	f2c0 037a 	movt	r3, #122	; 0x7a
     d2c:	fb03 f202 	mul.w	r2, r3, r2
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     d34:	e006      	b.n	d44 <RCC_GetClocksFreq+0xe8>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     d36:	687a      	ldr	r2, [r7, #4]
     d38:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     d3c:	f2c0 037a 	movt	r3, #122	; 0x7a
     d40:	6013      	str	r3, [r2, #0]
      break;
     d42:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d48:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d4c:	685b      	ldr	r3, [r3, #4]
     d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     d52:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     d54:	697b      	ldr	r3, [r7, #20]
     d56:	ea4f 1313 	mov.w	r3, r3, lsr #4
     d5a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d5c:	f240 0314 	movw	r3, #20
     d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d64:	697a      	ldr	r2, [r7, #20]
     d66:	189b      	adds	r3, r3, r2
     d68:	781b      	ldrb	r3, [r3, #0]
     d6a:	b2db      	uxtb	r3, r3
     d6c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	681a      	ldr	r2, [r3, #0]
     d72:	68bb      	ldr	r3, [r7, #8]
     d74:	fa22 f203 	lsr.w	r2, r2, r3
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d84:	685b      	ldr	r3, [r3, #4]
     d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     d8a:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     d8c:	697b      	ldr	r3, [r7, #20]
     d8e:	ea4f 2313 	mov.w	r3, r3, lsr #8
     d92:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d94:	f240 0314 	movw	r3, #20
     d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d9c:	697a      	ldr	r2, [r7, #20]
     d9e:	189b      	adds	r3, r3, r2
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	b2db      	uxtb	r3, r3
     da4:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	685a      	ldr	r2, [r3, #4]
     daa:	68bb      	ldr	r3, [r7, #8]
     dac:	fa22 f203 	lsr.w	r2, r2, r3
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     db8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dbc:	685b      	ldr	r3, [r3, #4]
     dbe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     dc2:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     dc4:	697b      	ldr	r3, [r7, #20]
     dc6:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     dca:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     dcc:	f240 0314 	movw	r3, #20
     dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     dd4:	697a      	ldr	r2, [r7, #20]
     dd6:	189b      	adds	r3, r3, r2
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	b2db      	uxtb	r3, r3
     ddc:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	685a      	ldr	r2, [r3, #4]
     de2:	68bb      	ldr	r3, [r7, #8]
     de4:	fa22 f203 	lsr.w	r2, r2, r3
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	685b      	ldr	r3, [r3, #4]
     df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     dfa:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     dfc:	697b      	ldr	r3, [r7, #20]
     dfe:	ea4f 3393 	mov.w	r3, r3, lsr #14
     e02:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     e04:	f240 0324 	movw	r3, #36	; 0x24
     e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e0c:	697a      	ldr	r2, [r7, #20]
     e0e:	189b      	adds	r3, r3, r2
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	b2db      	uxtb	r3, r3
     e14:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	68da      	ldr	r2, [r3, #12]
     e1a:	68bb      	ldr	r3, [r7, #8]
     e1c:	fbb2 f2f3 	udiv	r2, r2, r3
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	611a      	str	r2, [r3, #16]
}
     e24:	f107 071c 	add.w	r7, r7, #28
     e28:	46bd      	mov	sp, r7
     e2a:	bc80      	pop	{r7}
     e2c:	4770      	bx	lr
     e2e:	bf00      	nop

00000e30 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     e30:	b480      	push	{r7}
     e32:	b083      	sub	sp, #12
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
     e38:	460b      	mov	r3, r1
     e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     e3c:	78fb      	ldrb	r3, [r7, #3]
     e3e:	2b00      	cmp	r3, #0
     e40:	d00c      	beq.n	e5c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e46:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e52:	6951      	ldr	r1, [r2, #20]
     e54:	687a      	ldr	r2, [r7, #4]
     e56:	430a      	orrs	r2, r1
     e58:	615a      	str	r2, [r3, #20]
     e5a:	e00d      	b.n	e78 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e60:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e68:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e6c:	6951      	ldr	r1, [r2, #20]
     e6e:	687a      	ldr	r2, [r7, #4]
     e70:	ea6f 0202 	mvn.w	r2, r2
     e74:	400a      	ands	r2, r1
     e76:	615a      	str	r2, [r3, #20]
  }
}
     e78:	f107 070c 	add.w	r7, r7, #12
     e7c:	46bd      	mov	sp, r7
     e7e:	bc80      	pop	{r7}
     e80:	4770      	bx	lr
     e82:	bf00      	nop

00000e84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e84:	b480      	push	{r7}
     e86:	b083      	sub	sp, #12
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
     e8c:	460b      	mov	r3, r1
     e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e90:	78fb      	ldrb	r3, [r7, #3]
     e92:	2b00      	cmp	r3, #0
     e94:	d00c      	beq.n	eb0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ea6:	6991      	ldr	r1, [r2, #24]
     ea8:	687a      	ldr	r2, [r7, #4]
     eaa:	430a      	orrs	r2, r1
     eac:	619a      	str	r2, [r3, #24]
     eae:	e00d      	b.n	ecc <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ebc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ec0:	6991      	ldr	r1, [r2, #24]
     ec2:	687a      	ldr	r2, [r7, #4]
     ec4:	ea6f 0202 	mvn.w	r2, r2
     ec8:	400a      	ands	r2, r1
     eca:	619a      	str	r2, [r3, #24]
  }
}
     ecc:	f107 070c 	add.w	r7, r7, #12
     ed0:	46bd      	mov	sp, r7
     ed2:	bc80      	pop	{r7}
     ed4:	4770      	bx	lr
     ed6:	bf00      	nop

00000ed8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     ed8:	b480      	push	{r7}
     eda:	b083      	sub	sp, #12
     edc:	af00      	add	r7, sp, #0
     ede:	6078      	str	r0, [r7, #4]
     ee0:	460b      	mov	r3, r1
     ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ee4:	78fb      	ldrb	r3, [r7, #3]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d00c      	beq.n	f04 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ef6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     efa:	69d1      	ldr	r1, [r2, #28]
     efc:	687a      	ldr	r2, [r7, #4]
     efe:	430a      	orrs	r2, r1
     f00:	61da      	str	r2, [r3, #28]
     f02:	e00d      	b.n	f20 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f08:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f10:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f14:	69d1      	ldr	r1, [r2, #28]
     f16:	687a      	ldr	r2, [r7, #4]
     f18:	ea6f 0202 	mvn.w	r2, r2
     f1c:	400a      	ands	r2, r1
     f1e:	61da      	str	r2, [r3, #28]
  }
}
     f20:	f107 070c 	add.w	r7, r7, #12
     f24:	46bd      	mov	sp, r7
     f26:	bc80      	pop	{r7}
     f28:	4770      	bx	lr
     f2a:	bf00      	nop

00000f2c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     f2c:	b480      	push	{r7}
     f2e:	b083      	sub	sp, #12
     f30:	af00      	add	r7, sp, #0
     f32:	6078      	str	r0, [r7, #4]
     f34:	460b      	mov	r3, r1
     f36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f38:	78fb      	ldrb	r3, [r7, #3]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d00c      	beq.n	f58 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f42:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f4e:	68d1      	ldr	r1, [r2, #12]
     f50:	687a      	ldr	r2, [r7, #4]
     f52:	430a      	orrs	r2, r1
     f54:	60da      	str	r2, [r3, #12]
     f56:	e00d      	b.n	f74 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f64:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f68:	68d1      	ldr	r1, [r2, #12]
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	ea6f 0202 	mvn.w	r2, r2
     f70:	400a      	ands	r2, r1
     f72:	60da      	str	r2, [r3, #12]
  }
}
     f74:	f107 070c 	add.w	r7, r7, #12
     f78:	46bd      	mov	sp, r7
     f7a:	bc80      	pop	{r7}
     f7c:	4770      	bx	lr
     f7e:	bf00      	nop

00000f80 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     f80:	b480      	push	{r7}
     f82:	b083      	sub	sp, #12
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
     f88:	460b      	mov	r3, r1
     f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f8c:	78fb      	ldrb	r3, [r7, #3]
     f8e:	2b00      	cmp	r3, #0
     f90:	d00c      	beq.n	fac <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fa2:	6911      	ldr	r1, [r2, #16]
     fa4:	687a      	ldr	r2, [r7, #4]
     fa6:	430a      	orrs	r2, r1
     fa8:	611a      	str	r2, [r3, #16]
     faa:	e00d      	b.n	fc8 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     fb8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fbc:	6911      	ldr	r1, [r2, #16]
     fbe:	687a      	ldr	r2, [r7, #4]
     fc0:	ea6f 0202 	mvn.w	r2, r2
     fc4:	400a      	ands	r2, r1
     fc6:	611a      	str	r2, [r3, #16]
  }
}
     fc8:	f107 070c 	add.w	r7, r7, #12
     fcc:	46bd      	mov	sp, r7
     fce:	bc80      	pop	{r7}
     fd0:	4770      	bx	lr
     fd2:	bf00      	nop

00000fd4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     fd4:	b480      	push	{r7}
     fd6:	b083      	sub	sp, #12
     fd8:	af00      	add	r7, sp, #0
     fda:	4603      	mov	r3, r0
     fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     fde:	f44f 6388 	mov.w	r3, #1088	; 0x440
     fe2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     fe6:	79fa      	ldrb	r2, [r7, #7]
     fe8:	601a      	str	r2, [r3, #0]
}
     fea:	f107 070c 	add.w	r7, r7, #12
     fee:	46bd      	mov	sp, r7
     ff0:	bc80      	pop	{r7}
     ff2:	4770      	bx	lr

00000ff4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     ff4:	b480      	push	{r7}
     ff6:	b083      	sub	sp, #12
     ff8:	af00      	add	r7, sp, #0
     ffa:	4603      	mov	r3, r0
     ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     ffe:	f04f 034c 	mov.w	r3, #76	; 0x4c
    1002:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1006:	79fa      	ldrb	r2, [r7, #7]
    1008:	601a      	str	r2, [r3, #0]
}
    100a:	f107 070c 	add.w	r7, r7, #12
    100e:	46bd      	mov	sp, r7
    1010:	bc80      	pop	{r7}
    1012:	4770      	bx	lr

00001014 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    1014:	b480      	push	{r7}
    1016:	b083      	sub	sp, #12
    1018:	af00      	add	r7, sp, #0
    101a:	4603      	mov	r3, r0
    101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    101e:	f241 0307 	movw	r3, #4103	; 0x1007
    1022:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1026:	79fa      	ldrb	r2, [r7, #7]
    1028:	701a      	strb	r2, [r3, #0]
}
    102a:	f107 070c 	add.w	r7, r7, #12
    102e:	46bd      	mov	sp, r7
    1030:	bc80      	pop	{r7}
    1032:	4770      	bx	lr

00001034 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    1034:	b480      	push	{r7}
    1036:	b087      	sub	sp, #28
    1038:	af00      	add	r7, sp, #0
    103a:	4603      	mov	r3, r0
    103c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    103e:	f04f 0300 	mov.w	r3, #0
    1042:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    1044:	f04f 0300 	mov.w	r3, #0
    1048:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    104a:	f04f 0300 	mov.w	r3, #0
    104e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    1050:	79fb      	ldrb	r3, [r7, #7]
    1052:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1056:	b2db      	uxtb	r3, r3
    1058:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    105a:	68fb      	ldr	r3, [r7, #12]
    105c:	2b01      	cmp	r3, #1
    105e:	d106      	bne.n	106e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
    1060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1064:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	617b      	str	r3, [r7, #20]
    106c:	e00f      	b.n	108e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    106e:	68fb      	ldr	r3, [r7, #12]
    1070:	2b02      	cmp	r3, #2
    1072:	d106      	bne.n	1082 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
    1074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1078:	f2c4 0302 	movt	r3, #16386	; 0x4002
    107c:	6a1b      	ldr	r3, [r3, #32]
    107e:	617b      	str	r3, [r7, #20]
    1080:	e005      	b.n	108e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    1082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1086:	f2c4 0302 	movt	r3, #16386	; 0x4002
    108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    108c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    108e:	79fb      	ldrb	r3, [r7, #7]
    1090:	f003 031f 	and.w	r3, r3, #31
    1094:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    1096:	68fb      	ldr	r3, [r7, #12]
    1098:	697a      	ldr	r2, [r7, #20]
    109a:	fa22 f303 	lsr.w	r3, r2, r3
    109e:	f003 0301 	and.w	r3, r3, #1
    10a2:	b2db      	uxtb	r3, r3
    10a4:	2b00      	cmp	r3, #0
    10a6:	d003      	beq.n	10b0 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
    10a8:	f04f 0301 	mov.w	r3, #1
    10ac:	74fb      	strb	r3, [r7, #19]
    10ae:	e002      	b.n	10b6 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
    10b0:	f04f 0300 	mov.w	r3, #0
    10b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    10b6:	7cfb      	ldrb	r3, [r7, #19]
}
    10b8:	4618      	mov	r0, r3
    10ba:	f107 071c 	add.w	r7, r7, #28
    10be:	46bd      	mov	sp, r7
    10c0:	bc80      	pop	{r7}
    10c2:	4770      	bx	lr

000010c4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    10c4:	b480      	push	{r7}
    10c6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    10c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    10da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    10de:	625a      	str	r2, [r3, #36]	; 0x24
}
    10e0:	46bd      	mov	sp, r7
    10e2:	bc80      	pop	{r7}
    10e4:	4770      	bx	lr
    10e6:	bf00      	nop

000010e8 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    10e8:	b480      	push	{r7}
    10ea:	b085      	sub	sp, #20
    10ec:	af00      	add	r7, sp, #0
    10ee:	4603      	mov	r3, r0
    10f0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    10f2:	f04f 0300 	mov.w	r3, #0
    10f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    10f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1100:	689a      	ldr	r2, [r3, #8]
    1102:	79fb      	ldrb	r3, [r7, #7]
    1104:	4013      	ands	r3, r2
    1106:	2b00      	cmp	r3, #0
    1108:	d003      	beq.n	1112 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
    110a:	f04f 0301 	mov.w	r3, #1
    110e:	73fb      	strb	r3, [r7, #15]
    1110:	e002      	b.n	1118 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    1112:	f04f 0300 	mov.w	r3, #0
    1116:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1118:	7bfb      	ldrb	r3, [r7, #15]
}
    111a:	4618      	mov	r0, r3
    111c:	f107 0714 	add.w	r7, r7, #20
    1120:	46bd      	mov	sp, r7
    1122:	bc80      	pop	{r7}
    1124:	4770      	bx	lr
    1126:	bf00      	nop

00001128 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1128:	b480      	push	{r7}
    112a:	b083      	sub	sp, #12
    112c:	af00      	add	r7, sp, #0
    112e:	4603      	mov	r3, r0
    1130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    1132:	f241 030a 	movw	r3, #4106	; 0x100a
    1136:	f2c4 0302 	movt	r3, #16386	; 0x4002
    113a:	79fa      	ldrb	r2, [r7, #7]
    113c:	701a      	strb	r2, [r3, #0]
}
    113e:	f107 070c 	add.w	r7, r7, #12
    1142:	46bd      	mov	sp, r7
    1144:	bc80      	pop	{r7}
    1146:	4770      	bx	lr

00001148 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1148:	b580      	push	{r7, lr}
    114a:	b082      	sub	sp, #8
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1156:	f2c4 0301 	movt	r3, #16385	; 0x4001
    115a:	429a      	cmp	r2, r3
    115c:	d10c      	bne.n	1178 <GPIO_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    115e:	f04f 0004 	mov.w	r0, #4
    1162:	f04f 0101 	mov.w	r1, #1
    1166:	f7ff fee1 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    116a:	f04f 0004 	mov.w	r0, #4
    116e:	f04f 0100 	mov.w	r1, #0
    1172:	f7ff fedb 	bl	f2c <RCC_APB2PeriphResetCmd>
    1176:	e076      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOB)
    1178:	687a      	ldr	r2, [r7, #4]
    117a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    117e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1182:	429a      	cmp	r2, r3
    1184:	d10c      	bne.n	11a0 <GPIO_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1186:	f04f 0008 	mov.w	r0, #8
    118a:	f04f 0101 	mov.w	r1, #1
    118e:	f7ff fecd 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    1192:	f04f 0008 	mov.w	r0, #8
    1196:	f04f 0100 	mov.w	r1, #0
    119a:	f7ff fec7 	bl	f2c <RCC_APB2PeriphResetCmd>
    119e:	e062      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOC)
    11a0:	687a      	ldr	r2, [r7, #4]
    11a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11aa:	429a      	cmp	r2, r3
    11ac:	d10c      	bne.n	11c8 <GPIO_DeInit+0x80>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    11ae:	f04f 0010 	mov.w	r0, #16
    11b2:	f04f 0101 	mov.w	r1, #1
    11b6:	f7ff feb9 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    11ba:	f04f 0010 	mov.w	r0, #16
    11be:	f04f 0100 	mov.w	r1, #0
    11c2:	f7ff feb3 	bl	f2c <RCC_APB2PeriphResetCmd>
    11c6:	e04e      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOD)
    11c8:	687a      	ldr	r2, [r7, #4]
    11ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    11ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11d2:	429a      	cmp	r2, r3
    11d4:	d10c      	bne.n	11f0 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    11d6:	f04f 0020 	mov.w	r0, #32
    11da:	f04f 0101 	mov.w	r1, #1
    11de:	f7ff fea5 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    11e2:	f04f 0020 	mov.w	r0, #32
    11e6:	f04f 0100 	mov.w	r1, #0
    11ea:	f7ff fe9f 	bl	f2c <RCC_APB2PeriphResetCmd>
    11ee:	e03a      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOE)
    11f0:	687a      	ldr	r2, [r7, #4]
    11f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    11f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11fa:	429a      	cmp	r2, r3
    11fc:	d10c      	bne.n	1218 <GPIO_DeInit+0xd0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    11fe:	f04f 0040 	mov.w	r0, #64	; 0x40
    1202:	f04f 0101 	mov.w	r1, #1
    1206:	f7ff fe91 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    120a:	f04f 0040 	mov.w	r0, #64	; 0x40
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f7ff fe8b 	bl	f2c <RCC_APB2PeriphResetCmd>
    1216:	e026      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOF)
    1218:	687a      	ldr	r2, [r7, #4]
    121a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    121e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1222:	429a      	cmp	r2, r3
    1224:	d10c      	bne.n	1240 <GPIO_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1226:	f04f 0080 	mov.w	r0, #128	; 0x80
    122a:	f04f 0101 	mov.w	r1, #1
    122e:	f7ff fe7d 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    1232:	f04f 0080 	mov.w	r0, #128	; 0x80
    1236:	f04f 0100 	mov.w	r1, #0
    123a:	f7ff fe77 	bl	f2c <RCC_APB2PeriphResetCmd>
    123e:	e012      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else
  {
    if (GPIOx == GPIOG)
    1240:	687a      	ldr	r2, [r7, #4]
    1242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1246:	f2c4 0301 	movt	r3, #16385	; 0x4001
    124a:	429a      	cmp	r2, r3
    124c:	d10b      	bne.n	1266 <GPIO_DeInit+0x11e>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    124e:	f44f 7080 	mov.w	r0, #256	; 0x100
    1252:	f04f 0101 	mov.w	r1, #1
    1256:	f7ff fe69 	bl	f2c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    125a:	f44f 7080 	mov.w	r0, #256	; 0x100
    125e:	f04f 0100 	mov.w	r1, #0
    1262:	f7ff fe63 	bl	f2c <RCC_APB2PeriphResetCmd>
    }
  }
}
    1266:	f107 0708 	add.w	r7, r7, #8
    126a:	46bd      	mov	sp, r7
    126c:	bd80      	pop	{r7, pc}
    126e:	bf00      	nop

00001270 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1270:	b580      	push	{r7, lr}
    1272:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1274:	f04f 0001 	mov.w	r0, #1
    1278:	f04f 0101 	mov.w	r1, #1
    127c:	f7ff fe56 	bl	f2c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1280:	f04f 0001 	mov.w	r0, #1
    1284:	f04f 0100 	mov.w	r1, #0
    1288:	f7ff fe50 	bl	f2c <RCC_APB2PeriphResetCmd>
}
    128c:	bd80      	pop	{r7, pc}
    128e:	bf00      	nop

00001290 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1290:	b480      	push	{r7}
    1292:	b089      	sub	sp, #36	; 0x24
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
    1298:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    129a:	f04f 0300 	mov.w	r3, #0
    129e:	61fb      	str	r3, [r7, #28]
    12a0:	f04f 0300 	mov.w	r3, #0
    12a4:	613b      	str	r3, [r7, #16]
    12a6:	f04f 0300 	mov.w	r3, #0
    12aa:	61bb      	str	r3, [r7, #24]
    12ac:	f04f 0300 	mov.w	r3, #0
    12b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    12b2:	f04f 0300 	mov.w	r3, #0
    12b6:	617b      	str	r3, [r7, #20]
    12b8:	f04f 0300 	mov.w	r3, #0
    12bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	78db      	ldrb	r3, [r3, #3]
    12c2:	f003 030f 	and.w	r3, r3, #15
    12c6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    12c8:	683b      	ldr	r3, [r7, #0]
    12ca:	78db      	ldrb	r3, [r3, #3]
    12cc:	f003 0310 	and.w	r3, r3, #16
    12d0:	2b00      	cmp	r3, #0
    12d2:	d004      	beq.n	12de <GPIO_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    12d4:	683b      	ldr	r3, [r7, #0]
    12d6:	789b      	ldrb	r3, [r3, #2]
    12d8:	69fa      	ldr	r2, [r7, #28]
    12da:	4313      	orrs	r3, r2
    12dc:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    12de:	683b      	ldr	r3, [r7, #0]
    12e0:	881b      	ldrh	r3, [r3, #0]
    12e2:	b2db      	uxtb	r3, r3
    12e4:	2b00      	cmp	r3, #0
    12e6:	d04e      	beq.n	1386 <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12ee:	f04f 0300 	mov.w	r3, #0
    12f2:	61bb      	str	r3, [r7, #24]
    12f4:	e041      	b.n	137a <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
    12f6:	69bb      	ldr	r3, [r7, #24]
    12f8:	f04f 0201 	mov.w	r2, #1
    12fc:	fa02 f303 	lsl.w	r3, r2, r3
    1300:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1302:	683b      	ldr	r3, [r7, #0]
    1304:	881b      	ldrh	r3, [r3, #0]
    1306:	461a      	mov	r2, r3
    1308:	68fb      	ldr	r3, [r7, #12]
    130a:	4013      	ands	r3, r2
    130c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    130e:	693a      	ldr	r2, [r7, #16]
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	429a      	cmp	r2, r3
    1314:	d12d      	bne.n	1372 <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
    1316:	69bb      	ldr	r3, [r7, #24]
    1318:	ea4f 0383 	mov.w	r3, r3, lsl #2
    131c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	f04f 020f 	mov.w	r2, #15
    1324:	fa02 f303 	lsl.w	r3, r2, r3
    1328:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    132a:	68bb      	ldr	r3, [r7, #8]
    132c:	ea6f 0303 	mvn.w	r3, r3
    1330:	697a      	ldr	r2, [r7, #20]
    1332:	4013      	ands	r3, r2
    1334:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	69fa      	ldr	r2, [r7, #28]
    133a:	fa02 f303 	lsl.w	r3, r2, r3
    133e:	697a      	ldr	r2, [r7, #20]
    1340:	4313      	orrs	r3, r2
    1342:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1344:	683b      	ldr	r3, [r7, #0]
    1346:	78db      	ldrb	r3, [r3, #3]
    1348:	2b28      	cmp	r3, #40	; 0x28
    134a:	d107      	bne.n	135c <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    134c:	69bb      	ldr	r3, [r7, #24]
    134e:	f04f 0201 	mov.w	r2, #1
    1352:	fa02 f203 	lsl.w	r2, r2, r3
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	615a      	str	r2, [r3, #20]
    135a:	e00a      	b.n	1372 <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    135c:	683b      	ldr	r3, [r7, #0]
    135e:	78db      	ldrb	r3, [r3, #3]
    1360:	2b48      	cmp	r3, #72	; 0x48
    1362:	d106      	bne.n	1372 <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1364:	69bb      	ldr	r3, [r7, #24]
    1366:	f04f 0201 	mov.w	r2, #1
    136a:	fa02 f203 	lsl.w	r2, r2, r3
    136e:	687b      	ldr	r3, [r7, #4]
    1370:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1372:	69bb      	ldr	r3, [r7, #24]
    1374:	f103 0301 	add.w	r3, r3, #1
    1378:	61bb      	str	r3, [r7, #24]
    137a:	69bb      	ldr	r3, [r7, #24]
    137c:	2b07      	cmp	r3, #7
    137e:	d9ba      	bls.n	12f6 <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	697a      	ldr	r2, [r7, #20]
    1384:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    1386:	683b      	ldr	r3, [r7, #0]
    1388:	881b      	ldrh	r3, [r3, #0]
    138a:	2bff      	cmp	r3, #255	; 0xff
    138c:	d953      	bls.n	1436 <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	685b      	ldr	r3, [r3, #4]
    1392:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1394:	f04f 0300 	mov.w	r3, #0
    1398:	61bb      	str	r3, [r7, #24]
    139a:	e046      	b.n	142a <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    139c:	69bb      	ldr	r3, [r7, #24]
    139e:	f103 0308 	add.w	r3, r3, #8
    13a2:	f04f 0201 	mov.w	r2, #1
    13a6:	fa02 f303 	lsl.w	r3, r2, r3
    13aa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    13ac:	683b      	ldr	r3, [r7, #0]
    13ae:	881b      	ldrh	r3, [r3, #0]
    13b0:	461a      	mov	r2, r3
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	4013      	ands	r3, r2
    13b6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    13b8:	693a      	ldr	r2, [r7, #16]
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	429a      	cmp	r2, r3
    13be:	d130      	bne.n	1422 <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
    13c0:	69bb      	ldr	r3, [r7, #24]
    13c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    13c6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	f04f 020f 	mov.w	r2, #15
    13ce:	fa02 f303 	lsl.w	r3, r2, r3
    13d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    13d4:	68bb      	ldr	r3, [r7, #8]
    13d6:	ea6f 0303 	mvn.w	r3, r3
    13da:	697a      	ldr	r2, [r7, #20]
    13dc:	4013      	ands	r3, r2
    13de:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    13e0:	68fb      	ldr	r3, [r7, #12]
    13e2:	69fa      	ldr	r2, [r7, #28]
    13e4:	fa02 f303 	lsl.w	r3, r2, r3
    13e8:	697a      	ldr	r2, [r7, #20]
    13ea:	4313      	orrs	r3, r2
    13ec:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    13ee:	683b      	ldr	r3, [r7, #0]
    13f0:	78db      	ldrb	r3, [r3, #3]
    13f2:	2b28      	cmp	r3, #40	; 0x28
    13f4:	d108      	bne.n	1408 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    13f6:	69bb      	ldr	r3, [r7, #24]
    13f8:	f103 0308 	add.w	r3, r3, #8
    13fc:	f04f 0201 	mov.w	r2, #1
    1400:	fa02 f203 	lsl.w	r2, r2, r3
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1408:	683b      	ldr	r3, [r7, #0]
    140a:	78db      	ldrb	r3, [r3, #3]
    140c:	2b48      	cmp	r3, #72	; 0x48
    140e:	d108      	bne.n	1422 <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1410:	69bb      	ldr	r3, [r7, #24]
    1412:	f103 0308 	add.w	r3, r3, #8
    1416:	f04f 0201 	mov.w	r2, #1
    141a:	fa02 f203 	lsl.w	r2, r2, r3
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1422:	69bb      	ldr	r3, [r7, #24]
    1424:	f103 0301 	add.w	r3, r3, #1
    1428:	61bb      	str	r3, [r7, #24]
    142a:	69bb      	ldr	r3, [r7, #24]
    142c:	2b07      	cmp	r3, #7
    142e:	d9b5      	bls.n	139c <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	697a      	ldr	r2, [r7, #20]
    1434:	605a      	str	r2, [r3, #4]
  }
}
    1436:	f107 0724 	add.w	r7, r7, #36	; 0x24
    143a:	46bd      	mov	sp, r7
    143c:	bc80      	pop	{r7}
    143e:	4770      	bx	lr

00001440 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1440:	b480      	push	{r7}
    1442:	b083      	sub	sp, #12
    1444:	af00      	add	r7, sp, #0
    1446:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    144e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	f04f 0202 	mov.w	r2, #2
    1456:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	f04f 0204 	mov.w	r2, #4
    145e:	70da      	strb	r2, [r3, #3]
}
    1460:	f107 070c 	add.w	r7, r7, #12
    1464:	46bd      	mov	sp, r7
    1466:	bc80      	pop	{r7}
    1468:	4770      	bx	lr
    146a:	bf00      	nop

0000146c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    146c:	b480      	push	{r7}
    146e:	b085      	sub	sp, #20
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
    1474:	460b      	mov	r3, r1
    1476:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1478:	f04f 0300 	mov.w	r3, #0
    147c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	689a      	ldr	r2, [r3, #8]
    1482:	887b      	ldrh	r3, [r7, #2]
    1484:	4013      	ands	r3, r2
    1486:	2b00      	cmp	r3, #0
    1488:	d003      	beq.n	1492 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    148a:	f04f 0301 	mov.w	r3, #1
    148e:	73fb      	strb	r3, [r7, #15]
    1490:	e002      	b.n	1498 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1492:	f04f 0300 	mov.w	r3, #0
    1496:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1498:	7bfb      	ldrb	r3, [r7, #15]
}
    149a:	4618      	mov	r0, r3
    149c:	f107 0714 	add.w	r7, r7, #20
    14a0:	46bd      	mov	sp, r7
    14a2:	bc80      	pop	{r7}
    14a4:	4770      	bx	lr
    14a6:	bf00      	nop

000014a8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    14a8:	b480      	push	{r7}
    14aa:	b083      	sub	sp, #12
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	689b      	ldr	r3, [r3, #8]
    14b4:	b29b      	uxth	r3, r3
}
    14b6:	4618      	mov	r0, r3
    14b8:	f107 070c 	add.w	r7, r7, #12
    14bc:	46bd      	mov	sp, r7
    14be:	bc80      	pop	{r7}
    14c0:	4770      	bx	lr
    14c2:	bf00      	nop

000014c4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    14c4:	b480      	push	{r7}
    14c6:	b085      	sub	sp, #20
    14c8:	af00      	add	r7, sp, #0
    14ca:	6078      	str	r0, [r7, #4]
    14cc:	460b      	mov	r3, r1
    14ce:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    14d0:	f04f 0300 	mov.w	r3, #0
    14d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	68da      	ldr	r2, [r3, #12]
    14da:	887b      	ldrh	r3, [r7, #2]
    14dc:	4013      	ands	r3, r2
    14de:	2b00      	cmp	r3, #0
    14e0:	d003      	beq.n	14ea <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    14e2:	f04f 0301 	mov.w	r3, #1
    14e6:	73fb      	strb	r3, [r7, #15]
    14e8:	e002      	b.n	14f0 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    14ea:	f04f 0300 	mov.w	r3, #0
    14ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    14f0:	7bfb      	ldrb	r3, [r7, #15]
}
    14f2:	4618      	mov	r0, r3
    14f4:	f107 0714 	add.w	r7, r7, #20
    14f8:	46bd      	mov	sp, r7
    14fa:	bc80      	pop	{r7}
    14fc:	4770      	bx	lr
    14fe:	bf00      	nop

00001500 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1500:	b480      	push	{r7}
    1502:	b083      	sub	sp, #12
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	68db      	ldr	r3, [r3, #12]
    150c:	b29b      	uxth	r3, r3
}
    150e:	4618      	mov	r0, r3
    1510:	f107 070c 	add.w	r7, r7, #12
    1514:	46bd      	mov	sp, r7
    1516:	bc80      	pop	{r7}
    1518:	4770      	bx	lr
    151a:	bf00      	nop

0000151c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    151c:	b480      	push	{r7}
    151e:	b083      	sub	sp, #12
    1520:	af00      	add	r7, sp, #0
    1522:	6078      	str	r0, [r7, #4]
    1524:	460b      	mov	r3, r1
    1526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1528:	887a      	ldrh	r2, [r7, #2]
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	611a      	str	r2, [r3, #16]
}
    152e:	f107 070c 	add.w	r7, r7, #12
    1532:	46bd      	mov	sp, r7
    1534:	bc80      	pop	{r7}
    1536:	4770      	bx	lr

00001538 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1538:	b480      	push	{r7}
    153a:	b083      	sub	sp, #12
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
    1540:	460b      	mov	r3, r1
    1542:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    1544:	887a      	ldrh	r2, [r7, #2]
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	615a      	str	r2, [r3, #20]
}
    154a:	f107 070c 	add.w	r7, r7, #12
    154e:	46bd      	mov	sp, r7
    1550:	bc80      	pop	{r7}
    1552:	4770      	bx	lr

00001554 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1554:	b480      	push	{r7}
    1556:	b083      	sub	sp, #12
    1558:	af00      	add	r7, sp, #0
    155a:	6078      	str	r0, [r7, #4]
    155c:	4613      	mov	r3, r2
    155e:	460a      	mov	r2, r1
    1560:	807a      	strh	r2, [r7, #2]
    1562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    1564:	787b      	ldrb	r3, [r7, #1]
    1566:	2b00      	cmp	r3, #0
    1568:	d003      	beq.n	1572 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    156a:	887a      	ldrh	r2, [r7, #2]
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	611a      	str	r2, [r3, #16]
    1570:	e002      	b.n	1578 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    1572:	887a      	ldrh	r2, [r7, #2]
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	615a      	str	r2, [r3, #20]
  }
}
    1578:	f107 070c 	add.w	r7, r7, #12
    157c:	46bd      	mov	sp, r7
    157e:	bc80      	pop	{r7}
    1580:	4770      	bx	lr
    1582:	bf00      	nop

00001584 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1584:	b480      	push	{r7}
    1586:	b083      	sub	sp, #12
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
    158c:	460b      	mov	r3, r1
    158e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    1590:	887a      	ldrh	r2, [r7, #2]
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	60da      	str	r2, [r3, #12]
}
    1596:	f107 070c 	add.w	r7, r7, #12
    159a:	46bd      	mov	sp, r7
    159c:	bc80      	pop	{r7}
    159e:	4770      	bx	lr

000015a0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    15a0:	b480      	push	{r7}
    15a2:	b085      	sub	sp, #20
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
    15a8:	460b      	mov	r3, r1
    15aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    15ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    15b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    15b2:	887b      	ldrh	r3, [r7, #2]
    15b4:	68fa      	ldr	r2, [r7, #12]
    15b6:	4313      	orrs	r3, r2
    15b8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	68fa      	ldr	r2, [r7, #12]
    15be:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    15c0:	887a      	ldrh	r2, [r7, #2]
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	68fa      	ldr	r2, [r7, #12]
    15ca:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	699b      	ldr	r3, [r3, #24]
    15d0:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	699b      	ldr	r3, [r3, #24]
    15d6:	60fb      	str	r3, [r7, #12]
}
    15d8:	f107 0714 	add.w	r7, r7, #20
    15dc:	46bd      	mov	sp, r7
    15de:	bc80      	pop	{r7}
    15e0:	4770      	bx	lr
    15e2:	bf00      	nop

000015e4 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15e4:	b480      	push	{r7}
    15e6:	b085      	sub	sp, #20
    15e8:	af00      	add	r7, sp, #0
    15ea:	4602      	mov	r2, r0
    15ec:	460b      	mov	r3, r1
    15ee:	71fa      	strb	r2, [r7, #7]
    15f0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    15f2:	f04f 0300 	mov.w	r3, #0
    15f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    15f8:	f04f 0300 	mov.w	r3, #0
    15fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1600:	681b      	ldr	r3, [r3, #0]
    1602:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1604:	68fa      	ldr	r2, [r7, #12]
    1606:	f64f 7380 	movw	r3, #65408	; 0xff80
    160a:	4013      	ands	r3, r2
    160c:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    160e:	79fb      	ldrb	r3, [r7, #7]
    1610:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1614:	68fa      	ldr	r2, [r7, #12]
    1616:	4313      	orrs	r3, r2
    1618:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    161a:	79bb      	ldrb	r3, [r7, #6]
    161c:	68fa      	ldr	r2, [r7, #12]
    161e:	4313      	orrs	r3, r2
    1620:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1622:	f04f 0300 	mov.w	r3, #0
    1626:	f2c4 0301 	movt	r3, #16385	; 0x4001
    162a:	68fa      	ldr	r2, [r7, #12]
    162c:	601a      	str	r2, [r3, #0]
}
    162e:	f107 0714 	add.w	r7, r7, #20
    1632:	46bd      	mov	sp, r7
    1634:	bc80      	pop	{r7}
    1636:	4770      	bx	lr

00001638 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1638:	b480      	push	{r7}
    163a:	b083      	sub	sp, #12
    163c:	af00      	add	r7, sp, #0
    163e:	4603      	mov	r3, r0
    1640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1642:	f04f 031c 	mov.w	r3, #28
    1646:	f2c4 2320 	movt	r3, #16928	; 0x4220
    164a:	79fa      	ldrb	r2, [r7, #7]
    164c:	601a      	str	r2, [r3, #0]
}
    164e:	f107 070c 	add.w	r7, r7, #12
    1652:	46bd      	mov	sp, r7
    1654:	bc80      	pop	{r7}
    1656:	4770      	bx	lr

00001658 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1658:	b480      	push	{r7}
    165a:	b087      	sub	sp, #28
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
    1660:	460b      	mov	r3, r1
    1662:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1664:	f04f 0300 	mov.w	r3, #0
    1668:	613b      	str	r3, [r7, #16]
    166a:	f04f 0300 	mov.w	r3, #0
    166e:	60fb      	str	r3, [r7, #12]
    1670:	f04f 0300 	mov.w	r3, #0
    1674:	617b      	str	r3, [r7, #20]
    1676:	f04f 0300 	mov.w	r3, #0
    167a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	2b00      	cmp	r3, #0
    1680:	da06      	bge.n	1690 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
    1682:	f04f 0300 	mov.w	r3, #0
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	69db      	ldr	r3, [r3, #28]
    168c:	617b      	str	r3, [r7, #20]
    168e:	e005      	b.n	169c <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1690:	f04f 0300 	mov.w	r3, #0
    1694:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    16a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
    16a6:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	ea4f 4303 	mov.w	r3, r3, lsl #16
    16ae:	ea4f 4313 	mov.w	r3, r3, lsr #16
    16b2:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    16ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    16be:	d110      	bne.n	16e2 <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    16c0:	697b      	ldr	r3, [r7, #20]
    16c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    16c6:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    16c8:	f04f 0300 	mov.w	r3, #0
    16cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    16d0:	f04f 0200 	mov.w	r2, #0
    16d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    16d8:	6852      	ldr	r2, [r2, #4]
    16da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    16de:	605a      	str	r2, [r3, #4]
    16e0:	e026      	b.n	1730 <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    16e8:	2b00      	cmp	r3, #0
    16ea:	d010      	beq.n	170e <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    16ec:	68bb      	ldr	r3, [r7, #8]
    16ee:	f04f 0203 	mov.w	r2, #3
    16f2:	fa02 f303 	lsl.w	r3, r2, r3
    16f6:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    16f8:	68fb      	ldr	r3, [r7, #12]
    16fa:	ea6f 0303 	mvn.w	r3, r3
    16fe:	697a      	ldr	r2, [r7, #20]
    1700:	4013      	ands	r3, r2
    1702:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1704:	697b      	ldr	r3, [r7, #20]
    1706:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    170a:	617b      	str	r3, [r7, #20]
    170c:	e010      	b.n	1730 <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1714:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1718:	693a      	ldr	r2, [r7, #16]
    171a:	fa02 f303 	lsl.w	r3, r2, r3
    171e:	ea6f 0303 	mvn.w	r3, r3
    1722:	697a      	ldr	r2, [r7, #20]
    1724:	4013      	ands	r3, r2
    1726:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1728:	697b      	ldr	r3, [r7, #20]
    172a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    172e:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1730:	78fb      	ldrb	r3, [r7, #3]
    1732:	2b00      	cmp	r3, #0
    1734:	d00a      	beq.n	174c <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	ea4f 5353 	mov.w	r3, r3, lsr #21
    173c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1740:	693a      	ldr	r2, [r7, #16]
    1742:	fa02 f303 	lsl.w	r3, r2, r3
    1746:	697a      	ldr	r2, [r7, #20]
    1748:	4313      	orrs	r3, r2
    174a:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    174c:	687b      	ldr	r3, [r7, #4]
    174e:	2b00      	cmp	r3, #0
    1750:	da06      	bge.n	1760 <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
    1752:	f04f 0300 	mov.w	r3, #0
    1756:	f2c4 0301 	movt	r3, #16385	; 0x4001
    175a:	697a      	ldr	r2, [r7, #20]
    175c:	61da      	str	r2, [r3, #28]
    175e:	e005      	b.n	176c <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    1760:	f04f 0300 	mov.w	r3, #0
    1764:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1768:	697a      	ldr	r2, [r7, #20]
    176a:	605a      	str	r2, [r3, #4]
  }
}
    176c:	f107 071c 	add.w	r7, r7, #28
    1770:	46bd      	mov	sp, r7
    1772:	bc80      	pop	{r7}
    1774:	4770      	bx	lr
    1776:	bf00      	nop

00001778 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1778:	b490      	push	{r4, r7}
    177a:	b084      	sub	sp, #16
    177c:	af00      	add	r7, sp, #0
    177e:	4602      	mov	r2, r0
    1780:	460b      	mov	r3, r1
    1782:	71fa      	strb	r2, [r7, #7]
    1784:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1786:	f04f 0300 	mov.w	r3, #0
    178a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    178c:	79bb      	ldrb	r3, [r7, #6]
    178e:	f003 0303 	and.w	r3, r3, #3
    1792:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1796:	f04f 020f 	mov.w	r2, #15
    179a:	fa02 f303 	lsl.w	r3, r2, r3
    179e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    17a0:	f04f 0300 	mov.w	r3, #0
    17a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17a8:	79ba      	ldrb	r2, [r7, #6]
    17aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
    17ae:	b2d2      	uxtb	r2, r2
    17b0:	4610      	mov	r0, r2
    17b2:	f04f 0200 	mov.w	r2, #0
    17b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17ba:	79b9      	ldrb	r1, [r7, #6]
    17bc:	ea4f 0191 	mov.w	r1, r1, lsr #2
    17c0:	b2c9      	uxtb	r1, r1
    17c2:	f101 0102 	add.w	r1, r1, #2
    17c6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    17ca:	68fa      	ldr	r2, [r7, #12]
    17cc:	ea6f 0202 	mvn.w	r2, r2
    17d0:	4011      	ands	r1, r2
    17d2:	f100 0202 	add.w	r2, r0, #2
    17d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    17da:	f04f 0300 	mov.w	r3, #0
    17de:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17e2:	79ba      	ldrb	r2, [r7, #6]
    17e4:	ea4f 0292 	mov.w	r2, r2, lsr #2
    17e8:	b2d2      	uxtb	r2, r2
    17ea:	4610      	mov	r0, r2
    17ec:	f04f 0200 	mov.w	r2, #0
    17f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17f4:	79b9      	ldrb	r1, [r7, #6]
    17f6:	ea4f 0191 	mov.w	r1, r1, lsr #2
    17fa:	b2c9      	uxtb	r1, r1
    17fc:	f101 0102 	add.w	r1, r1, #2
    1800:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1804:	79fc      	ldrb	r4, [r7, #7]
    1806:	79ba      	ldrb	r2, [r7, #6]
    1808:	f002 0203 	and.w	r2, r2, #3
    180c:	ea4f 0282 	mov.w	r2, r2, lsl #2
    1810:	fa04 f202 	lsl.w	r2, r4, r2
    1814:	4311      	orrs	r1, r2
    1816:	f100 0202 	add.w	r2, r0, #2
    181a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    181e:	f107 0710 	add.w	r7, r7, #16
    1822:	46bd      	mov	sp, r7
    1824:	bc90      	pop	{r4, r7}
    1826:	4770      	bx	lr

00001828 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1828:	b480      	push	{r7}
    182a:	b083      	sub	sp, #12
    182c:	af00      	add	r7, sp, #0
    182e:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1830:	f04f 03dc 	mov.w	r3, #220	; 0xdc
    1834:	f2c4 2320 	movt	r3, #16928	; 0x4220
    1838:	687a      	ldr	r2, [r7, #4]
    183a:	601a      	str	r2, [r3, #0]
}
    183c:	f107 070c 	add.w	r7, r7, #12
    1840:	46bd      	mov	sp, r7
    1842:	bc80      	pop	{r7}
    1844:	4770      	bx	lr
    1846:	bf00      	nop

00001848 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1848:	b580      	push	{r7, lr}
    184a:	b082      	sub	sp, #8
    184c:	af00      	add	r7, sp, #0
    184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1850:	687a      	ldr	r2, [r7, #4]
    1852:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1856:	f2c4 0301 	movt	r3, #16385	; 0x4001
    185a:	429a      	cmp	r2, r3
    185c:	d10c      	bne.n	1878 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    185e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1862:	f04f 0101 	mov.w	r1, #1
    1866:	f7ff fb61 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    186a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    186e:	f04f 0100 	mov.w	r1, #0
    1872:	f7ff fb5b 	bl	f2c <RCC_APB2PeriphResetCmd>
    1876:	e04e      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
    1878:	687a      	ldr	r2, [r7, #4]
    187a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    187e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1882:	429a      	cmp	r2, r3
    1884:	d10c      	bne.n	18a0 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    1886:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    188a:	f04f 0101 	mov.w	r1, #1
    188e:	f7ff fb77 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    1892:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1896:	f04f 0100 	mov.w	r1, #0
    189a:	f7ff fb71 	bl	f80 <RCC_APB1PeriphResetCmd>
    189e:	e03a      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
    18a0:	687a      	ldr	r2, [r7, #4]
    18a2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    18a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18aa:	429a      	cmp	r2, r3
    18ac:	d10c      	bne.n	18c8 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    18ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    18b2:	f04f 0101 	mov.w	r1, #1
    18b6:	f7ff fb63 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    18ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    18be:	f04f 0100 	mov.w	r1, #0
    18c2:	f7ff fb5d 	bl	f80 <RCC_APB1PeriphResetCmd>
    18c6:	e026      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
    18c8:	687a      	ldr	r2, [r7, #4]
    18ca:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    18ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18d2:	429a      	cmp	r2, r3
    18d4:	d10c      	bne.n	18f0 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    18d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    18da:	f04f 0101 	mov.w	r1, #1
    18de:	f7ff fb4f 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    18e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    18e6:	f04f 0100 	mov.w	r1, #0
    18ea:	f7ff fb49 	bl	f80 <RCC_APB1PeriphResetCmd>
    18ee:	e012      	b.n	1916 <USART_DeInit+0xce>
  }
  else
  {
    if (USARTx == UART5)
    18f0:	687a      	ldr	r2, [r7, #4]
    18f2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    18f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18fa:	429a      	cmp	r2, r3
    18fc:	d10b      	bne.n	1916 <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    18fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1902:	f04f 0101 	mov.w	r1, #1
    1906:	f7ff fb3b 	bl	f80 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    190a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    190e:	f04f 0100 	mov.w	r1, #0
    1912:	f7ff fb35 	bl	f80 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1916:	f107 0708 	add.w	r7, r7, #8
    191a:	46bd      	mov	sp, r7
    191c:	bd80      	pop	{r7, pc}
    191e:	bf00      	nop

00001920 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1920:	b580      	push	{r7, lr}
    1922:	b08c      	sub	sp, #48	; 0x30
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]
    1928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    192a:	f04f 0300 	mov.w	r3, #0
    192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1930:	f04f 0300 	mov.w	r3, #0
    1934:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    1936:	f04f 0300 	mov.w	r3, #0
    193a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    193c:	f04f 0300 	mov.w	r3, #0
    1940:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1942:	f04f 0300 	mov.w	r3, #0
    1946:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	8a1b      	ldrh	r3, [r3, #16]
    1950:	b29b      	uxth	r3, r3
    1952:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1956:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    195a:	4013      	ands	r3, r2
    195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    195e:	683b      	ldr	r3, [r7, #0]
    1960:	88db      	ldrh	r3, [r3, #6]
    1962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1964:	4313      	orrs	r3, r2
    1966:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    196a:	b29a      	uxth	r2, r3
    196c:	687b      	ldr	r3, [r7, #4]
    196e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	899b      	ldrh	r3, [r3, #12]
    1974:	b29b      	uxth	r3, r3
    1976:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    197a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    197e:	4013      	ands	r3, r2
    1980:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1982:	683b      	ldr	r3, [r7, #0]
    1984:	889a      	ldrh	r2, [r3, #4]
    1986:	683b      	ldr	r3, [r7, #0]
    1988:	891b      	ldrh	r3, [r3, #8]
    198a:	4313      	orrs	r3, r2
    198c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    198e:	683b      	ldr	r3, [r7, #0]
    1990:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1992:	4313      	orrs	r3, r2
    1994:	b29b      	uxth	r3, r3
    1996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1998:	4313      	orrs	r3, r2
    199a:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    199e:	b29a      	uxth	r2, r3
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	8a9b      	ldrh	r3, [r3, #20]
    19a8:	b29b      	uxth	r3, r3
    19aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    19ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19ae:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    19b2:	4013      	ands	r3, r2
    19b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    19b6:	683b      	ldr	r3, [r7, #0]
    19b8:	899b      	ldrh	r3, [r3, #12]
    19ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19bc:	4313      	orrs	r3, r2
    19be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    19c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19c2:	b29a      	uxth	r2, r3
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    19c8:	f107 0308 	add.w	r3, r7, #8
    19cc:	4618      	mov	r0, r3
    19ce:	f7ff f945 	bl	c5c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    19d2:	69fa      	ldr	r2, [r7, #28]
    19d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    19d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    19dc:	429a      	cmp	r2, r3
    19de:	d102      	bne.n	19e6 <USART_Init+0xc6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    19e0:	697b      	ldr	r3, [r7, #20]
    19e2:	62bb      	str	r3, [r7, #40]	; 0x28
    19e4:	e001      	b.n	19ea <USART_Init+0xca>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    19e6:	693b      	ldr	r3, [r7, #16]
    19e8:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    19ea:	687b      	ldr	r3, [r7, #4]
    19ec:	899b      	ldrh	r3, [r3, #12]
    19ee:	b29b      	uxth	r3, r3
    19f0:	b29b      	uxth	r3, r3
    19f2:	b21b      	sxth	r3, r3
    19f4:	2b00      	cmp	r3, #0
    19f6:	da0f      	bge.n	1a18 <USART_Init+0xf8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    19f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    19fa:	4613      	mov	r3, r2
    19fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a00:	189b      	adds	r3, r3, r2
    1a02:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1a06:	189a      	adds	r2, r3, r2
    1a08:	683b      	ldr	r3, [r7, #0]
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1a10:	fbb2 f3f3 	udiv	r3, r2, r3
    1a14:	627b      	str	r3, [r7, #36]	; 0x24
    1a16:	e00e      	b.n	1a36 <USART_Init+0x116>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a1a:	4613      	mov	r3, r2
    1a1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a20:	189b      	adds	r3, r3, r2
    1a22:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1a26:	189a      	adds	r2, r3, r2
    1a28:	683b      	ldr	r3, [r7, #0]
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a30:	fbb2 f3f3 	udiv	r3, r2, r3
    1a34:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a38:	f248 531f 	movw	r3, #34079	; 0x851f
    1a3c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1a40:	fba3 1302 	umull	r1, r3, r3, r2
    1a44:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1a48:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    1a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a50:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1a54:	f04f 0264 	mov.w	r2, #100	; 0x64
    1a58:	fb02 f303 	mul.w	r3, r2, r3
    1a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a5e:	1ad3      	subs	r3, r2, r3
    1a60:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	899b      	ldrh	r3, [r3, #12]
    1a66:	b29b      	uxth	r3, r3
    1a68:	b29b      	uxth	r3, r3
    1a6a:	b21b      	sxth	r3, r3
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	da12      	bge.n	1a96 <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    1a70:	6a3b      	ldr	r3, [r7, #32]
    1a72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1a76:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1a7a:	f248 531f 	movw	r3, #34079	; 0x851f
    1a7e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1a82:	fba3 1302 	umull	r1, r3, r3, r2
    1a86:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1a8a:	f003 0307 	and.w	r3, r3, #7
    1a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1a90:	4313      	orrs	r3, r2
    1a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a94:	e011      	b.n	1aba <USART_Init+0x19a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    1a96:	6a3b      	ldr	r3, [r7, #32]
    1a98:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1a9c:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1aa0:	f248 531f 	movw	r3, #34079	; 0x851f
    1aa4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1aa8:	fba3 1302 	umull	r1, r3, r3, r2
    1aac:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1ab0:	f003 030f 	and.w	r3, r3, #15
    1ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ab6:	4313      	orrs	r3, r2
    1ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    1aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1abc:	b29a      	uxth	r2, r3
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	811a      	strh	r2, [r3, #8]
}
    1ac2:	f107 0730 	add.w	r7, r7, #48	; 0x30
    1ac6:	46bd      	mov	sp, r7
    1ac8:	bd80      	pop	{r7, pc}
    1aca:	bf00      	nop

00001acc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    1acc:	b480      	push	{r7}
    1ace:	b083      	sub	sp, #12
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    1ada:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	f04f 0200 	mov.w	r2, #0
    1ae2:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	f04f 0200 	mov.w	r2, #0
    1aea:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	f04f 0200 	mov.w	r2, #0
    1af2:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f04f 020c 	mov.w	r2, #12
    1afa:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	f04f 0200 	mov.w	r2, #0
    1b02:	819a      	strh	r2, [r3, #12]
}
    1b04:	f107 070c 	add.w	r7, r7, #12
    1b08:	46bd      	mov	sp, r7
    1b0a:	bc80      	pop	{r7}
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop

00001b10 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1b10:	b480      	push	{r7}
    1b12:	b085      	sub	sp, #20
    1b14:	af00      	add	r7, sp, #0
    1b16:	6078      	str	r0, [r7, #4]
    1b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    1b1a:	f04f 0300 	mov.w	r3, #0
    1b1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	8a1b      	ldrh	r3, [r3, #16]
    1b24:	b29b      	uxth	r3, r3
    1b26:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    1b28:	68fa      	ldr	r2, [r7, #12]
    1b2a:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1b2e:	4013      	ands	r3, r2
    1b30:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1b32:	683b      	ldr	r3, [r7, #0]
    1b34:	881a      	ldrh	r2, [r3, #0]
    1b36:	683b      	ldr	r3, [r7, #0]
    1b38:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    1b3a:	4313      	orrs	r3, r2
    1b3c:	b29a      	uxth	r2, r3
    1b3e:	683b      	ldr	r3, [r7, #0]
    1b40:	889b      	ldrh	r3, [r3, #4]
    1b42:	4313      	orrs	r3, r2
    1b44:	b29a      	uxth	r2, r3
    1b46:	683b      	ldr	r3, [r7, #0]
    1b48:	88db      	ldrh	r3, [r3, #6]
    1b4a:	4313      	orrs	r3, r2
    1b4c:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1b4e:	68fa      	ldr	r2, [r7, #12]
    1b50:	4313      	orrs	r3, r2
    1b52:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1b54:	68fb      	ldr	r3, [r7, #12]
    1b56:	b29a      	uxth	r2, r3
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	821a      	strh	r2, [r3, #16]
}
    1b5c:	f107 0714 	add.w	r7, r7, #20
    1b60:	46bd      	mov	sp, r7
    1b62:	bc80      	pop	{r7}
    1b64:	4770      	bx	lr
    1b66:	bf00      	nop

00001b68 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1b68:	b480      	push	{r7}
    1b6a:	b083      	sub	sp, #12
    1b6c:	af00      	add	r7, sp, #0
    1b6e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	f04f 0200 	mov.w	r2, #0
    1b76:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	f04f 0200 	mov.w	r2, #0
    1b7e:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	f04f 0200 	mov.w	r2, #0
    1b86:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	f04f 0200 	mov.w	r2, #0
    1b8e:	80da      	strh	r2, [r3, #6]
}
    1b90:	f107 070c 	add.w	r7, r7, #12
    1b94:	46bd      	mov	sp, r7
    1b96:	bc80      	pop	{r7}
    1b98:	4770      	bx	lr
    1b9a:	bf00      	nop

00001b9c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b9c:	b480      	push	{r7}
    1b9e:	b083      	sub	sp, #12
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	6078      	str	r0, [r7, #4]
    1ba4:	460b      	mov	r3, r1
    1ba6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1ba8:	78fb      	ldrb	r3, [r7, #3]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d008      	beq.n	1bc0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	899b      	ldrh	r3, [r3, #12]
    1bb2:	b29b      	uxth	r3, r3
    1bb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1bb8:	b29a      	uxth	r2, r3
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	819a      	strh	r2, [r3, #12]
    1bbe:	e007      	b.n	1bd0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	899b      	ldrh	r3, [r3, #12]
    1bc4:	b29b      	uxth	r3, r3
    1bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1bca:	b29a      	uxth	r2, r3
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	819a      	strh	r2, [r3, #12]
  }
}
    1bd0:	f107 070c 	add.w	r7, r7, #12
    1bd4:	46bd      	mov	sp, r7
    1bd6:	bc80      	pop	{r7}
    1bd8:	4770      	bx	lr
    1bda:	bf00      	nop

00001bdc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    1bdc:	b480      	push	{r7}
    1bde:	b087      	sub	sp, #28
    1be0:	af00      	add	r7, sp, #0
    1be2:	6078      	str	r0, [r7, #4]
    1be4:	4613      	mov	r3, r2
    1be6:	460a      	mov	r2, r1
    1be8:	807a      	strh	r2, [r7, #2]
    1bea:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    1bec:	f04f 0300 	mov.w	r3, #0
    1bf0:	613b      	str	r3, [r7, #16]
    1bf2:	f04f 0300 	mov.w	r3, #0
    1bf6:	60fb      	str	r3, [r7, #12]
    1bf8:	f04f 0300 	mov.w	r3, #0
    1bfc:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    1bfe:	f04f 0300 	mov.w	r3, #0
    1c02:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1c08:	887b      	ldrh	r3, [r7, #2]
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1c10:	b2db      	uxtb	r3, r3
    1c12:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    1c14:	887b      	ldrh	r3, [r7, #2]
    1c16:	f003 031f 	and.w	r3, r3, #31
    1c1a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	f04f 0201 	mov.w	r2, #1
    1c22:	fa02 f303 	lsl.w	r3, r2, r3
    1c26:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    1c28:	693b      	ldr	r3, [r7, #16]
    1c2a:	2b01      	cmp	r3, #1
    1c2c:	d104      	bne.n	1c38 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    1c2e:	697b      	ldr	r3, [r7, #20]
    1c30:	f103 030c 	add.w	r3, r3, #12
    1c34:	617b      	str	r3, [r7, #20]
    1c36:	e00b      	b.n	1c50 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1c38:	693b      	ldr	r3, [r7, #16]
    1c3a:	2b02      	cmp	r3, #2
    1c3c:	d104      	bne.n	1c48 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    1c3e:	697b      	ldr	r3, [r7, #20]
    1c40:	f103 0310 	add.w	r3, r3, #16
    1c44:	617b      	str	r3, [r7, #20]
    1c46:	e003      	b.n	1c50 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1c48:	697b      	ldr	r3, [r7, #20]
    1c4a:	f103 0314 	add.w	r3, r3, #20
    1c4e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1c50:	787b      	ldrb	r3, [r7, #1]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d006      	beq.n	1c64 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1c56:	697b      	ldr	r3, [r7, #20]
    1c58:	697a      	ldr	r2, [r7, #20]
    1c5a:	6811      	ldr	r1, [r2, #0]
    1c5c:	68ba      	ldr	r2, [r7, #8]
    1c5e:	430a      	orrs	r2, r1
    1c60:	601a      	str	r2, [r3, #0]
    1c62:	e007      	b.n	1c74 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1c64:	697b      	ldr	r3, [r7, #20]
    1c66:	697a      	ldr	r2, [r7, #20]
    1c68:	6811      	ldr	r1, [r2, #0]
    1c6a:	68ba      	ldr	r2, [r7, #8]
    1c6c:	ea6f 0202 	mvn.w	r2, r2
    1c70:	400a      	ands	r2, r1
    1c72:	601a      	str	r2, [r3, #0]
  }
}
    1c74:	f107 071c 	add.w	r7, r7, #28
    1c78:	46bd      	mov	sp, r7
    1c7a:	bc80      	pop	{r7}
    1c7c:	4770      	bx	lr
    1c7e:	bf00      	nop

00001c80 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1c80:	b480      	push	{r7}
    1c82:	b083      	sub	sp, #12
    1c84:	af00      	add	r7, sp, #0
    1c86:	6078      	str	r0, [r7, #4]
    1c88:	4613      	mov	r3, r2
    1c8a:	460a      	mov	r2, r1
    1c8c:	807a      	strh	r2, [r7, #2]
    1c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c90:	787b      	ldrb	r3, [r7, #1]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d008      	beq.n	1ca8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1c96:	687b      	ldr	r3, [r7, #4]
    1c98:	8a9b      	ldrh	r3, [r3, #20]
    1c9a:	b29a      	uxth	r2, r3
    1c9c:	887b      	ldrh	r3, [r7, #2]
    1c9e:	4313      	orrs	r3, r2
    1ca0:	b29a      	uxth	r2, r3
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	829a      	strh	r2, [r3, #20]
    1ca6:	e00a      	b.n	1cbe <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	8a9b      	ldrh	r3, [r3, #20]
    1cac:	b29a      	uxth	r2, r3
    1cae:	887b      	ldrh	r3, [r7, #2]
    1cb0:	ea6f 0303 	mvn.w	r3, r3
    1cb4:	b29b      	uxth	r3, r3
    1cb6:	4013      	ands	r3, r2
    1cb8:	b29a      	uxth	r2, r3
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	829a      	strh	r2, [r3, #20]
  }
}
    1cbe:	f107 070c 	add.w	r7, r7, #12
    1cc2:	46bd      	mov	sp, r7
    1cc4:	bc80      	pop	{r7}
    1cc6:	4770      	bx	lr

00001cc8 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1cc8:	b480      	push	{r7}
    1cca:	b083      	sub	sp, #12
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	460b      	mov	r3, r1
    1cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	8a1b      	ldrh	r3, [r3, #16]
    1cd8:	b29b      	uxth	r3, r3
    1cda:	f023 030f 	bic.w	r3, r3, #15
    1cde:	b29a      	uxth	r2, r3
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	8a1b      	ldrh	r3, [r3, #16]
    1ce8:	b29a      	uxth	r2, r3
    1cea:	78fb      	ldrb	r3, [r7, #3]
    1cec:	b29b      	uxth	r3, r3
    1cee:	4313      	orrs	r3, r2
    1cf0:	b29a      	uxth	r2, r3
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	821a      	strh	r2, [r3, #16]
}
    1cf6:	f107 070c 	add.w	r7, r7, #12
    1cfa:	46bd      	mov	sp, r7
    1cfc:	bc80      	pop	{r7}
    1cfe:	4770      	bx	lr

00001d00 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1d00:	b480      	push	{r7}
    1d02:	b083      	sub	sp, #12
    1d04:	af00      	add	r7, sp, #0
    1d06:	6078      	str	r0, [r7, #4]
    1d08:	460b      	mov	r3, r1
    1d0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	899b      	ldrh	r3, [r3, #12]
    1d10:	b29b      	uxth	r3, r3
    1d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1d16:	b29a      	uxth	r2, r3
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	899b      	ldrh	r3, [r3, #12]
    1d20:	b29a      	uxth	r2, r3
    1d22:	887b      	ldrh	r3, [r7, #2]
    1d24:	4313      	orrs	r3, r2
    1d26:	b29a      	uxth	r2, r3
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	819a      	strh	r2, [r3, #12]
}
    1d2c:	f107 070c 	add.w	r7, r7, #12
    1d30:	46bd      	mov	sp, r7
    1d32:	bc80      	pop	{r7}
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop

00001d38 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d38:	b480      	push	{r7}
    1d3a:	b083      	sub	sp, #12
    1d3c:	af00      	add	r7, sp, #0
    1d3e:	6078      	str	r0, [r7, #4]
    1d40:	460b      	mov	r3, r1
    1d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d44:	78fb      	ldrb	r3, [r7, #3]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d008      	beq.n	1d5c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	899b      	ldrh	r3, [r3, #12]
    1d4e:	b29b      	uxth	r3, r3
    1d50:	f043 0302 	orr.w	r3, r3, #2
    1d54:	b29a      	uxth	r2, r3
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	819a      	strh	r2, [r3, #12]
    1d5a:	e007      	b.n	1d6c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	899b      	ldrh	r3, [r3, #12]
    1d60:	b29b      	uxth	r3, r3
    1d62:	f023 0302 	bic.w	r3, r3, #2
    1d66:	b29a      	uxth	r2, r3
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	819a      	strh	r2, [r3, #12]
  }
}
    1d6c:	f107 070c 	add.w	r7, r7, #12
    1d70:	46bd      	mov	sp, r7
    1d72:	bc80      	pop	{r7}
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop

00001d78 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1d78:	b480      	push	{r7}
    1d7a:	b083      	sub	sp, #12
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
    1d80:	460b      	mov	r3, r1
    1d82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	8a1b      	ldrh	r3, [r3, #16]
    1d88:	b29b      	uxth	r3, r3
    1d8a:	f023 0320 	bic.w	r3, r3, #32
    1d8e:	b29a      	uxth	r2, r3
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	8a1b      	ldrh	r3, [r3, #16]
    1d98:	b29a      	uxth	r2, r3
    1d9a:	887b      	ldrh	r3, [r7, #2]
    1d9c:	4313      	orrs	r3, r2
    1d9e:	b29a      	uxth	r2, r3
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	821a      	strh	r2, [r3, #16]
}
    1da4:	f107 070c 	add.w	r7, r7, #12
    1da8:	46bd      	mov	sp, r7
    1daa:	bc80      	pop	{r7}
    1dac:	4770      	bx	lr
    1dae:	bf00      	nop

00001db0 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	6078      	str	r0, [r7, #4]
    1db8:	460b      	mov	r3, r1
    1dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1dbc:	78fb      	ldrb	r3, [r7, #3]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d008      	beq.n	1dd4 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	8a1b      	ldrh	r3, [r3, #16]
    1dc6:	b29b      	uxth	r3, r3
    1dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1dcc:	b29a      	uxth	r2, r3
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	821a      	strh	r2, [r3, #16]
    1dd2:	e007      	b.n	1de4 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	8a1b      	ldrh	r3, [r3, #16]
    1dd8:	b29b      	uxth	r3, r3
    1dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1dde:	b29a      	uxth	r2, r3
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	821a      	strh	r2, [r3, #16]
  }
}
    1de4:	f107 070c 	add.w	r7, r7, #12
    1de8:	46bd      	mov	sp, r7
    1dea:	bc80      	pop	{r7}
    1dec:	4770      	bx	lr
    1dee:	bf00      	nop

00001df0 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1df0:	b480      	push	{r7}
    1df2:	b083      	sub	sp, #12
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
    1df8:	460b      	mov	r3, r1
    1dfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1dfc:	887b      	ldrh	r3, [r7, #2]
    1dfe:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1e02:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1e06:	b29a      	uxth	r2, r3
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	809a      	strh	r2, [r3, #4]
}
    1e0c:	f107 070c 	add.w	r7, r7, #12
    1e10:	46bd      	mov	sp, r7
    1e12:	bc80      	pop	{r7}
    1e14:	4770      	bx	lr
    1e16:	bf00      	nop

00001e18 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1e18:	b480      	push	{r7}
    1e1a:	b083      	sub	sp, #12
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	889b      	ldrh	r3, [r3, #4]
    1e24:	b29b      	uxth	r3, r3
    1e26:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1e2a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1e2e:	b29b      	uxth	r3, r3
}
    1e30:	4618      	mov	r0, r3
    1e32:	f107 070c 	add.w	r7, r7, #12
    1e36:	46bd      	mov	sp, r7
    1e38:	bc80      	pop	{r7}
    1e3a:	4770      	bx	lr

00001e3c <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1e3c:	b480      	push	{r7}
    1e3e:	b083      	sub	sp, #12
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	899b      	ldrh	r3, [r3, #12]
    1e48:	b29b      	uxth	r3, r3
    1e4a:	f043 0301 	orr.w	r3, r3, #1
    1e4e:	b29a      	uxth	r2, r3
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	819a      	strh	r2, [r3, #12]
}
    1e54:	f107 070c 	add.w	r7, r7, #12
    1e58:	46bd      	mov	sp, r7
    1e5a:	bc80      	pop	{r7}
    1e5c:	4770      	bx	lr
    1e5e:	bf00      	nop

00001e60 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1e60:	b480      	push	{r7}
    1e62:	b083      	sub	sp, #12
    1e64:	af00      	add	r7, sp, #0
    1e66:	6078      	str	r0, [r7, #4]
    1e68:	460b      	mov	r3, r1
    1e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	8b1b      	ldrh	r3, [r3, #24]
    1e70:	b29b      	uxth	r3, r3
    1e72:	b2db      	uxtb	r3, r3
    1e74:	b29a      	uxth	r2, r3
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	8b1b      	ldrh	r3, [r3, #24]
    1e7e:	b29a      	uxth	r2, r3
    1e80:	78fb      	ldrb	r3, [r7, #3]
    1e82:	b29b      	uxth	r3, r3
    1e84:	ea4f 2303 	mov.w	r3, r3, lsl #8
    1e88:	b29b      	uxth	r3, r3
    1e8a:	4313      	orrs	r3, r2
    1e8c:	b29a      	uxth	r2, r3
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	831a      	strh	r2, [r3, #24]
}
    1e92:	f107 070c 	add.w	r7, r7, #12
    1e96:	46bd      	mov	sp, r7
    1e98:	bc80      	pop	{r7}
    1e9a:	4770      	bx	lr

00001e9c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1e9c:	b480      	push	{r7}
    1e9e:	b083      	sub	sp, #12
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
    1ea4:	460b      	mov	r3, r1
    1ea6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	8b1b      	ldrh	r3, [r3, #24]
    1eac:	b29b      	uxth	r3, r3
    1eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1eb2:	b29a      	uxth	r2, r3
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	8b1b      	ldrh	r3, [r3, #24]
    1ebc:	b29a      	uxth	r2, r3
    1ebe:	78fb      	ldrb	r3, [r7, #3]
    1ec0:	b29b      	uxth	r3, r3
    1ec2:	4313      	orrs	r3, r2
    1ec4:	b29a      	uxth	r2, r3
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	831a      	strh	r2, [r3, #24]
}
    1eca:	f107 070c 	add.w	r7, r7, #12
    1ece:	46bd      	mov	sp, r7
    1ed0:	bc80      	pop	{r7}
    1ed2:	4770      	bx	lr

00001ed4 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ed4:	b480      	push	{r7}
    1ed6:	b083      	sub	sp, #12
    1ed8:	af00      	add	r7, sp, #0
    1eda:	6078      	str	r0, [r7, #4]
    1edc:	460b      	mov	r3, r1
    1ede:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1ee0:	78fb      	ldrb	r3, [r7, #3]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d008      	beq.n	1ef8 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	8a9b      	ldrh	r3, [r3, #20]
    1eea:	b29b      	uxth	r3, r3
    1eec:	f043 0320 	orr.w	r3, r3, #32
    1ef0:	b29a      	uxth	r2, r3
    1ef2:	687b      	ldr	r3, [r7, #4]
    1ef4:	829a      	strh	r2, [r3, #20]
    1ef6:	e007      	b.n	1f08 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	8a9b      	ldrh	r3, [r3, #20]
    1efc:	b29b      	uxth	r3, r3
    1efe:	f023 0320 	bic.w	r3, r3, #32
    1f02:	b29a      	uxth	r2, r3
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	829a      	strh	r2, [r3, #20]
  }
}
    1f08:	f107 070c 	add.w	r7, r7, #12
    1f0c:	46bd      	mov	sp, r7
    1f0e:	bc80      	pop	{r7}
    1f10:	4770      	bx	lr
    1f12:	bf00      	nop

00001f14 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f14:	b480      	push	{r7}
    1f16:	b083      	sub	sp, #12
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
    1f1c:	460b      	mov	r3, r1
    1f1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1f20:	78fb      	ldrb	r3, [r7, #3]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d008      	beq.n	1f38 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	8a9b      	ldrh	r3, [r3, #20]
    1f2a:	b29b      	uxth	r3, r3
    1f2c:	f043 0310 	orr.w	r3, r3, #16
    1f30:	b29a      	uxth	r2, r3
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	829a      	strh	r2, [r3, #20]
    1f36:	e007      	b.n	1f48 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	8a9b      	ldrh	r3, [r3, #20]
    1f3c:	b29b      	uxth	r3, r3
    1f3e:	f023 0310 	bic.w	r3, r3, #16
    1f42:	b29a      	uxth	r2, r3
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	829a      	strh	r2, [r3, #20]
  }
}
    1f48:	f107 070c 	add.w	r7, r7, #12
    1f4c:	46bd      	mov	sp, r7
    1f4e:	bc80      	pop	{r7}
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f54:	b480      	push	{r7}
    1f56:	b083      	sub	sp, #12
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1f60:	78fb      	ldrb	r3, [r7, #3]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d008      	beq.n	1f78 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	8a9b      	ldrh	r3, [r3, #20]
    1f6a:	b29b      	uxth	r3, r3
    1f6c:	f043 0308 	orr.w	r3, r3, #8
    1f70:	b29a      	uxth	r2, r3
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	829a      	strh	r2, [r3, #20]
    1f76:	e007      	b.n	1f88 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	8a9b      	ldrh	r3, [r3, #20]
    1f7c:	b29b      	uxth	r3, r3
    1f7e:	f023 0308 	bic.w	r3, r3, #8
    1f82:	b29a      	uxth	r2, r3
    1f84:	687b      	ldr	r3, [r7, #4]
    1f86:	829a      	strh	r2, [r3, #20]
  }
}
    1f88:	f107 070c 	add.w	r7, r7, #12
    1f8c:	46bd      	mov	sp, r7
    1f8e:	bc80      	pop	{r7}
    1f90:	4770      	bx	lr
    1f92:	bf00      	nop

00001f94 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f94:	b480      	push	{r7}
    1f96:	b083      	sub	sp, #12
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
    1f9c:	460b      	mov	r3, r1
    1f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1fa0:	78fb      	ldrb	r3, [r7, #3]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d00a      	beq.n	1fbc <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	899b      	ldrh	r3, [r3, #12]
    1faa:	b29b      	uxth	r3, r3
    1fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1fb4:	b29a      	uxth	r2, r3
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	819a      	strh	r2, [r3, #12]
    1fba:	e009      	b.n	1fd0 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	899b      	ldrh	r3, [r3, #12]
    1fc0:	b29b      	uxth	r3, r3
    1fc2:	ea4f 4343 	mov.w	r3, r3, lsl #17
    1fc6:	ea4f 4353 	mov.w	r3, r3, lsr #17
    1fca:	b29a      	uxth	r2, r3
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	819a      	strh	r2, [r3, #12]
  }
}
    1fd0:	f107 070c 	add.w	r7, r7, #12
    1fd4:	46bd      	mov	sp, r7
    1fd6:	bc80      	pop	{r7}
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1fdc:	b480      	push	{r7}
    1fde:	b083      	sub	sp, #12
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
    1fe4:	460b      	mov	r3, r1
    1fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1fe8:	78fb      	ldrb	r3, [r7, #3]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d008      	beq.n	2000 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1fee:	687b      	ldr	r3, [r7, #4]
    1ff0:	8a9b      	ldrh	r3, [r3, #20]
    1ff2:	b29b      	uxth	r3, r3
    1ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1ff8:	b29a      	uxth	r2, r3
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	829a      	strh	r2, [r3, #20]
    1ffe:	e007      	b.n	2010 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	8a9b      	ldrh	r3, [r3, #20]
    2004:	b29b      	uxth	r3, r3
    2006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    200a:	b29a      	uxth	r2, r3
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	829a      	strh	r2, [r3, #20]
  }
}
    2010:	f107 070c 	add.w	r7, r7, #12
    2014:	46bd      	mov	sp, r7
    2016:	bc80      	pop	{r7}
    2018:	4770      	bx	lr
    201a:	bf00      	nop

0000201c <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    201c:	b480      	push	{r7}
    201e:	b083      	sub	sp, #12
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
    2024:	460b      	mov	r3, r1
    2026:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	8a9b      	ldrh	r3, [r3, #20]
    202c:	b29b      	uxth	r3, r3
    202e:	f023 0304 	bic.w	r3, r3, #4
    2032:	b29a      	uxth	r2, r3
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	8a9b      	ldrh	r3, [r3, #20]
    203c:	b29a      	uxth	r2, r3
    203e:	887b      	ldrh	r3, [r7, #2]
    2040:	4313      	orrs	r3, r2
    2042:	b29a      	uxth	r2, r3
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	829a      	strh	r2, [r3, #20]
}
    2048:	f107 070c 	add.w	r7, r7, #12
    204c:	46bd      	mov	sp, r7
    204e:	bc80      	pop	{r7}
    2050:	4770      	bx	lr
    2052:	bf00      	nop

00002054 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2054:	b480      	push	{r7}
    2056:	b083      	sub	sp, #12
    2058:	af00      	add	r7, sp, #0
    205a:	6078      	str	r0, [r7, #4]
    205c:	460b      	mov	r3, r1
    205e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2060:	78fb      	ldrb	r3, [r7, #3]
    2062:	2b00      	cmp	r3, #0
    2064:	d008      	beq.n	2078 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	8a9b      	ldrh	r3, [r3, #20]
    206a:	b29b      	uxth	r3, r3
    206c:	f043 0302 	orr.w	r3, r3, #2
    2070:	b29a      	uxth	r2, r3
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	829a      	strh	r2, [r3, #20]
    2076:	e007      	b.n	2088 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	8a9b      	ldrh	r3, [r3, #20]
    207c:	b29b      	uxth	r3, r3
    207e:	f023 0302 	bic.w	r3, r3, #2
    2082:	b29a      	uxth	r2, r3
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	829a      	strh	r2, [r3, #20]
  }
}
    2088:	f107 070c 	add.w	r7, r7, #12
    208c:	46bd      	mov	sp, r7
    208e:	bc80      	pop	{r7}
    2090:	4770      	bx	lr
    2092:	bf00      	nop

00002094 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    2094:	b480      	push	{r7}
    2096:	b085      	sub	sp, #20
    2098:	af00      	add	r7, sp, #0
    209a:	6078      	str	r0, [r7, #4]
    209c:	460b      	mov	r3, r1
    209e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    20a0:	f04f 0300 	mov.w	r3, #0
    20a4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	881b      	ldrh	r3, [r3, #0]
    20aa:	b29a      	uxth	r2, r3
    20ac:	887b      	ldrh	r3, [r7, #2]
    20ae:	4013      	ands	r3, r2
    20b0:	b29b      	uxth	r3, r3
    20b2:	2b00      	cmp	r3, #0
    20b4:	d003      	beq.n	20be <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    20b6:	f04f 0301 	mov.w	r3, #1
    20ba:	73fb      	strb	r3, [r7, #15]
    20bc:	e002      	b.n	20c4 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    20be:	f04f 0300 	mov.w	r3, #0
    20c2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    20c4:	7bfb      	ldrb	r3, [r7, #15]
}
    20c6:	4618      	mov	r0, r3
    20c8:	f107 0714 	add.w	r7, r7, #20
    20cc:	46bd      	mov	sp, r7
    20ce:	bc80      	pop	{r7}
    20d0:	4770      	bx	lr
    20d2:	bf00      	nop

000020d4 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    20d4:	b480      	push	{r7}
    20d6:	b083      	sub	sp, #12
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
    20dc:	460b      	mov	r3, r1
    20de:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    20e0:	887b      	ldrh	r3, [r7, #2]
    20e2:	ea6f 0303 	mvn.w	r3, r3
    20e6:	b29a      	uxth	r2, r3
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	801a      	strh	r2, [r3, #0]
}
    20ec:	f107 070c 	add.w	r7, r7, #12
    20f0:	46bd      	mov	sp, r7
    20f2:	bc80      	pop	{r7}
    20f4:	4770      	bx	lr
    20f6:	bf00      	nop

000020f8 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    20f8:	b480      	push	{r7}
    20fa:	b087      	sub	sp, #28
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
    2100:	460b      	mov	r3, r1
    2102:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    2104:	f04f 0300 	mov.w	r3, #0
    2108:	60fb      	str	r3, [r7, #12]
    210a:	f04f 0300 	mov.w	r3, #0
    210e:	617b      	str	r3, [r7, #20]
    2110:	f04f 0300 	mov.w	r3, #0
    2114:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    2116:	f04f 0300 	mov.w	r3, #0
    211a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    211c:	887b      	ldrh	r3, [r7, #2]
    211e:	b2db      	uxtb	r3, r3
    2120:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2124:	b2db      	uxtb	r3, r3
    2126:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    2128:	887b      	ldrh	r3, [r7, #2]
    212a:	f003 031f 	and.w	r3, r3, #31
    212e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    2130:	697b      	ldr	r3, [r7, #20]
    2132:	f04f 0201 	mov.w	r2, #1
    2136:	fa02 f303 	lsl.w	r3, r2, r3
    213a:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    213c:	68bb      	ldr	r3, [r7, #8]
    213e:	2b01      	cmp	r3, #1
    2140:	d106      	bne.n	2150 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	899b      	ldrh	r3, [r3, #12]
    2146:	b29b      	uxth	r3, r3
    2148:	697a      	ldr	r2, [r7, #20]
    214a:	4013      	ands	r3, r2
    214c:	617b      	str	r3, [r7, #20]
    214e:	e00f      	b.n	2170 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    2150:	68bb      	ldr	r3, [r7, #8]
    2152:	2b02      	cmp	r3, #2
    2154:	d106      	bne.n	2164 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	8a1b      	ldrh	r3, [r3, #16]
    215a:	b29b      	uxth	r3, r3
    215c:	697a      	ldr	r2, [r7, #20]
    215e:	4013      	ands	r3, r2
    2160:	617b      	str	r3, [r7, #20]
    2162:	e005      	b.n	2170 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	8a9b      	ldrh	r3, [r3, #20]
    2168:	b29b      	uxth	r3, r3
    216a:	697a      	ldr	r2, [r7, #20]
    216c:	4013      	ands	r3, r2
    216e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    2170:	887b      	ldrh	r3, [r7, #2]
    2172:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2176:	b29b      	uxth	r3, r3
    2178:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    217a:	68fb      	ldr	r3, [r7, #12]
    217c:	f04f 0201 	mov.w	r2, #1
    2180:	fa02 f303 	lsl.w	r3, r2, r3
    2184:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	881b      	ldrh	r3, [r3, #0]
    218a:	b29b      	uxth	r3, r3
    218c:	68fa      	ldr	r2, [r7, #12]
    218e:	4013      	ands	r3, r2
    2190:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    2192:	697b      	ldr	r3, [r7, #20]
    2194:	2b00      	cmp	r3, #0
    2196:	d006      	beq.n	21a6 <USART_GetITStatus+0xae>
    2198:	68fb      	ldr	r3, [r7, #12]
    219a:	2b00      	cmp	r3, #0
    219c:	d003      	beq.n	21a6 <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
    219e:	f04f 0301 	mov.w	r3, #1
    21a2:	74fb      	strb	r3, [r7, #19]
    21a4:	e002      	b.n	21ac <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
    21a6:	f04f 0300 	mov.w	r3, #0
    21aa:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    21ac:	7cfb      	ldrb	r3, [r7, #19]
}
    21ae:	4618      	mov	r0, r3
    21b0:	f107 071c 	add.w	r7, r7, #28
    21b4:	46bd      	mov	sp, r7
    21b6:	bc80      	pop	{r7}
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop

000021bc <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    21bc:	b480      	push	{r7}
    21be:	b085      	sub	sp, #20
    21c0:	af00      	add	r7, sp, #0
    21c2:	6078      	str	r0, [r7, #4]
    21c4:	460b      	mov	r3, r1
    21c6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    21c8:	f04f 0300 	mov.w	r3, #0
    21cc:	81fb      	strh	r3, [r7, #14]
    21ce:	f04f 0300 	mov.w	r3, #0
    21d2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    21d4:	887b      	ldrh	r3, [r7, #2]
    21d6:	ea4f 2313 	mov.w	r3, r3, lsr #8
    21da:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    21dc:	89fb      	ldrh	r3, [r7, #14]
    21de:	f04f 0201 	mov.w	r2, #1
    21e2:	fa02 f303 	lsl.w	r3, r2, r3
    21e6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    21e8:	89bb      	ldrh	r3, [r7, #12]
    21ea:	ea6f 0303 	mvn.w	r3, r3
    21ee:	b29a      	uxth	r2, r3
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	801a      	strh	r2, [r3, #0]
}
    21f4:	f107 0714 	add.w	r7, r7, #20
    21f8:	46bd      	mov	sp, r7
    21fa:	bc80      	pop	{r7}
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop

00002200 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    2200:	b480      	push	{r7}
    2202:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    2204:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2208:	f2c4 0301 	movt	r3, #16385	; 0x4001
    220c:	f04f 0200 	mov.w	r2, #0
    2210:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    2212:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2216:	f2c4 0301 	movt	r3, #16385	; 0x4001
    221a:	f04f 0200 	mov.w	r2, #0
    221e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    2220:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2224:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2228:	f04f 0200 	mov.w	r2, #0
    222c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    222e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2232:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2236:	f04f 0200 	mov.w	r2, #0
    223a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    223c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2240:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2244:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2248:	f2c0 020f 	movt	r2, #15
    224c:	615a      	str	r2, [r3, #20]
}
    224e:	46bd      	mov	sp, r7
    2250:	bc80      	pop	{r7}
    2252:	4770      	bx	lr

00002254 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2254:	b480      	push	{r7}
    2256:	b085      	sub	sp, #20
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    225c:	f04f 0300 	mov.w	r3, #0
    2260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    2262:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2266:	f2c4 0301 	movt	r3, #16385	; 0x4001
    226a:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	799b      	ldrb	r3, [r3, #6]
    2270:	2b00      	cmp	r3, #0
    2272:	d078      	beq.n	2366 <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    2274:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2278:	f2c4 0301 	movt	r3, #16385	; 0x4001
    227c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2280:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2284:	6811      	ldr	r1, [r2, #0]
    2286:	687a      	ldr	r2, [r7, #4]
    2288:	6812      	ldr	r2, [r2, #0]
    228a:	ea6f 0202 	mvn.w	r2, r2
    228e:	400a      	ands	r2, r1
    2290:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2292:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2296:	f2c4 0301 	movt	r3, #16385	; 0x4001
    229a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    229e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22a2:	6851      	ldr	r1, [r2, #4]
    22a4:	687a      	ldr	r2, [r7, #4]
    22a6:	6812      	ldr	r2, [r2, #0]
    22a8:	ea6f 0202 	mvn.w	r2, r2
    22ac:	400a      	ands	r2, r1
    22ae:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	791b      	ldrb	r3, [r3, #4]
    22b4:	68fa      	ldr	r2, [r7, #12]
    22b6:	18d3      	adds	r3, r2, r3
    22b8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    22ba:	68fb      	ldr	r3, [r7, #12]
    22bc:	68fa      	ldr	r2, [r7, #12]
    22be:	6811      	ldr	r1, [r2, #0]
    22c0:	687a      	ldr	r2, [r7, #4]
    22c2:	6812      	ldr	r2, [r2, #0]
    22c4:	430a      	orrs	r2, r1
    22c6:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    22c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    22cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    22d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22d8:	6891      	ldr	r1, [r2, #8]
    22da:	687a      	ldr	r2, [r7, #4]
    22dc:	6812      	ldr	r2, [r2, #0]
    22de:	ea6f 0202 	mvn.w	r2, r2
    22e2:	400a      	ands	r2, r1
    22e4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    22e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    22ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
    22ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22f6:	68d1      	ldr	r1, [r2, #12]
    22f8:	687a      	ldr	r2, [r7, #4]
    22fa:	6812      	ldr	r2, [r2, #0]
    22fc:	ea6f 0202 	mvn.w	r2, r2
    2300:	400a      	ands	r2, r1
    2302:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2304:	687b      	ldr	r3, [r7, #4]
    2306:	795b      	ldrb	r3, [r3, #5]
    2308:	2b10      	cmp	r3, #16
    230a:	d11a      	bne.n	2342 <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    230c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2310:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2314:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2318:	f2c4 0201 	movt	r2, #16385	; 0x4001
    231c:	6891      	ldr	r1, [r2, #8]
    231e:	687a      	ldr	r2, [r7, #4]
    2320:	6812      	ldr	r2, [r2, #0]
    2322:	430a      	orrs	r2, r1
    2324:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    2326:	f44f 6380 	mov.w	r3, #1024	; 0x400
    232a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    232e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2332:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2336:	68d1      	ldr	r1, [r2, #12]
    2338:	687a      	ldr	r2, [r7, #4]
    233a:	6812      	ldr	r2, [r2, #0]
    233c:	430a      	orrs	r2, r1
    233e:	60da      	str	r2, [r3, #12]
    2340:	e01f      	b.n	2382 <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    2342:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2346:	f2c4 0301 	movt	r3, #16385	; 0x4001
    234a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	795b      	ldrb	r3, [r3, #5]
    2350:	68fa      	ldr	r2, [r7, #12]
    2352:	18d3      	adds	r3, r2, r3
    2354:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2356:	68fb      	ldr	r3, [r7, #12]
    2358:	68fa      	ldr	r2, [r7, #12]
    235a:	6811      	ldr	r1, [r2, #0]
    235c:	687a      	ldr	r2, [r7, #4]
    235e:	6812      	ldr	r2, [r2, #0]
    2360:	430a      	orrs	r2, r1
    2362:	601a      	str	r2, [r3, #0]
    2364:	e00d      	b.n	2382 <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	791b      	ldrb	r3, [r3, #4]
    236a:	68fa      	ldr	r2, [r7, #12]
    236c:	18d3      	adds	r3, r2, r3
    236e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    2370:	68fb      	ldr	r3, [r7, #12]
    2372:	68fa      	ldr	r2, [r7, #12]
    2374:	6811      	ldr	r1, [r2, #0]
    2376:	687a      	ldr	r2, [r7, #4]
    2378:	6812      	ldr	r2, [r2, #0]
    237a:	ea6f 0202 	mvn.w	r2, r2
    237e:	400a      	ands	r2, r1
    2380:	601a      	str	r2, [r3, #0]
  }
}
    2382:	f107 0714 	add.w	r7, r7, #20
    2386:	46bd      	mov	sp, r7
    2388:	bc80      	pop	{r7}
    238a:	4770      	bx	lr

0000238c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    238c:	b480      	push	{r7}
    238e:	b083      	sub	sp, #12
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	f04f 0200 	mov.w	r2, #0
    239a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	f04f 0200 	mov.w	r2, #0
    23a2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	f04f 020c 	mov.w	r2, #12
    23aa:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	f04f 0200 	mov.w	r2, #0
    23b2:	719a      	strb	r2, [r3, #6]
}
    23b4:	f107 070c 	add.w	r7, r7, #12
    23b8:	46bd      	mov	sp, r7
    23ba:	bc80      	pop	{r7}
    23bc:	4770      	bx	lr
    23be:	bf00      	nop

000023c0 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    23c0:	b480      	push	{r7}
    23c2:	b083      	sub	sp, #12
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    23c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    23d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    23d8:	6911      	ldr	r1, [r2, #16]
    23da:	687a      	ldr	r2, [r7, #4]
    23dc:	430a      	orrs	r2, r1
    23de:	611a      	str	r2, [r3, #16]
}
    23e0:	f107 070c 	add.w	r7, r7, #12
    23e4:	46bd      	mov	sp, r7
    23e6:	bc80      	pop	{r7}
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    23ec:	b480      	push	{r7}
    23ee:	b085      	sub	sp, #20
    23f0:	af00      	add	r7, sp, #0
    23f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    23f4:	f04f 0300 	mov.w	r3, #0
    23f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    23fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2402:	695a      	ldr	r2, [r3, #20]
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	4013      	ands	r3, r2
    2408:	2b00      	cmp	r3, #0
    240a:	d003      	beq.n	2414 <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
    240c:	f04f 0301 	mov.w	r3, #1
    2410:	73fb      	strb	r3, [r7, #15]
    2412:	e002      	b.n	241a <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
    2414:	f04f 0300 	mov.w	r3, #0
    2418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    241a:	7bfb      	ldrb	r3, [r7, #15]
}
    241c:	4618      	mov	r0, r3
    241e:	f107 0714 	add.w	r7, r7, #20
    2422:	46bd      	mov	sp, r7
    2424:	bc80      	pop	{r7}
    2426:	4770      	bx	lr

00002428 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2428:	b480      	push	{r7}
    242a:	b083      	sub	sp, #12
    242c:	af00      	add	r7, sp, #0
    242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2430:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2434:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2438:	687a      	ldr	r2, [r7, #4]
    243a:	615a      	str	r2, [r3, #20]
}
    243c:	f107 070c 	add.w	r7, r7, #12
    2440:	46bd      	mov	sp, r7
    2442:	bc80      	pop	{r7}
    2444:	4770      	bx	lr
    2446:	bf00      	nop

00002448 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2448:	b480      	push	{r7}
    244a:	b085      	sub	sp, #20
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2450:	f04f 0300 	mov.w	r3, #0
    2454:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    2456:	f04f 0300 	mov.w	r3, #0
    245a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2460:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2464:	681a      	ldr	r2, [r3, #0]
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	4013      	ands	r3, r2
    246a:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    246c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2470:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2474:	695a      	ldr	r2, [r3, #20]
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	4013      	ands	r3, r2
    247a:	2b00      	cmp	r3, #0
    247c:	d006      	beq.n	248c <EXTI_GetITStatus+0x44>
    247e:	68bb      	ldr	r3, [r7, #8]
    2480:	2b00      	cmp	r3, #0
    2482:	d003      	beq.n	248c <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
    2484:	f04f 0301 	mov.w	r3, #1
    2488:	73fb      	strb	r3, [r7, #15]
    248a:	e002      	b.n	2492 <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
    248c:	f04f 0300 	mov.w	r3, #0
    2490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2492:	7bfb      	ldrb	r3, [r7, #15]
}
    2494:	4618      	mov	r0, r3
    2496:	f107 0714 	add.w	r7, r7, #20
    249a:	46bd      	mov	sp, r7
    249c:	bc80      	pop	{r7}
    249e:	4770      	bx	lr

000024a0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    24a0:	b480      	push	{r7}
    24a2:	b083      	sub	sp, #12
    24a4:	af00      	add	r7, sp, #0
    24a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    24a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    24ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    24b0:	687a      	ldr	r2, [r7, #4]
    24b2:	615a      	str	r2, [r3, #20]
}
    24b4:	f107 070c 	add.w	r7, r7, #12
    24b8:	46bd      	mov	sp, r7
    24ba:	bc80      	pop	{r7}
    24bc:	4770      	bx	lr
    24be:	bf00      	nop

000024c0 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    24c0:	b480      	push	{r7}
    24c2:	b083      	sub	sp, #12
    24c4:	af00      	add	r7, sp, #0
    24c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    24c8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    24cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    24d0:	687a      	ldr	r2, [r7, #4]
    24d2:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
    24d6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    24da:	60da      	str	r2, [r3, #12]
}
    24dc:	f107 070c 	add.w	r7, r7, #12
    24e0:	46bd      	mov	sp, r7
    24e2:	bc80      	pop	{r7}
    24e4:	4770      	bx	lr
    24e6:	bf00      	nop

000024e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    24e8:	b480      	push	{r7}
    24ea:	b087      	sub	sp, #28
    24ec:	af00      	add	r7, sp, #0
    24ee:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    24f0:	f04f 0300 	mov.w	r3, #0
    24f4:	617b      	str	r3, [r7, #20]
    24f6:	f04f 0300 	mov.w	r3, #0
    24fa:	613b      	str	r3, [r7, #16]
    24fc:	f04f 030f 	mov.w	r3, #15
    2500:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	78db      	ldrb	r3, [r3, #3]
    2506:	2b00      	cmp	r3, #0
    2508:	d047      	beq.n	259a <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    250a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    250e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2512:	68db      	ldr	r3, [r3, #12]
    2514:	ea6f 0303 	mvn.w	r3, r3
    2518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    251c:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2520:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2522:	697b      	ldr	r3, [r7, #20]
    2524:	f1c3 0304 	rsb	r3, r3, #4
    2528:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    252a:	697b      	ldr	r3, [r7, #20]
    252c:	68fa      	ldr	r2, [r7, #12]
    252e:	fa22 f303 	lsr.w	r3, r2, r3
    2532:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	785b      	ldrb	r3, [r3, #1]
    2538:	461a      	mov	r2, r3
    253a:	693b      	ldr	r3, [r7, #16]
    253c:	fa02 f303 	lsl.w	r3, r2, r3
    2540:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	789b      	ldrb	r3, [r3, #2]
    2546:	461a      	mov	r2, r3
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	4013      	ands	r3, r2
    254c:	697a      	ldr	r2, [r7, #20]
    254e:	4313      	orrs	r3, r2
    2550:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    2552:	697b      	ldr	r3, [r7, #20]
    2554:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2558:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    255a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    255e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2562:	687a      	ldr	r2, [r7, #4]
    2564:	7812      	ldrb	r2, [r2, #0]
    2566:	4611      	mov	r1, r2
    2568:	697a      	ldr	r2, [r7, #20]
    256a:	b2d2      	uxtb	r2, r2
    256c:	185b      	adds	r3, r3, r1
    256e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2572:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2576:	f2ce 0300 	movt	r3, #57344	; 0xe000
    257a:	687a      	ldr	r2, [r7, #4]
    257c:	7812      	ldrb	r2, [r2, #0]
    257e:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2582:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2584:	6879      	ldr	r1, [r7, #4]
    2586:	7809      	ldrb	r1, [r1, #0]
    2588:	f001 011f 	and.w	r1, r1, #31
    258c:	f04f 0001 	mov.w	r0, #1
    2590:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2598:	e014      	b.n	25c4 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    259a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    259e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    25a2:	687a      	ldr	r2, [r7, #4]
    25a4:	7812      	ldrb	r2, [r2, #0]
    25a6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    25aa:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    25ac:	6879      	ldr	r1, [r7, #4]
    25ae:	7809      	ldrb	r1, [r1, #0]
    25b0:	f001 011f 	and.w	r1, r1, #31
    25b4:	f04f 0001 	mov.w	r0, #1
    25b8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    25bc:	f102 0220 	add.w	r2, r2, #32
    25c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    25c4:	f107 071c 	add.w	r7, r7, #28
    25c8:	46bd      	mov	sp, r7
    25ca:	bc80      	pop	{r7}
    25cc:	4770      	bx	lr
    25ce:	bf00      	nop

000025d0 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    25d0:	b480      	push	{r7}
    25d2:	b083      	sub	sp, #12
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
    25d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    25da:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    25de:	f2ce 0300 	movt	r3, #57344	; 0xe000
    25e2:	683a      	ldr	r2, [r7, #0]
    25e4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    25e8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    25ec:	6879      	ldr	r1, [r7, #4]
    25ee:	430a      	orrs	r2, r1
    25f0:	609a      	str	r2, [r3, #8]
}
    25f2:	f107 070c 	add.w	r7, r7, #12
    25f6:	46bd      	mov	sp, r7
    25f8:	bc80      	pop	{r7}
    25fa:	4770      	bx	lr

000025fc <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    25fc:	b480      	push	{r7}
    25fe:	b083      	sub	sp, #12
    2600:	af00      	add	r7, sp, #0
    2602:	4602      	mov	r2, r0
    2604:	460b      	mov	r3, r1
    2606:	71fa      	strb	r2, [r7, #7]
    2608:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    260a:	79bb      	ldrb	r3, [r7, #6]
    260c:	2b00      	cmp	r3, #0
    260e:	d00c      	beq.n	262a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2610:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2614:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2618:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    261c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2620:	6911      	ldr	r1, [r2, #16]
    2622:	79fa      	ldrb	r2, [r7, #7]
    2624:	430a      	orrs	r2, r1
    2626:	611a      	str	r2, [r3, #16]
    2628:	e00d      	b.n	2646 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    262a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    262e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2632:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2636:	f2ce 0200 	movt	r2, #57344	; 0xe000
    263a:	6911      	ldr	r1, [r2, #16]
    263c:	79fa      	ldrb	r2, [r7, #7]
    263e:	ea6f 0202 	mvn.w	r2, r2
    2642:	400a      	ands	r2, r1
    2644:	611a      	str	r2, [r3, #16]
  }
}
    2646:	f107 070c 	add.w	r7, r7, #12
    264a:	46bd      	mov	sp, r7
    264c:	bc80      	pop	{r7}
    264e:	4770      	bx	lr

00002650 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    2650:	b480      	push	{r7}
    2652:	b083      	sub	sp, #12
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	2b04      	cmp	r3, #4
    265c:	d10c      	bne.n	2678 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    265e:	f24e 0310 	movw	r3, #57360	; 0xe010
    2662:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2666:	f24e 0210 	movw	r2, #57360	; 0xe010
    266a:	f2ce 0200 	movt	r2, #57344	; 0xe000
    266e:	6812      	ldr	r2, [r2, #0]
    2670:	f042 0204 	orr.w	r2, r2, #4
    2674:	601a      	str	r2, [r3, #0]
    2676:	e00b      	b.n	2690 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    2678:	f24e 0310 	movw	r3, #57360	; 0xe010
    267c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2680:	f24e 0210 	movw	r2, #57360	; 0xe010
    2684:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2688:	6812      	ldr	r2, [r2, #0]
    268a:	f022 0204 	bic.w	r2, r2, #4
    268e:	601a      	str	r2, [r3, #0]
  }
}
    2690:	f107 070c 	add.w	r7, r7, #12
    2694:	46bd      	mov	sp, r7
    2696:	bc80      	pop	{r7}
    2698:	4770      	bx	lr
    269a:	bf00      	nop

0000269c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    269c:	b580      	push	{r7, lr}
    269e:	b086      	sub	sp, #24
    26a0:	af00      	add	r7, sp, #0
    26a2:	60f8      	str	r0, [r7, #12]
    26a4:	60b9      	str	r1, [r7, #8]
    26a6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    26a8:	f04f 0038 	mov.w	r0, #56	; 0x38
    26ac:	f002 fa58 	bl	4b60 <pvPortMalloc>
    26b0:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    26b2:	693b      	ldr	r3, [r7, #16]
    26b4:	2b00      	cmp	r3, #0
    26b6:	d061      	beq.n	277c <xCoRoutineCreate+0xe0>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    26b8:	f240 039c 	movw	r3, #156	; 0x9c
    26bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26c0:	681b      	ldr	r3, [r3, #0]
    26c2:	2b00      	cmp	r3, #0
    26c4:	d107      	bne.n	26d6 <xCoRoutineCreate+0x3a>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    26c6:	f240 039c 	movw	r3, #156	; 0x9c
    26ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ce:	693a      	ldr	r2, [r7, #16]
    26d0:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    26d2:	f000 fa35 	bl	2b40 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    26d6:	68bb      	ldr	r3, [r7, #8]
    26d8:	2b01      	cmp	r3, #1
    26da:	d902      	bls.n	26e2 <xCoRoutineCreate+0x46>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    26dc:	f04f 0301 	mov.w	r3, #1
    26e0:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    26e2:	693b      	ldr	r3, [r7, #16]
    26e4:	f04f 0200 	mov.w	r2, #0
    26e8:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    26ea:	693b      	ldr	r3, [r7, #16]
    26ec:	68ba      	ldr	r2, [r7, #8]
    26ee:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    26f0:	693b      	ldr	r3, [r7, #16]
    26f2:	687a      	ldr	r2, [r7, #4]
    26f4:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    26f6:	693b      	ldr	r3, [r7, #16]
    26f8:	68fa      	ldr	r2, [r7, #12]
    26fa:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    26fc:	693b      	ldr	r3, [r7, #16]
    26fe:	f103 0304 	add.w	r3, r3, #4
    2702:	4618      	mov	r0, r3
    2704:	f000 fab2 	bl	2c6c <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2708:	693b      	ldr	r3, [r7, #16]
    270a:	f103 0318 	add.w	r3, r3, #24
    270e:	4618      	mov	r0, r3
    2710:	f000 faac 	bl	2c6c <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    2714:	693b      	ldr	r3, [r7, #16]
    2716:	693a      	ldr	r2, [r7, #16]
    2718:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    271a:	693b      	ldr	r3, [r7, #16]
    271c:	693a      	ldr	r2, [r7, #16]
    271e:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2720:	68bb      	ldr	r3, [r7, #8]
    2722:	f1c3 0205 	rsb	r2, r3, #5
    2726:	693b      	ldr	r3, [r7, #16]
    2728:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    272a:	693b      	ldr	r3, [r7, #16]
    272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    272e:	f240 03a0 	movw	r3, #160	; 0xa0
    2732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	429a      	cmp	r2, r3
    273a:	d906      	bls.n	274a <xCoRoutineCreate+0xae>
    273c:	693b      	ldr	r3, [r7, #16]
    273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2740:	f240 03a0 	movw	r3, #160	; 0xa0
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	601a      	str	r2, [r3, #0]
    274a:	693b      	ldr	r3, [r7, #16]
    274c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    274e:	4613      	mov	r3, r2
    2750:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2754:	189b      	adds	r3, r3, r2
    2756:	ea4f 0383 	mov.w	r3, r3, lsl #2
    275a:	461a      	mov	r2, r3
    275c:	f240 0330 	movw	r3, #48	; 0x30
    2760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2764:	18d2      	adds	r2, r2, r3
    2766:	693b      	ldr	r3, [r7, #16]
    2768:	f103 0304 	add.w	r3, r3, #4
    276c:	4610      	mov	r0, r2
    276e:	4619      	mov	r1, r3
    2770:	f000 fa8a 	bl	2c88 <vListInsertEnd>

		xReturn = pdPASS;
    2774:	f04f 0301 	mov.w	r3, #1
    2778:	617b      	str	r3, [r7, #20]
    277a:	e002      	b.n	2782 <xCoRoutineCreate+0xe6>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    277c:	f04f 33ff 	mov.w	r3, #4294967295
    2780:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    2782:	697b      	ldr	r3, [r7, #20]
}
    2784:	4618      	mov	r0, r3
    2786:	f107 0718 	add.w	r7, r7, #24
    278a:	46bd      	mov	sp, r7
    278c:	bd80      	pop	{r7, pc}
    278e:	bf00      	nop

00002790 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2790:	b580      	push	{r7, lr}
    2792:	b084      	sub	sp, #16
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
    2798:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    279a:	f240 03a4 	movw	r3, #164	; 0xa4
    279e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27a2:	681a      	ldr	r2, [r3, #0]
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	18d3      	adds	r3, r2, r3
    27a8:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27aa:	f240 039c 	movw	r3, #156	; 0x9c
    27ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27b2:	681b      	ldr	r3, [r3, #0]
    27b4:	f103 0304 	add.w	r3, r3, #4
    27b8:	4618      	mov	r0, r3
    27ba:	f000 fac7 	bl	2d4c <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    27be:	f240 039c 	movw	r3, #156	; 0x9c
    27c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27c6:	681b      	ldr	r3, [r3, #0]
    27c8:	68fa      	ldr	r2, [r7, #12]
    27ca:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    27cc:	f240 03a4 	movw	r3, #164	; 0xa4
    27d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	68fa      	ldr	r2, [r7, #12]
    27d8:	429a      	cmp	r2, r3
    27da:	d210      	bcs.n	27fe <vCoRoutineAddToDelayedList+0x6e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27dc:	f240 0384 	movw	r3, #132	; 0x84
    27e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27e4:	681a      	ldr	r2, [r3, #0]
    27e6:	f240 039c 	movw	r3, #156	; 0x9c
    27ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	f103 0304 	add.w	r3, r3, #4
    27f4:	4610      	mov	r0, r2
    27f6:	4619      	mov	r1, r3
    27f8:	f000 fa6e 	bl	2cd8 <vListInsert>
    27fc:	e00f      	b.n	281e <vCoRoutineAddToDelayedList+0x8e>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27fe:	f240 0380 	movw	r3, #128	; 0x80
    2802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2806:	681a      	ldr	r2, [r3, #0]
    2808:	f240 039c 	movw	r3, #156	; 0x9c
    280c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	f103 0304 	add.w	r3, r3, #4
    2816:	4610      	mov	r0, r2
    2818:	4619      	mov	r1, r3
    281a:	f000 fa5d 	bl	2cd8 <vListInsert>
	}

	if( pxEventList )
    281e:	683b      	ldr	r3, [r7, #0]
    2820:	2b00      	cmp	r3, #0
    2822:	d00a      	beq.n	283a <vCoRoutineAddToDelayedList+0xaa>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2824:	f240 039c 	movw	r3, #156	; 0x9c
    2828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	f103 0318 	add.w	r3, r3, #24
    2832:	6838      	ldr	r0, [r7, #0]
    2834:	4619      	mov	r1, r3
    2836:	f000 fa4f 	bl	2cd8 <vListInsert>
	}
}
    283a:	f107 0710 	add.w	r7, r7, #16
    283e:	46bd      	mov	sp, r7
    2840:	bd80      	pop	{r7, pc}
    2842:	bf00      	nop

00002844 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2844:	b580      	push	{r7, lr}
    2846:	b082      	sub	sp, #8
    2848:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    284a:	e03f      	b.n	28cc <prvCheckPendingReadyList+0x88>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    284c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2850:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2854:	f240 0388 	movw	r3, #136	; 0x88
    2858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    285c:	68db      	ldr	r3, [r3, #12]
    285e:	68db      	ldr	r3, [r3, #12]
    2860:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	f103 0318 	add.w	r3, r3, #24
    2868:	4618      	mov	r0, r3
    286a:	f000 fa6f 	bl	2d4c <vListRemove>
		}
		portENABLE_INTERRUPTS();
    286e:	f04f 0000 	mov.w	r0, #0
    2872:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	f103 0304 	add.w	r3, r3, #4
    287c:	4618      	mov	r0, r3
    287e:	f000 fa65 	bl	2d4c <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    2882:	687b      	ldr	r3, [r7, #4]
    2884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2886:	f240 03a0 	movw	r3, #160	; 0xa0
    288a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    288e:	681b      	ldr	r3, [r3, #0]
    2890:	429a      	cmp	r2, r3
    2892:	d906      	bls.n	28a2 <prvCheckPendingReadyList+0x5e>
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2898:	f240 03a0 	movw	r3, #160	; 0xa0
    289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a0:	601a      	str	r2, [r3, #0]
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28a6:	4613      	mov	r3, r2
    28a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    28ac:	189b      	adds	r3, r3, r2
    28ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    28b2:	461a      	mov	r2, r3
    28b4:	f240 0330 	movw	r3, #48	; 0x30
    28b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28bc:	18d2      	adds	r2, r2, r3
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	f103 0304 	add.w	r3, r3, #4
    28c4:	4610      	mov	r0, r2
    28c6:	4619      	mov	r1, r3
    28c8:	f000 f9de 	bl	2c88 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    28cc:	f240 0388 	movw	r3, #136	; 0x88
    28d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d1b8      	bne.n	284c <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    28da:	f107 0708 	add.w	r7, r7, #8
    28de:	46bd      	mov	sp, r7
    28e0:	bd80      	pop	{r7, pc}
    28e2:	bf00      	nop

000028e4 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    28e4:	b580      	push	{r7, lr}
    28e6:	b082      	sub	sp, #8
    28e8:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    28ea:	f001 fb57 	bl	3f9c <xTaskGetTickCount>
    28ee:	4602      	mov	r2, r0
    28f0:	f240 03a8 	movw	r3, #168	; 0xa8
    28f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	1ad2      	subs	r2, r2, r3
    28fc:	f240 03ac 	movw	r3, #172	; 0xac
    2900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2904:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2906:	e08f      	b.n	2a28 <prvCheckDelayedList+0x144>
	{
		xCoRoutineTickCount++;
    2908:	f240 03a4 	movw	r3, #164	; 0xa4
    290c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2910:	681b      	ldr	r3, [r3, #0]
    2912:	f103 0201 	add.w	r2, r3, #1
    2916:	f240 03a4 	movw	r3, #164	; 0xa4
    291a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    291e:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    2920:	f240 03ac 	movw	r3, #172	; 0xac
    2924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2928:	681b      	ldr	r3, [r3, #0]
    292a:	f103 32ff 	add.w	r2, r3, #4294967295
    292e:	f240 03ac 	movw	r3, #172	; 0xac
    2932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2936:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2938:	f240 03a4 	movw	r3, #164	; 0xa4
    293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2940:	681b      	ldr	r3, [r3, #0]
    2942:	2b00      	cmp	r3, #0
    2944:	d165      	bne.n	2a12 <prvCheckDelayedList+0x12e>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2946:	f240 0380 	movw	r3, #128	; 0x80
    294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    294e:	681b      	ldr	r3, [r3, #0]
    2950:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    2952:	f240 0384 	movw	r3, #132	; 0x84
    2956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    295a:	681a      	ldr	r2, [r3, #0]
    295c:	f240 0380 	movw	r3, #128	; 0x80
    2960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2964:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    2966:	f240 0384 	movw	r3, #132	; 0x84
    296a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    296e:	687a      	ldr	r2, [r7, #4]
    2970:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2972:	e04e      	b.n	2a12 <prvCheckDelayedList+0x12e>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    2974:	f240 0380 	movw	r3, #128	; 0x80
    2978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	68db      	ldr	r3, [r3, #12]
    2980:	68db      	ldr	r3, [r3, #12]
    2982:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2984:	683b      	ldr	r3, [r7, #0]
    2986:	685a      	ldr	r2, [r3, #4]
    2988:	f240 03a4 	movw	r3, #164	; 0xa4
    298c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	429a      	cmp	r2, r3
    2994:	d847      	bhi.n	2a26 <prvCheckDelayedList+0x142>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    2996:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    299a:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    299e:	683b      	ldr	r3, [r7, #0]
    29a0:	f103 0304 	add.w	r3, r3, #4
    29a4:	4618      	mov	r0, r3
    29a6:	f000 f9d1 	bl	2d4c <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    29aa:	683b      	ldr	r3, [r7, #0]
    29ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29ae:	2b00      	cmp	r3, #0
    29b0:	d005      	beq.n	29be <prvCheckDelayedList+0xda>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    29b2:	683b      	ldr	r3, [r7, #0]
    29b4:	f103 0318 	add.w	r3, r3, #24
    29b8:	4618      	mov	r0, r3
    29ba:	f000 f9c7 	bl	2d4c <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    29be:	f04f 0000 	mov.w	r0, #0
    29c2:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    29c6:	683b      	ldr	r3, [r7, #0]
    29c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29ca:	f240 03a0 	movw	r3, #160	; 0xa0
    29ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29d2:	681b      	ldr	r3, [r3, #0]
    29d4:	429a      	cmp	r2, r3
    29d6:	d906      	bls.n	29e6 <prvCheckDelayedList+0x102>
    29d8:	683b      	ldr	r3, [r7, #0]
    29da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29dc:	f240 03a0 	movw	r3, #160	; 0xa0
    29e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29e4:	601a      	str	r2, [r3, #0]
    29e6:	683b      	ldr	r3, [r7, #0]
    29e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29ea:	4613      	mov	r3, r2
    29ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29f0:	189b      	adds	r3, r3, r2
    29f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29f6:	461a      	mov	r2, r3
    29f8:	f240 0330 	movw	r3, #48	; 0x30
    29fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a00:	18d2      	adds	r2, r2, r3
    2a02:	683b      	ldr	r3, [r7, #0]
    2a04:	f103 0304 	add.w	r3, r3, #4
    2a08:	4610      	mov	r0, r2
    2a0a:	4619      	mov	r1, r3
    2a0c:	f000 f93c 	bl	2c88 <vListInsertEnd>
    2a10:	e000      	b.n	2a14 <prvCheckDelayedList+0x130>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2a12:	bf00      	nop
    2a14:	f240 0380 	movw	r3, #128	; 0x80
    2a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	681b      	ldr	r3, [r3, #0]
    2a20:	2b00      	cmp	r3, #0
    2a22:	d1a7      	bne.n	2974 <prvCheckDelayedList+0x90>
    2a24:	e000      	b.n	2a28 <prvCheckDelayedList+0x144>
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
			{			
				/* Timeout not yet expired. */																			
				break;																				
    2a26:	bf00      	nop
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2a28:	f240 03ac 	movw	r3, #172	; 0xac
    2a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a30:	681b      	ldr	r3, [r3, #0]
    2a32:	2b00      	cmp	r3, #0
    2a34:	f47f af68 	bne.w	2908 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2a38:	f240 03a4 	movw	r3, #164	; 0xa4
    2a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a40:	681a      	ldr	r2, [r3, #0]
    2a42:	f240 03a8 	movw	r3, #168	; 0xa8
    2a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a4a:	601a      	str	r2, [r3, #0]
}
    2a4c:	f107 0708 	add.w	r7, r7, #8
    2a50:	46bd      	mov	sp, r7
    2a52:	bd80      	pop	{r7, pc}

00002a54 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    2a54:	b580      	push	{r7, lr}
    2a56:	b082      	sub	sp, #8
    2a58:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2a5a:	f7ff fef3 	bl	2844 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2a5e:	f7ff ff41 	bl	28e4 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2a62:	e012      	b.n	2a8a <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2a64:	f240 03a0 	movw	r3, #160	; 0xa0
    2a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a6c:	681b      	ldr	r3, [r3, #0]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d060      	beq.n	2b34 <vCoRoutineSchedule+0xe0>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    2a72:	f240 03a0 	movw	r3, #160	; 0xa0
    2a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7a:	681b      	ldr	r3, [r3, #0]
    2a7c:	f103 32ff 	add.w	r2, r3, #4294967295
    2a80:	f240 03a0 	movw	r3, #160	; 0xa0
    2a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a88:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2a8a:	f240 03a0 	movw	r3, #160	; 0xa0
    2a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a92:	681a      	ldr	r2, [r3, #0]
    2a94:	4613      	mov	r3, r2
    2a96:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a9a:	189b      	adds	r3, r3, r2
    2a9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2aa0:	461a      	mov	r2, r3
    2aa2:	f240 0330 	movw	r3, #48	; 0x30
    2aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aaa:	18d3      	adds	r3, r2, r3
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d0d8      	beq.n	2a64 <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2ab2:	f240 03a0 	movw	r3, #160	; 0xa0
    2ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aba:	681a      	ldr	r2, [r3, #0]
    2abc:	4613      	mov	r3, r2
    2abe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac2:	189b      	adds	r3, r3, r2
    2ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac8:	461a      	mov	r2, r3
    2aca:	f240 0330 	movw	r3, #48	; 0x30
    2ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad2:	18d3      	adds	r3, r2, r3
    2ad4:	607b      	str	r3, [r7, #4]
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	685b      	ldr	r3, [r3, #4]
    2ada:	685a      	ldr	r2, [r3, #4]
    2adc:	687b      	ldr	r3, [r7, #4]
    2ade:	605a      	str	r2, [r3, #4]
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	685a      	ldr	r2, [r3, #4]
    2ae4:	687b      	ldr	r3, [r7, #4]
    2ae6:	f103 0308 	add.w	r3, r3, #8
    2aea:	429a      	cmp	r2, r3
    2aec:	d104      	bne.n	2af8 <vCoRoutineSchedule+0xa4>
    2aee:	687b      	ldr	r3, [r7, #4]
    2af0:	685b      	ldr	r3, [r3, #4]
    2af2:	685a      	ldr	r2, [r3, #4]
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	605a      	str	r2, [r3, #4]
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	685b      	ldr	r3, [r3, #4]
    2afc:	68da      	ldr	r2, [r3, #12]
    2afe:	f240 039c 	movw	r3, #156	; 0x9c
    2b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b06:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2b08:	f240 039c 	movw	r3, #156	; 0x9c
    2b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b10:	681b      	ldr	r3, [r3, #0]
    2b12:	681a      	ldr	r2, [r3, #0]
    2b14:	f240 039c 	movw	r3, #156	; 0x9c
    2b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b1c:	6819      	ldr	r1, [r3, #0]
    2b1e:	f240 039c 	movw	r3, #156	; 0x9c
    2b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b26:	681b      	ldr	r3, [r3, #0]
    2b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b2a:	4608      	mov	r0, r1
    2b2c:	4619      	mov	r1, r3
    2b2e:	4790      	blx	r2

	return;
    2b30:	bf00      	nop
    2b32:	e000      	b.n	2b36 <vCoRoutineSchedule+0xe2>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
    2b34:	bf00      	nop

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
    2b36:	f107 0708 	add.w	r7, r7, #8
    2b3a:	46bd      	mov	sp, r7
    2b3c:	bd80      	pop	{r7, pc}
    2b3e:	bf00      	nop

00002b40 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2b40:	b580      	push	{r7, lr}
    2b42:	b082      	sub	sp, #8
    2b44:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2b46:	f04f 0300 	mov.w	r3, #0
    2b4a:	607b      	str	r3, [r7, #4]
    2b4c:	e013      	b.n	2b76 <prvInitialiseCoRoutineLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2b4e:	687a      	ldr	r2, [r7, #4]
    2b50:	4613      	mov	r3, r2
    2b52:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b56:	189b      	adds	r3, r3, r2
    2b58:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b5c:	461a      	mov	r2, r3
    2b5e:	f240 0330 	movw	r3, #48	; 0x30
    2b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b66:	18d3      	adds	r3, r2, r3
    2b68:	4618      	mov	r0, r3
    2b6a:	f000 f85f 	bl	2c2c <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	f103 0301 	add.w	r3, r3, #1
    2b74:	607b      	str	r3, [r7, #4]
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	2b01      	cmp	r3, #1
    2b7a:	d9e8      	bls.n	2b4e <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2b7c:	f240 0058 	movw	r0, #88	; 0x58
    2b80:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b84:	f000 f852 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2b88:	f240 006c 	movw	r0, #108	; 0x6c
    2b8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b90:	f000 f84c 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2b94:	f240 0088 	movw	r0, #136	; 0x88
    2b98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b9c:	f000 f846 	bl	2c2c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2ba0:	f240 0380 	movw	r3, #128	; 0x80
    2ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ba8:	f240 0258 	movw	r2, #88	; 0x58
    2bac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2bb0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2bb2:	f240 0384 	movw	r3, #132	; 0x84
    2bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bba:	f240 026c 	movw	r2, #108	; 0x6c
    2bbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2bc2:	601a      	str	r2, [r3, #0]
}
    2bc4:	f107 0708 	add.w	r7, r7, #8
    2bc8:	46bd      	mov	sp, r7
    2bca:	bd80      	pop	{r7, pc}

00002bcc <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2bcc:	b580      	push	{r7, lr}
    2bce:	b084      	sub	sp, #16
    2bd0:	af00      	add	r7, sp, #0
    2bd2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	68db      	ldr	r3, [r3, #12]
    2bd8:	68db      	ldr	r3, [r3, #12]
    2bda:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2bdc:	68bb      	ldr	r3, [r7, #8]
    2bde:	f103 0318 	add.w	r3, r3, #24
    2be2:	4618      	mov	r0, r3
    2be4:	f000 f8b2 	bl	2d4c <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2be8:	68bb      	ldr	r3, [r7, #8]
    2bea:	f103 0318 	add.w	r3, r3, #24
    2bee:	f240 0088 	movw	r0, #136	; 0x88
    2bf2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2bf6:	4619      	mov	r1, r3
    2bf8:	f000 f846 	bl	2c88 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2bfc:	68bb      	ldr	r3, [r7, #8]
    2bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c00:	f240 039c 	movw	r3, #156	; 0x9c
    2c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c08:	681b      	ldr	r3, [r3, #0]
    2c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c0c:	429a      	cmp	r2, r3
    2c0e:	d303      	bcc.n	2c18 <xCoRoutineRemoveFromEventList+0x4c>
	{
		xReturn = pdTRUE;
    2c10:	f04f 0301 	mov.w	r3, #1
    2c14:	60fb      	str	r3, [r7, #12]
    2c16:	e002      	b.n	2c1e <xCoRoutineRemoveFromEventList+0x52>
	}
	else
	{
		xReturn = pdFALSE;
    2c18:	f04f 0300 	mov.w	r3, #0
    2c1c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    2c1e:	68fb      	ldr	r3, [r7, #12]
}
    2c20:	4618      	mov	r0, r3
    2c22:	f107 0710 	add.w	r7, r7, #16
    2c26:	46bd      	mov	sp, r7
    2c28:	bd80      	pop	{r7, pc}
    2c2a:	bf00      	nop

00002c2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2c2c:	b480      	push	{r7}
    2c2e:	b083      	sub	sp, #12
    2c30:	af00      	add	r7, sp, #0
    2c32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	f103 0208 	add.w	r2, r3, #8
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	f04f 32ff 	mov.w	r2, #4294967295
    2c44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	f103 0208 	add.w	r2, r3, #8
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	f103 0208 	add.w	r2, r3, #8
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	f04f 0200 	mov.w	r2, #0
    2c60:	601a      	str	r2, [r3, #0]
}
    2c62:	f107 070c 	add.w	r7, r7, #12
    2c66:	46bd      	mov	sp, r7
    2c68:	bc80      	pop	{r7}
    2c6a:	4770      	bx	lr

00002c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2c6c:	b480      	push	{r7}
    2c6e:	b083      	sub	sp, #12
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	f04f 0200 	mov.w	r2, #0
    2c7a:	611a      	str	r2, [r3, #16]
}
    2c7c:	f107 070c 	add.w	r7, r7, #12
    2c80:	46bd      	mov	sp, r7
    2c82:	bc80      	pop	{r7}
    2c84:	4770      	bx	lr
    2c86:	bf00      	nop

00002c88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2c88:	b480      	push	{r7}
    2c8a:	b085      	sub	sp, #20
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
    2c90:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	685b      	ldr	r3, [r3, #4]
    2c96:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2c98:	68fb      	ldr	r3, [r7, #12]
    2c9a:	685a      	ldr	r2, [r3, #4]
    2c9c:	683b      	ldr	r3, [r7, #0]
    2c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	685a      	ldr	r2, [r3, #4]
    2ca4:	683b      	ldr	r3, [r7, #0]
    2ca6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2ca8:	68fb      	ldr	r3, [r7, #12]
    2caa:	685b      	ldr	r3, [r3, #4]
    2cac:	683a      	ldr	r2, [r7, #0]
    2cae:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cb0:	68fb      	ldr	r3, [r7, #12]
    2cb2:	683a      	ldr	r2, [r7, #0]
    2cb4:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	683a      	ldr	r2, [r7, #0]
    2cba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2cbc:	683b      	ldr	r3, [r7, #0]
    2cbe:	687a      	ldr	r2, [r7, #4]
    2cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	f103 0201 	add.w	r2, r3, #1
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	601a      	str	r2, [r3, #0]
}
    2cce:	f107 0714 	add.w	r7, r7, #20
    2cd2:	46bd      	mov	sp, r7
    2cd4:	bc80      	pop	{r7}
    2cd6:	4770      	bx	lr

00002cd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2cd8:	b480      	push	{r7}
    2cda:	b085      	sub	sp, #20
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
    2ce0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2ce2:	683b      	ldr	r3, [r7, #0]
    2ce4:	681b      	ldr	r3, [r3, #0]
    2ce6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2ce8:	68bb      	ldr	r3, [r7, #8]
    2cea:	f1b3 3fff 	cmp.w	r3, #4294967295
    2cee:	d103      	bne.n	2cf8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	691b      	ldr	r3, [r3, #16]
    2cf4:	60fb      	str	r3, [r7, #12]
    2cf6:	e00d      	b.n	2d14 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	f103 0308 	add.w	r3, r3, #8
    2cfe:	60fb      	str	r3, [r7, #12]
    2d00:	e002      	b.n	2d08 <vListInsert+0x30>
    2d02:	68fb      	ldr	r3, [r7, #12]
    2d04:	685b      	ldr	r3, [r3, #4]
    2d06:	60fb      	str	r3, [r7, #12]
    2d08:	68fb      	ldr	r3, [r7, #12]
    2d0a:	685b      	ldr	r3, [r3, #4]
    2d0c:	681a      	ldr	r2, [r3, #0]
    2d0e:	68bb      	ldr	r3, [r7, #8]
    2d10:	429a      	cmp	r2, r3
    2d12:	d9f6      	bls.n	2d02 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2d14:	68fb      	ldr	r3, [r7, #12]
    2d16:	685a      	ldr	r2, [r3, #4]
    2d18:	683b      	ldr	r3, [r7, #0]
    2d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2d1c:	683b      	ldr	r3, [r7, #0]
    2d1e:	685b      	ldr	r3, [r3, #4]
    2d20:	683a      	ldr	r2, [r7, #0]
    2d22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2d24:	683b      	ldr	r3, [r7, #0]
    2d26:	68fa      	ldr	r2, [r7, #12]
    2d28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2d2a:	68fb      	ldr	r3, [r7, #12]
    2d2c:	683a      	ldr	r2, [r7, #0]
    2d2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2d30:	683b      	ldr	r3, [r7, #0]
    2d32:	687a      	ldr	r2, [r7, #4]
    2d34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	681b      	ldr	r3, [r3, #0]
    2d3a:	f103 0201 	add.w	r2, r3, #1
    2d3e:	687b      	ldr	r3, [r7, #4]
    2d40:	601a      	str	r2, [r3, #0]
}
    2d42:	f107 0714 	add.w	r7, r7, #20
    2d46:	46bd      	mov	sp, r7
    2d48:	bc80      	pop	{r7}
    2d4a:	4770      	bx	lr

00002d4c <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2d4c:	b480      	push	{r7}
    2d4e:	b085      	sub	sp, #20
    2d50:	af00      	add	r7, sp, #0
    2d52:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	685b      	ldr	r3, [r3, #4]
    2d58:	687a      	ldr	r2, [r7, #4]
    2d5a:	6892      	ldr	r2, [r2, #8]
    2d5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	689b      	ldr	r3, [r3, #8]
    2d62:	687a      	ldr	r2, [r7, #4]
    2d64:	6852      	ldr	r2, [r2, #4]
    2d66:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	691b      	ldr	r3, [r3, #16]
    2d6c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	685a      	ldr	r2, [r3, #4]
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	429a      	cmp	r2, r3
    2d76:	d103      	bne.n	2d80 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	689a      	ldr	r2, [r3, #8]
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	f04f 0200 	mov.w	r2, #0
    2d86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	681b      	ldr	r3, [r3, #0]
    2d8c:	f103 32ff 	add.w	r2, r3, #4294967295
    2d90:	68fb      	ldr	r3, [r7, #12]
    2d92:	601a      	str	r2, [r3, #0]
}
    2d94:	f107 0714 	add.w	r7, r7, #20
    2d98:	46bd      	mov	sp, r7
    2d9a:	bc80      	pop	{r7}
    2d9c:	4770      	bx	lr
    2d9e:	bf00      	nop

00002da0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b084      	sub	sp, #16
    2da4:	af00      	add	r7, sp, #0
    2da6:	6078      	str	r0, [r7, #4]
    2da8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2daa:	f04f 0301 	mov.w	r3, #1
    2dae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	2b01      	cmp	r3, #1
    2db4:	d00d      	beq.n	2dd2 <xQueueGenericReset+0x32>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d002      	beq.n	2dc4 <xQueueGenericReset+0x24>
		{
			xReturn = pdFAIL;
    2dbe:	f04f 0300 	mov.w	r3, #0
    2dc2:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	691b      	ldr	r3, [r3, #16]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d002      	beq.n	2dd2 <xQueueGenericReset+0x32>
		{
			xReturn = pdFAIL;
    2dcc:	f04f 0300 	mov.w	r3, #0
    2dd0:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2b01      	cmp	r3, #1
    2dd6:	d133      	bne.n	2e40 <xQueueGenericReset+0xa0>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2dd8:	687b      	ldr	r3, [r7, #4]
    2dda:	681a      	ldr	r2, [r3, #0]
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2de0:	6879      	ldr	r1, [r7, #4]
    2de2:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2de4:	fb01 f303 	mul.w	r3, r1, r3
    2de8:	18d2      	adds	r2, r2, r3
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	f04f 0200 	mov.w	r2, #0
    2df4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	681a      	ldr	r2, [r3, #0]
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	681a      	ldr	r2, [r3, #0]
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2e06:	f103 33ff 	add.w	r3, r3, #4294967295
    2e0a:	6879      	ldr	r1, [r7, #4]
    2e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2e0e:	fb01 f303 	mul.w	r3, r1, r3
    2e12:	18d2      	adds	r2, r2, r3
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	f04f 32ff 	mov.w	r2, #4294967295
    2e1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2e20:	687b      	ldr	r3, [r7, #4]
    2e22:	f04f 32ff 	mov.w	r2, #4294967295
    2e26:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	f103 0310 	add.w	r3, r3, #16
    2e2e:	4618      	mov	r0, r3
    2e30:	f7ff fefc 	bl	2c2c <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2e3a:	4618      	mov	r0, r3
    2e3c:	f7ff fef6 	bl	2c2c <vListInitialise>
	}

	return xReturn;
    2e40:	68fb      	ldr	r3, [r7, #12]
}
    2e42:	4618      	mov	r0, r3
    2e44:	f107 0710 	add.w	r7, r7, #16
    2e48:	46bd      	mov	sp, r7
    2e4a:	bd80      	pop	{r7, pc}

00002e4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	b088      	sub	sp, #32
    2e50:	af00      	add	r7, sp, #0
    2e52:	60f8      	str	r0, [r7, #12]
    2e54:	60b9      	str	r1, [r7, #8]
    2e56:	4613      	mov	r3, r2
    2e58:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2e5a:	f04f 0300 	mov.w	r3, #0
    2e5e:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2e60:	68fb      	ldr	r3, [r7, #12]
    2e62:	2b00      	cmp	r3, #0
    2e64:	d029      	beq.n	2eba <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2e66:	f04f 004c 	mov.w	r0, #76	; 0x4c
    2e6a:	f001 fe79 	bl	4b60 <pvPortMalloc>
    2e6e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2e70:	69bb      	ldr	r3, [r7, #24]
    2e72:	2b00      	cmp	r3, #0
    2e74:	d021      	beq.n	2eba <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2e76:	68fb      	ldr	r3, [r7, #12]
    2e78:	68ba      	ldr	r2, [r7, #8]
    2e7a:	fb02 f303 	mul.w	r3, r2, r3
    2e7e:	f103 0301 	add.w	r3, r3, #1
    2e82:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2e84:	6978      	ldr	r0, [r7, #20]
    2e86:	f001 fe6b 	bl	4b60 <pvPortMalloc>
    2e8a:	4602      	mov	r2, r0
    2e8c:	69bb      	ldr	r3, [r7, #24]
    2e8e:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2e90:	69bb      	ldr	r3, [r7, #24]
    2e92:	681b      	ldr	r3, [r3, #0]
    2e94:	2b00      	cmp	r3, #0
    2e96:	d00d      	beq.n	2eb4 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2e98:	69bb      	ldr	r3, [r7, #24]
    2e9a:	68fa      	ldr	r2, [r7, #12]
    2e9c:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2e9e:	69bb      	ldr	r3, [r7, #24]
    2ea0:	68ba      	ldr	r2, [r7, #8]
    2ea2:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2ea4:	69b8      	ldr	r0, [r7, #24]
    2ea6:	f04f 0101 	mov.w	r1, #1
    2eaa:	f7ff ff79 	bl	2da0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2eae:	69bb      	ldr	r3, [r7, #24]
    2eb0:	61fb      	str	r3, [r7, #28]
    2eb2:	e002      	b.n	2eba <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2eb4:	69b8      	ldr	r0, [r7, #24]
    2eb6:	f001 fe9f 	bl	4bf8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2eba:	69fb      	ldr	r3, [r7, #28]
}
    2ebc:	4618      	mov	r0, r3
    2ebe:	f107 0720 	add.w	r7, r7, #32
    2ec2:	46bd      	mov	sp, r7
    2ec4:	bd80      	pop	{r7, pc}
    2ec6:	bf00      	nop

00002ec8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2ec8:	b580      	push	{r7, lr}
    2eca:	b084      	sub	sp, #16
    2ecc:	af00      	add	r7, sp, #0
    2ece:	4603      	mov	r3, r0
    2ed0:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2ed2:	f04f 004c 	mov.w	r0, #76	; 0x4c
    2ed6:	f001 fe43 	bl	4b60 <pvPortMalloc>
    2eda:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2edc:	68fb      	ldr	r3, [r7, #12]
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d038      	beq.n	2f54 <xQueueCreateMutex+0x8c>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2ee2:	68fb      	ldr	r3, [r7, #12]
    2ee4:	f04f 0200 	mov.w	r2, #0
    2ee8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2eea:	68fb      	ldr	r3, [r7, #12]
    2eec:	f04f 0200 	mov.w	r2, #0
    2ef0:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2ef2:	68fb      	ldr	r3, [r7, #12]
    2ef4:	f04f 0200 	mov.w	r2, #0
    2ef8:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2efa:	68fb      	ldr	r3, [r7, #12]
    2efc:	f04f 0200 	mov.w	r2, #0
    2f00:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2f02:	68fb      	ldr	r3, [r7, #12]
    2f04:	f04f 0200 	mov.w	r2, #0
    2f08:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	f04f 0201 	mov.w	r2, #1
    2f10:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	f04f 0200 	mov.w	r2, #0
    2f18:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2f1a:	68fb      	ldr	r3, [r7, #12]
    2f1c:	f04f 32ff 	mov.w	r2, #4294967295
    2f20:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2f22:	68fb      	ldr	r3, [r7, #12]
    2f24:	f04f 32ff 	mov.w	r2, #4294967295
    2f28:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2f2a:	68fb      	ldr	r3, [r7, #12]
    2f2c:	f103 0310 	add.w	r3, r3, #16
    2f30:	4618      	mov	r0, r3
    2f32:	f7ff fe7b 	bl	2c2c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2f3c:	4618      	mov	r0, r3
    2f3e:	f7ff fe75 	bl	2c2c <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2f42:	68f8      	ldr	r0, [r7, #12]
    2f44:	f04f 0100 	mov.w	r1, #0
    2f48:	f04f 0200 	mov.w	r2, #0
    2f4c:	f04f 0300 	mov.w	r3, #0
    2f50:	f000 f820 	bl	2f94 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2f54:	68fb      	ldr	r3, [r7, #12]
	}
    2f56:	4618      	mov	r0, r3
    2f58:	f107 0710 	add.w	r7, r7, #16
    2f5c:	46bd      	mov	sp, r7
    2f5e:	bd80      	pop	{r7, pc}

00002f60 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2f60:	b580      	push	{r7, lr}
    2f62:	b084      	sub	sp, #16
    2f64:	af00      	add	r7, sp, #0
    2f66:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2f68:	f001 fd76 	bl	4a58 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	681b      	ldr	r3, [r3, #0]
    2f70:	2b00      	cmp	r3, #0
    2f72:	d103      	bne.n	2f7c <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	685b      	ldr	r3, [r3, #4]
    2f78:	60fb      	str	r3, [r7, #12]
    2f7a:	e002      	b.n	2f82 <xQueueGetMutexHolder+0x22>
			}
			else
			{
				pxReturn = NULL;
    2f7c:	f04f 0300 	mov.w	r3, #0
    2f80:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2f82:	f001 fd7f 	bl	4a84 <vPortExitCritical>
		
		return pxReturn;
    2f86:	68fb      	ldr	r3, [r7, #12]
	}
    2f88:	4618      	mov	r0, r3
    2f8a:	f107 0710 	add.w	r7, r7, #16
    2f8e:	46bd      	mov	sp, r7
    2f90:	bd80      	pop	{r7, pc}
    2f92:	bf00      	nop

00002f94 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2f94:	b580      	push	{r7, lr}
    2f96:	b088      	sub	sp, #32
    2f98:	af00      	add	r7, sp, #0
    2f9a:	60f8      	str	r0, [r7, #12]
    2f9c:	60b9      	str	r1, [r7, #8]
    2f9e:	607a      	str	r2, [r7, #4]
    2fa0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2fa2:	f04f 0300 	mov.w	r3, #0
    2fa6:	61fb      	str	r3, [r7, #28]
    2fa8:	e000      	b.n	2fac <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2faa:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2fac:	f001 fd54 	bl	4a58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2fb0:	68fb      	ldr	r3, [r7, #12]
    2fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2fb4:	68fb      	ldr	r3, [r7, #12]
    2fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2fb8:	429a      	cmp	r2, r3
    2fba:	d218      	bcs.n	2fee <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2fbc:	68f8      	ldr	r0, [r7, #12]
    2fbe:	68b9      	ldr	r1, [r7, #8]
    2fc0:	683a      	ldr	r2, [r7, #0]
    2fc2:	f000 f9fd 	bl	33c0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2fc6:	68fb      	ldr	r3, [r7, #12]
    2fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d00a      	beq.n	2fe4 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2fce:	68fb      	ldr	r3, [r7, #12]
    2fd0:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2fd4:	4618      	mov	r0, r3
    2fd6:	f001 f9a5 	bl	4324 <xTaskRemoveFromEventList>
    2fda:	4603      	mov	r3, r0
    2fdc:	2b01      	cmp	r3, #1
    2fde:	d101      	bne.n	2fe4 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2fe0:	f001 fd2e 	bl	4a40 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2fe4:	f001 fd4e 	bl	4a84 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2fe8:	f04f 0301 	mov.w	r3, #1
    2fec:	e05d      	b.n	30aa <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d104      	bne.n	2ffe <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2ff4:	f001 fd46 	bl	4a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2ff8:	f04f 0300 	mov.w	r3, #0
    2ffc:	e055      	b.n	30aa <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    2ffe:	69fb      	ldr	r3, [r7, #28]
    3000:	2b00      	cmp	r3, #0
    3002:	d107      	bne.n	3014 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3004:	f107 0314 	add.w	r3, r7, #20
    3008:	4618      	mov	r0, r3
    300a:	f001 f9ed 	bl	43e8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    300e:	f04f 0301 	mov.w	r3, #1
    3012:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3014:	f001 fd36 	bl	4a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3018:	f000 ff04 	bl	3e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    301c:	f001 fd1c 	bl	4a58 <vPortEnterCritical>
    3020:	68fb      	ldr	r3, [r7, #12]
    3022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3024:	f1b3 3fff 	cmp.w	r3, #4294967295
    3028:	d103      	bne.n	3032 <xQueueGenericSend+0x9e>
    302a:	68fb      	ldr	r3, [r7, #12]
    302c:	f04f 0200 	mov.w	r2, #0
    3030:	645a      	str	r2, [r3, #68]	; 0x44
    3032:	68fb      	ldr	r3, [r7, #12]
    3034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3036:	f1b3 3fff 	cmp.w	r3, #4294967295
    303a:	d103      	bne.n	3044 <xQueueGenericSend+0xb0>
    303c:	68fb      	ldr	r3, [r7, #12]
    303e:	f04f 0200 	mov.w	r2, #0
    3042:	649a      	str	r2, [r3, #72]	; 0x48
    3044:	f001 fd1e 	bl	4a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3048:	f107 0314 	add.w	r3, r7, #20
    304c:	4618      	mov	r0, r3
    304e:	f107 0304 	add.w	r3, r7, #4
    3052:	4619      	mov	r1, r3
    3054:	f001 f9e0 	bl	4418 <xTaskCheckForTimeOut>
    3058:	4603      	mov	r3, r0
    305a:	2b00      	cmp	r3, #0
    305c:	d11e      	bne.n	309c <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    305e:	68f8      	ldr	r0, [r7, #12]
    3060:	f000 fab2 	bl	35c8 <prvIsQueueFull>
    3064:	4603      	mov	r3, r0
    3066:	2b00      	cmp	r3, #0
    3068:	d012      	beq.n	3090 <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    306a:	68fb      	ldr	r3, [r7, #12]
    306c:	f103 0210 	add.w	r2, r3, #16
    3070:	687b      	ldr	r3, [r7, #4]
    3072:	4610      	mov	r0, r2
    3074:	4619      	mov	r1, r3
    3076:	f001 f919 	bl	42ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    307a:	68f8      	ldr	r0, [r7, #12]
    307c:	f000 fa2c 	bl	34d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3080:	f000 fee2 	bl	3e48 <xTaskResumeAll>
    3084:	4603      	mov	r3, r0
    3086:	2b00      	cmp	r3, #0
    3088:	d18f      	bne.n	2faa <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    308a:	f001 fcd9 	bl	4a40 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    308e:	e78c      	b.n	2faa <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3090:	68f8      	ldr	r0, [r7, #12]
    3092:	f000 fa21 	bl	34d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3096:	f000 fed7 	bl	3e48 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    309a:	e786      	b.n	2faa <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    309c:	68f8      	ldr	r0, [r7, #12]
    309e:	f000 fa1b 	bl	34d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    30a2:	f000 fed1 	bl	3e48 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    30a6:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    30aa:	4618      	mov	r0, r3
    30ac:	f107 0720 	add.w	r7, r7, #32
    30b0:	46bd      	mov	sp, r7
    30b2:	bd80      	pop	{r7, pc}

000030b4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    30b4:	b580      	push	{r7, lr}
    30b6:	b086      	sub	sp, #24
    30b8:	af00      	add	r7, sp, #0
    30ba:	60f8      	str	r0, [r7, #12]
    30bc:	60b9      	str	r1, [r7, #8]
    30be:	607a      	str	r2, [r7, #4]
    30c0:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    30c2:	f04f 0300 	mov.w	r3, #0
    30c6:	613b      	str	r3, [r7, #16]
    30c8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    30cc:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    30d0:	68fb      	ldr	r3, [r7, #12]
    30d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    30d4:	68fb      	ldr	r3, [r7, #12]
    30d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    30d8:	429a      	cmp	r2, r3
    30da:	d225      	bcs.n	3128 <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    30dc:	68f8      	ldr	r0, [r7, #12]
    30de:	68b9      	ldr	r1, [r7, #8]
    30e0:	683a      	ldr	r2, [r7, #0]
    30e2:	f000 f96d 	bl	33c0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    30e6:	68fb      	ldr	r3, [r7, #12]
    30e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    30ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    30ee:	d111      	bne.n	3114 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    30f0:	68fb      	ldr	r3, [r7, #12]
    30f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30f4:	2b00      	cmp	r3, #0
    30f6:	d013      	beq.n	3120 <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	f103 0324 	add.w	r3, r3, #36	; 0x24
    30fe:	4618      	mov	r0, r3
    3100:	f001 f910 	bl	4324 <xTaskRemoveFromEventList>
    3104:	4603      	mov	r3, r0
    3106:	2b00      	cmp	r3, #0
    3108:	d00a      	beq.n	3120 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    310a:	687b      	ldr	r3, [r7, #4]
    310c:	f04f 0201 	mov.w	r2, #1
    3110:	601a      	str	r2, [r3, #0]
    3112:	e005      	b.n	3120 <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3114:	68fb      	ldr	r3, [r7, #12]
    3116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3118:	f103 0201 	add.w	r2, r3, #1
    311c:	68fb      	ldr	r3, [r7, #12]
    311e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    3120:	f04f 0301 	mov.w	r3, #1
    3124:	617b      	str	r3, [r7, #20]
    3126:	e002      	b.n	312e <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3128:	f04f 0300 	mov.w	r3, #0
    312c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    312e:	f04f 0000 	mov.w	r0, #0
    3132:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3136:	697b      	ldr	r3, [r7, #20]
}
    3138:	4618      	mov	r0, r3
    313a:	f107 0718 	add.w	r7, r7, #24
    313e:	46bd      	mov	sp, r7
    3140:	bd80      	pop	{r7, pc}
    3142:	bf00      	nop

00003144 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3144:	b580      	push	{r7, lr}
    3146:	b088      	sub	sp, #32
    3148:	af00      	add	r7, sp, #0
    314a:	60f8      	str	r0, [r7, #12]
    314c:	60b9      	str	r1, [r7, #8]
    314e:	607a      	str	r2, [r7, #4]
    3150:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3152:	f04f 0300 	mov.w	r3, #0
    3156:	61fb      	str	r3, [r7, #28]
    3158:	e000      	b.n	315c <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    315a:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    315c:	f001 fc7c 	bl	4a58 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3160:	68fb      	ldr	r3, [r7, #12]
    3162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3164:	2b00      	cmp	r3, #0
    3166:	d03f      	beq.n	31e8 <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    3168:	68fb      	ldr	r3, [r7, #12]
    316a:	68db      	ldr	r3, [r3, #12]
    316c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    316e:	68f8      	ldr	r0, [r7, #12]
    3170:	68b9      	ldr	r1, [r7, #8]
    3172:	f000 f989 	bl	3488 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3176:	683b      	ldr	r3, [r7, #0]
    3178:	2b00      	cmp	r3, #0
    317a:	d11e      	bne.n	31ba <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    317c:	68fb      	ldr	r3, [r7, #12]
    317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3180:	f103 32ff 	add.w	r2, r3, #4294967295
    3184:	68fb      	ldr	r3, [r7, #12]
    3186:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3188:	68fb      	ldr	r3, [r7, #12]
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	2b00      	cmp	r3, #0
    318e:	d104      	bne.n	319a <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    3190:	f001 fb1a 	bl	47c8 <xTaskGetCurrentTaskHandle>
    3194:	4602      	mov	r2, r0
    3196:	68fb      	ldr	r3, [r7, #12]
    3198:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    319a:	68fb      	ldr	r3, [r7, #12]
    319c:	691b      	ldr	r3, [r3, #16]
    319e:	2b00      	cmp	r3, #0
    31a0:	d01d      	beq.n	31de <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    31a2:	68fb      	ldr	r3, [r7, #12]
    31a4:	f103 0310 	add.w	r3, r3, #16
    31a8:	4618      	mov	r0, r3
    31aa:	f001 f8bb 	bl	4324 <xTaskRemoveFromEventList>
    31ae:	4603      	mov	r3, r0
    31b0:	2b01      	cmp	r3, #1
    31b2:	d114      	bne.n	31de <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
    31b4:	f001 fc44 	bl	4a40 <vPortYieldFromISR>
    31b8:	e011      	b.n	31de <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    31ba:	68fb      	ldr	r3, [r7, #12]
    31bc:	69ba      	ldr	r2, [r7, #24]
    31be:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31c0:	68fb      	ldr	r3, [r7, #12]
    31c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31c4:	2b00      	cmp	r3, #0
    31c6:	d00a      	beq.n	31de <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31c8:	68fb      	ldr	r3, [r7, #12]
    31ca:	f103 0324 	add.w	r3, r3, #36	; 0x24
    31ce:	4618      	mov	r0, r3
    31d0:	f001 f8a8 	bl	4324 <xTaskRemoveFromEventList>
    31d4:	4603      	mov	r3, r0
    31d6:	2b00      	cmp	r3, #0
    31d8:	d001      	beq.n	31de <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    31da:	f001 fc31 	bl	4a40 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    31de:	f001 fc51 	bl	4a84 <vPortExitCritical>
				return pdPASS;
    31e2:	f04f 0301 	mov.w	r3, #1
    31e6:	e06b      	b.n	32c0 <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    31e8:	687b      	ldr	r3, [r7, #4]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d104      	bne.n	31f8 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    31ee:	f001 fc49 	bl	4a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    31f2:	f04f 0300 	mov.w	r3, #0
    31f6:	e063      	b.n	32c0 <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
    31f8:	69fb      	ldr	r3, [r7, #28]
    31fa:	2b00      	cmp	r3, #0
    31fc:	d107      	bne.n	320e <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    31fe:	f107 0310 	add.w	r3, r7, #16
    3202:	4618      	mov	r0, r3
    3204:	f001 f8f0 	bl	43e8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3208:	f04f 0301 	mov.w	r3, #1
    320c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    320e:	f001 fc39 	bl	4a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3212:	f000 fe07 	bl	3e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3216:	f001 fc1f 	bl	4a58 <vPortEnterCritical>
    321a:	68fb      	ldr	r3, [r7, #12]
    321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    321e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3222:	d103      	bne.n	322c <xQueueGenericReceive+0xe8>
    3224:	68fb      	ldr	r3, [r7, #12]
    3226:	f04f 0200 	mov.w	r2, #0
    322a:	645a      	str	r2, [r3, #68]	; 0x44
    322c:	68fb      	ldr	r3, [r7, #12]
    322e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3230:	f1b3 3fff 	cmp.w	r3, #4294967295
    3234:	d103      	bne.n	323e <xQueueGenericReceive+0xfa>
    3236:	68fb      	ldr	r3, [r7, #12]
    3238:	f04f 0200 	mov.w	r2, #0
    323c:	649a      	str	r2, [r3, #72]	; 0x48
    323e:	f001 fc21 	bl	4a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3242:	f107 0310 	add.w	r3, r7, #16
    3246:	4618      	mov	r0, r3
    3248:	f107 0304 	add.w	r3, r7, #4
    324c:	4619      	mov	r1, r3
    324e:	f001 f8e3 	bl	4418 <xTaskCheckForTimeOut>
    3252:	4603      	mov	r3, r0
    3254:	2b00      	cmp	r3, #0
    3256:	d12c      	bne.n	32b2 <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3258:	68f8      	ldr	r0, [r7, #12]
    325a:	f000 f98d 	bl	3578 <prvIsQueueEmpty>
    325e:	4603      	mov	r3, r0
    3260:	2b00      	cmp	r3, #0
    3262:	d020      	beq.n	32a6 <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3264:	68fb      	ldr	r3, [r7, #12]
    3266:	681b      	ldr	r3, [r3, #0]
    3268:	2b00      	cmp	r3, #0
    326a:	d108      	bne.n	327e <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
    326c:	f001 fbf4 	bl	4a58 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3270:	68fb      	ldr	r3, [r7, #12]
    3272:	685b      	ldr	r3, [r3, #4]
    3274:	4618      	mov	r0, r3
    3276:	f001 fab7 	bl	47e8 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    327a:	f001 fc03 	bl	4a84 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    327e:	68fb      	ldr	r3, [r7, #12]
    3280:	f103 0224 	add.w	r2, r3, #36	; 0x24
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	4610      	mov	r0, r2
    3288:	4619      	mov	r1, r3
    328a:	f001 f80f 	bl	42ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    328e:	68f8      	ldr	r0, [r7, #12]
    3290:	f000 f922 	bl	34d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3294:	f000 fdd8 	bl	3e48 <xTaskResumeAll>
    3298:	4603      	mov	r3, r0
    329a:	2b00      	cmp	r3, #0
    329c:	f47f af5d 	bne.w	315a <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
    32a0:	f001 fbce 	bl	4a40 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    32a4:	e759      	b.n	315a <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    32a6:	68f8      	ldr	r0, [r7, #12]
    32a8:	f000 f916 	bl	34d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    32ac:	f000 fdcc 	bl	3e48 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    32b0:	e753      	b.n	315a <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    32b2:	68f8      	ldr	r0, [r7, #12]
    32b4:	f000 f910 	bl	34d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    32b8:	f000 fdc6 	bl	3e48 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    32bc:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    32c0:	4618      	mov	r0, r3
    32c2:	f107 0720 	add.w	r7, r7, #32
    32c6:	46bd      	mov	sp, r7
    32c8:	bd80      	pop	{r7, pc}
    32ca:	bf00      	nop

000032cc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    32cc:	b580      	push	{r7, lr}
    32ce:	b086      	sub	sp, #24
    32d0:	af00      	add	r7, sp, #0
    32d2:	60f8      	str	r0, [r7, #12]
    32d4:	60b9      	str	r1, [r7, #8]
    32d6:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    32d8:	f04f 0300 	mov.w	r3, #0
    32dc:	613b      	str	r3, [r7, #16]
    32de:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    32e2:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    32e6:	68fb      	ldr	r3, [r7, #12]
    32e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32ea:	2b00      	cmp	r3, #0
    32ec:	d02a      	beq.n	3344 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    32ee:	68f8      	ldr	r0, [r7, #12]
    32f0:	68b9      	ldr	r1, [r7, #8]
    32f2:	f000 f8c9 	bl	3488 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    32f6:	68fb      	ldr	r3, [r7, #12]
    32f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32fa:	f103 32ff 	add.w	r2, r3, #4294967295
    32fe:	68fb      	ldr	r3, [r7, #12]
    3300:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3302:	68fb      	ldr	r3, [r7, #12]
    3304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3306:	f1b3 3fff 	cmp.w	r3, #4294967295
    330a:	d111      	bne.n	3330 <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    330c:	68fb      	ldr	r3, [r7, #12]
    330e:	691b      	ldr	r3, [r3, #16]
    3310:	2b00      	cmp	r3, #0
    3312:	d013      	beq.n	333c <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3314:	68fb      	ldr	r3, [r7, #12]
    3316:	f103 0310 	add.w	r3, r3, #16
    331a:	4618      	mov	r0, r3
    331c:	f001 f802 	bl	4324 <xTaskRemoveFromEventList>
    3320:	4603      	mov	r3, r0
    3322:	2b00      	cmp	r3, #0
    3324:	d00a      	beq.n	333c <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	f04f 0201 	mov.w	r2, #1
    332c:	601a      	str	r2, [r3, #0]
    332e:	e005      	b.n	333c <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3330:	68fb      	ldr	r3, [r7, #12]
    3332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3334:	f103 0201 	add.w	r2, r3, #1
    3338:	68fb      	ldr	r3, [r7, #12]
    333a:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    333c:	f04f 0301 	mov.w	r3, #1
    3340:	617b      	str	r3, [r7, #20]
    3342:	e002      	b.n	334a <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
    3344:	f04f 0300 	mov.w	r3, #0
    3348:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    334a:	f04f 0000 	mov.w	r0, #0
    334e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3352:	697b      	ldr	r3, [r7, #20]
}
    3354:	4618      	mov	r0, r3
    3356:	f107 0718 	add.w	r7, r7, #24
    335a:	46bd      	mov	sp, r7
    335c:	bd80      	pop	{r7, pc}
    335e:	bf00      	nop

00003360 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3360:	b580      	push	{r7, lr}
    3362:	b084      	sub	sp, #16
    3364:	af00      	add	r7, sp, #0
    3366:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3368:	f001 fb76 	bl	4a58 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3370:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3372:	f001 fb87 	bl	4a84 <vPortExitCritical>

	return uxReturn;
    3376:	68fb      	ldr	r3, [r7, #12]
}
    3378:	4618      	mov	r0, r3
    337a:	f107 0710 	add.w	r7, r7, #16
    337e:	46bd      	mov	sp, r7
    3380:	bd80      	pop	{r7, pc}
    3382:	bf00      	nop

00003384 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    3384:	b480      	push	{r7}
    3386:	b085      	sub	sp, #20
    3388:	af00      	add	r7, sp, #0
    338a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    338c:	687b      	ldr	r3, [r7, #4]
    338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3390:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    3392:	68fb      	ldr	r3, [r7, #12]
}
    3394:	4618      	mov	r0, r3
    3396:	f107 0714 	add.w	r7, r7, #20
    339a:	46bd      	mov	sp, r7
    339c:	bc80      	pop	{r7}
    339e:	4770      	bx	lr

000033a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    33a0:	b580      	push	{r7, lr}
    33a2:	b082      	sub	sp, #8
    33a4:	af00      	add	r7, sp, #0
    33a6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	681b      	ldr	r3, [r3, #0]
    33ac:	4618      	mov	r0, r3
    33ae:	f001 fc23 	bl	4bf8 <vPortFree>
	vPortFree( pxQueue );
    33b2:	6878      	ldr	r0, [r7, #4]
    33b4:	f001 fc20 	bl	4bf8 <vPortFree>
}
    33b8:	f107 0708 	add.w	r7, r7, #8
    33bc:	46bd      	mov	sp, r7
    33be:	bd80      	pop	{r7, pc}

000033c0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    33c0:	b580      	push	{r7, lr}
    33c2:	b084      	sub	sp, #16
    33c4:	af00      	add	r7, sp, #0
    33c6:	60f8      	str	r0, [r7, #12]
    33c8:	60b9      	str	r1, [r7, #8]
    33ca:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    33cc:	68fb      	ldr	r3, [r7, #12]
    33ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    33d0:	2b00      	cmp	r3, #0
    33d2:	d10d      	bne.n	33f0 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    33d4:	68fb      	ldr	r3, [r7, #12]
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	2b00      	cmp	r3, #0
    33da:	d14a      	bne.n	3472 <prvCopyDataToQueue+0xb2>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    33dc:	68fb      	ldr	r3, [r7, #12]
    33de:	685b      	ldr	r3, [r3, #4]
    33e0:	4618      	mov	r0, r3
    33e2:	f001 fa6d 	bl	48c0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    33e6:	68fb      	ldr	r3, [r7, #12]
    33e8:	f04f 0200 	mov.w	r2, #0
    33ec:	605a      	str	r2, [r3, #4]
    33ee:	e040      	b.n	3472 <prvCopyDataToQueue+0xb2>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    33f0:	687b      	ldr	r3, [r7, #4]
    33f2:	2b00      	cmp	r3, #0
    33f4:	d11b      	bne.n	342e <prvCopyDataToQueue+0x6e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    33f6:	68fb      	ldr	r3, [r7, #12]
    33f8:	6899      	ldr	r1, [r3, #8]
    33fa:	68fb      	ldr	r3, [r7, #12]
    33fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    33fe:	68ba      	ldr	r2, [r7, #8]
    3400:	4608      	mov	r0, r1
    3402:	4611      	mov	r1, r2
    3404:	461a      	mov	r2, r3
    3406:	f002 fa6d 	bl	58e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    340a:	68fb      	ldr	r3, [r7, #12]
    340c:	689a      	ldr	r2, [r3, #8]
    340e:	68fb      	ldr	r3, [r7, #12]
    3410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3412:	18d2      	adds	r2, r2, r3
    3414:	68fb      	ldr	r3, [r7, #12]
    3416:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3418:	68fb      	ldr	r3, [r7, #12]
    341a:	689a      	ldr	r2, [r3, #8]
    341c:	68fb      	ldr	r3, [r7, #12]
    341e:	685b      	ldr	r3, [r3, #4]
    3420:	429a      	cmp	r2, r3
    3422:	d326      	bcc.n	3472 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3424:	68fb      	ldr	r3, [r7, #12]
    3426:	681a      	ldr	r2, [r3, #0]
    3428:	68fb      	ldr	r3, [r7, #12]
    342a:	609a      	str	r2, [r3, #8]
    342c:	e021      	b.n	3472 <prvCopyDataToQueue+0xb2>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    342e:	68fb      	ldr	r3, [r7, #12]
    3430:	68d9      	ldr	r1, [r3, #12]
    3432:	68fb      	ldr	r3, [r7, #12]
    3434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3436:	68ba      	ldr	r2, [r7, #8]
    3438:	4608      	mov	r0, r1
    343a:	4611      	mov	r1, r2
    343c:	461a      	mov	r2, r3
    343e:	f002 fa51 	bl	58e4 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3442:	68fb      	ldr	r3, [r7, #12]
    3444:	68da      	ldr	r2, [r3, #12]
    3446:	68fb      	ldr	r3, [r7, #12]
    3448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    344a:	f1c3 0300 	rsb	r3, r3, #0
    344e:	18d2      	adds	r2, r2, r3
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3454:	68fb      	ldr	r3, [r7, #12]
    3456:	68da      	ldr	r2, [r3, #12]
    3458:	68fb      	ldr	r3, [r7, #12]
    345a:	681b      	ldr	r3, [r3, #0]
    345c:	429a      	cmp	r2, r3
    345e:	d208      	bcs.n	3472 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3460:	68fb      	ldr	r3, [r7, #12]
    3462:	685a      	ldr	r2, [r3, #4]
    3464:	68fb      	ldr	r3, [r7, #12]
    3466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3468:	f1c3 0300 	rsb	r3, r3, #0
    346c:	18d2      	adds	r2, r2, r3
    346e:	68fb      	ldr	r3, [r7, #12]
    3470:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    3472:	68fb      	ldr	r3, [r7, #12]
    3474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3476:	f103 0201 	add.w	r2, r3, #1
    347a:	68fb      	ldr	r3, [r7, #12]
    347c:	639a      	str	r2, [r3, #56]	; 0x38
}
    347e:	f107 0710 	add.w	r7, r7, #16
    3482:	46bd      	mov	sp, r7
    3484:	bd80      	pop	{r7, pc}
    3486:	bf00      	nop

00003488 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    3488:	b580      	push	{r7, lr}
    348a:	b082      	sub	sp, #8
    348c:	af00      	add	r7, sp, #0
    348e:	6078      	str	r0, [r7, #4]
    3490:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	2b00      	cmp	r3, #0
    3498:	d01a      	beq.n	34d0 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    349a:	687b      	ldr	r3, [r7, #4]
    349c:	68da      	ldr	r2, [r3, #12]
    349e:	687b      	ldr	r3, [r7, #4]
    34a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34a2:	18d2      	adds	r2, r2, r3
    34a4:	687b      	ldr	r3, [r7, #4]
    34a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    34a8:	687b      	ldr	r3, [r7, #4]
    34aa:	68da      	ldr	r2, [r3, #12]
    34ac:	687b      	ldr	r3, [r7, #4]
    34ae:	685b      	ldr	r3, [r3, #4]
    34b0:	429a      	cmp	r2, r3
    34b2:	d303      	bcc.n	34bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    34b4:	687b      	ldr	r3, [r7, #4]
    34b6:	681a      	ldr	r2, [r3, #0]
    34b8:	687b      	ldr	r3, [r7, #4]
    34ba:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    34bc:	687b      	ldr	r3, [r7, #4]
    34be:	68da      	ldr	r2, [r3, #12]
    34c0:	687b      	ldr	r3, [r7, #4]
    34c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34c4:	6839      	ldr	r1, [r7, #0]
    34c6:	4608      	mov	r0, r1
    34c8:	4611      	mov	r1, r2
    34ca:	461a      	mov	r2, r3
    34cc:	f002 fa0a 	bl	58e4 <memcpy>
	}
}
    34d0:	f107 0708 	add.w	r7, r7, #8
    34d4:	46bd      	mov	sp, r7
    34d6:	bd80      	pop	{r7, pc}

000034d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    34d8:	b580      	push	{r7, lr}
    34da:	b082      	sub	sp, #8
    34dc:	af00      	add	r7, sp, #0
    34de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    34e0:	f001 faba 	bl	4a58 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    34e4:	e014      	b.n	3510 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34ea:	2b00      	cmp	r3, #0
    34ec:	d015      	beq.n	351a <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	f103 0324 	add.w	r3, r3, #36	; 0x24
    34f4:	4618      	mov	r0, r3
    34f6:	f000 ff15 	bl	4324 <xTaskRemoveFromEventList>
    34fa:	4603      	mov	r3, r0
    34fc:	2b00      	cmp	r3, #0
    34fe:	d001      	beq.n	3504 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3500:	f000 ffdc 	bl	44bc <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3508:	f103 32ff 	add.w	r2, r3, #4294967295
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3514:	2b00      	cmp	r3, #0
    3516:	dce6      	bgt.n	34e6 <prvUnlockQueue+0xe>
    3518:	e000      	b.n	351c <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
    351a:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	f04f 32ff 	mov.w	r2, #4294967295
    3522:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    3524:	f001 faae 	bl	4a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3528:	f001 fa96 	bl	4a58 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    352c:	e014      	b.n	3558 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	691b      	ldr	r3, [r3, #16]
    3532:	2b00      	cmp	r3, #0
    3534:	d015      	beq.n	3562 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3536:	687b      	ldr	r3, [r7, #4]
    3538:	f103 0310 	add.w	r3, r3, #16
    353c:	4618      	mov	r0, r3
    353e:	f000 fef1 	bl	4324 <xTaskRemoveFromEventList>
    3542:	4603      	mov	r3, r0
    3544:	2b00      	cmp	r3, #0
    3546:	d001      	beq.n	354c <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
    3548:	f000 ffb8 	bl	44bc <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    354c:	687b      	ldr	r3, [r7, #4]
    354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3550:	f103 32ff 	add.w	r2, r3, #4294967295
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    355c:	2b00      	cmp	r3, #0
    355e:	dce6      	bgt.n	352e <prvUnlockQueue+0x56>
    3560:	e000      	b.n	3564 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    3562:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3564:	687b      	ldr	r3, [r7, #4]
    3566:	f04f 32ff 	mov.w	r2, #4294967295
    356a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    356c:	f001 fa8a 	bl	4a84 <vPortExitCritical>
}
    3570:	f107 0708 	add.w	r7, r7, #8
    3574:	46bd      	mov	sp, r7
    3576:	bd80      	pop	{r7, pc}

00003578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    3578:	b580      	push	{r7, lr}
    357a:	b084      	sub	sp, #16
    357c:	af00      	add	r7, sp, #0
    357e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3580:	f001 fa6a 	bl	4a58 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3588:	2b00      	cmp	r3, #0
    358a:	bf14      	ite	ne
    358c:	2300      	movne	r3, #0
    358e:	2301      	moveq	r3, #1
    3590:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3592:	f001 fa77 	bl	4a84 <vPortExitCritical>

	return xReturn;
    3596:	68fb      	ldr	r3, [r7, #12]
}
    3598:	4618      	mov	r0, r3
    359a:	f107 0710 	add.w	r7, r7, #16
    359e:	46bd      	mov	sp, r7
    35a0:	bd80      	pop	{r7, pc}
    35a2:	bf00      	nop

000035a4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    35a4:	b480      	push	{r7}
    35a6:	b085      	sub	sp, #20
    35a8:	af00      	add	r7, sp, #0
    35aa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    35ac:	687b      	ldr	r3, [r7, #4]
    35ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    35b0:	2b00      	cmp	r3, #0
    35b2:	bf14      	ite	ne
    35b4:	2300      	movne	r3, #0
    35b6:	2301      	moveq	r3, #1
    35b8:	60fb      	str	r3, [r7, #12]

	return xReturn;
    35ba:	68fb      	ldr	r3, [r7, #12]
}
    35bc:	4618      	mov	r0, r3
    35be:	f107 0714 	add.w	r7, r7, #20
    35c2:	46bd      	mov	sp, r7
    35c4:	bc80      	pop	{r7}
    35c6:	4770      	bx	lr

000035c8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    35c8:	b580      	push	{r7, lr}
    35ca:	b084      	sub	sp, #16
    35cc:	af00      	add	r7, sp, #0
    35ce:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    35d0:	f001 fa42 	bl	4a58 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    35d4:	687b      	ldr	r3, [r7, #4]
    35d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    35d8:	687b      	ldr	r3, [r7, #4]
    35da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    35dc:	429a      	cmp	r2, r3
    35de:	bf14      	ite	ne
    35e0:	2300      	movne	r3, #0
    35e2:	2301      	moveq	r3, #1
    35e4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    35e6:	f001 fa4d 	bl	4a84 <vPortExitCritical>

	return xReturn;
    35ea:	68fb      	ldr	r3, [r7, #12]
}
    35ec:	4618      	mov	r0, r3
    35ee:	f107 0710 	add.w	r7, r7, #16
    35f2:	46bd      	mov	sp, r7
    35f4:	bd80      	pop	{r7, pc}
    35f6:	bf00      	nop

000035f8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    35f8:	b480      	push	{r7}
    35fa:	b085      	sub	sp, #20
    35fc:	af00      	add	r7, sp, #0
    35fe:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3600:	687b      	ldr	r3, [r7, #4]
    3602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3608:	429a      	cmp	r2, r3
    360a:	bf14      	ite	ne
    360c:	2300      	movne	r3, #0
    360e:	2301      	moveq	r3, #1
    3610:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3612:	68fb      	ldr	r3, [r7, #12]
}
    3614:	4618      	mov	r0, r3
    3616:	f107 0714 	add.w	r7, r7, #20
    361a:	46bd      	mov	sp, r7
    361c:	bc80      	pop	{r7}
    361e:	4770      	bx	lr

00003620 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3620:	b580      	push	{r7, lr}
    3622:	b08a      	sub	sp, #40	; 0x28
    3624:	af02      	add	r7, sp, #8
    3626:	60f8      	str	r0, [r7, #12]
    3628:	60b9      	str	r1, [r7, #8]
    362a:	603b      	str	r3, [r7, #0]
    362c:	4613      	mov	r3, r2
    362e:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3630:	88fb      	ldrh	r3, [r7, #6]
    3632:	4618      	mov	r0, r3
    3634:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3636:	f001 f87f 	bl	4738 <prvAllocateTCBAndStack>
    363a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    363c:	69bb      	ldr	r3, [r7, #24]
    363e:	2b00      	cmp	r3, #0
    3640:	f000 80a8 	beq.w	3794 <xTaskGenericCreate+0x174>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3644:	69bb      	ldr	r3, [r7, #24]
    3646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    3648:	88fb      	ldrh	r3, [r7, #6]
    364a:	f103 33ff 	add.w	r3, r3, #4294967295
    364e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3652:	18d3      	adds	r3, r2, r3
    3654:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    3656:	697b      	ldr	r3, [r7, #20]
    3658:	f023 0307 	bic.w	r3, r3, #7
    365c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    365e:	88fb      	ldrh	r3, [r7, #6]
    3660:	9300      	str	r3, [sp, #0]
    3662:	69b8      	ldr	r0, [r7, #24]
    3664:	68b9      	ldr	r1, [r7, #8]
    3666:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    366a:	f000 ff45 	bl	44f8 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    366e:	6978      	ldr	r0, [r7, #20]
    3670:	68f9      	ldr	r1, [r7, #12]
    3672:	683a      	ldr	r2, [r7, #0]
    3674:	f001 f96c 	bl	4950 <pxPortInitialiseStack>
    3678:	4602      	mov	r2, r0
    367a:	69bb      	ldr	r3, [r7, #24]
    367c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3680:	2b00      	cmp	r3, #0
    3682:	d002      	beq.n	368a <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3686:	69ba      	ldr	r2, [r7, #24]
    3688:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    368a:	f001 f9e5 	bl	4a58 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    368e:	f240 1388 	movw	r3, #392	; 0x188
    3692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	f103 0201 	add.w	r2, r3, #1
    369c:	f240 1388 	movw	r3, #392	; 0x188
    36a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36a4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    36a6:	f240 03b0 	movw	r3, #176	; 0xb0
    36aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	2b00      	cmp	r3, #0
    36b2:	d10f      	bne.n	36d4 <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    36b4:	f240 03b0 	movw	r3, #176	; 0xb0
    36b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36bc:	69ba      	ldr	r2, [r7, #24]
    36be:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    36c0:	f240 1388 	movw	r3, #392	; 0x188
    36c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36c8:	681b      	ldr	r3, [r3, #0]
    36ca:	2b01      	cmp	r3, #1
    36cc:	d118      	bne.n	3700 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    36ce:	f000 ff4f 	bl	4570 <prvInitialiseTaskLists>
    36d2:	e015      	b.n	3700 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    36d4:	f240 1398 	movw	r3, #408	; 0x198
    36d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36dc:	681b      	ldr	r3, [r3, #0]
    36de:	2b00      	cmp	r3, #0
    36e0:	d10e      	bne.n	3700 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    36e2:	f240 03b0 	movw	r3, #176	; 0xb0
    36e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ea:	681b      	ldr	r3, [r3, #0]
    36ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    36ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36f0:	429a      	cmp	r2, r3
    36f2:	d805      	bhi.n	3700 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
    36f4:	f240 03b0 	movw	r3, #176	; 0xb0
    36f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36fc:	69ba      	ldr	r2, [r7, #24]
    36fe:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3700:	69bb      	ldr	r3, [r7, #24]
    3702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3704:	f240 1390 	movw	r3, #400	; 0x190
    3708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	429a      	cmp	r2, r3
    3710:	d906      	bls.n	3720 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3712:	69bb      	ldr	r3, [r7, #24]
    3714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3716:	f240 1390 	movw	r3, #400	; 0x190
    371a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    371e:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3720:	f240 13ac 	movw	r3, #428	; 0x1ac
    3724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3728:	681b      	ldr	r3, [r3, #0]
    372a:	f103 0201 	add.w	r2, r3, #1
    372e:	f240 13ac 	movw	r3, #428	; 0x1ac
    3732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3736:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    3738:	69bb      	ldr	r3, [r7, #24]
    373a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    373c:	f240 1394 	movw	r3, #404	; 0x194
    3740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	429a      	cmp	r2, r3
    3748:	d906      	bls.n	3758 <xTaskGenericCreate+0x138>
    374a:	69bb      	ldr	r3, [r7, #24]
    374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    374e:	f240 1394 	movw	r3, #404	; 0x194
    3752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3756:	601a      	str	r2, [r3, #0]
    3758:	69bb      	ldr	r3, [r7, #24]
    375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    375c:	4613      	mov	r3, r2
    375e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3762:	189b      	adds	r3, r3, r2
    3764:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3768:	461a      	mov	r2, r3
    376a:	f240 03b4 	movw	r3, #180	; 0xb4
    376e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3772:	18d2      	adds	r2, r2, r3
    3774:	69bb      	ldr	r3, [r7, #24]
    3776:	f103 0304 	add.w	r3, r3, #4
    377a:	4610      	mov	r0, r2
    377c:	4619      	mov	r1, r3
    377e:	f7ff fa83 	bl	2c88 <vListInsertEnd>

			xReturn = pdPASS;
    3782:	f04f 0301 	mov.w	r3, #1
    3786:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    3788:	69b8      	ldr	r0, [r7, #24]
    378a:	f001 fdcd 	bl	5328 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    378e:	f001 f979 	bl	4a84 <vPortExitCritical>
    3792:	e002      	b.n	379a <xTaskGenericCreate+0x17a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3794:	f04f 33ff 	mov.w	r3, #4294967295
    3798:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    379a:	69fb      	ldr	r3, [r7, #28]
    379c:	2b01      	cmp	r3, #1
    379e:	d111      	bne.n	37c4 <xTaskGenericCreate+0x1a4>
	{
		if( xSchedulerRunning != pdFALSE )
    37a0:	f240 1398 	movw	r3, #408	; 0x198
    37a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37a8:	681b      	ldr	r3, [r3, #0]
    37aa:	2b00      	cmp	r3, #0
    37ac:	d00a      	beq.n	37c4 <xTaskGenericCreate+0x1a4>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    37ae:	f240 03b0 	movw	r3, #176	; 0xb0
    37b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37bc:	429a      	cmp	r2, r3
    37be:	d201      	bcs.n	37c4 <xTaskGenericCreate+0x1a4>
			{
				portYIELD_WITHIN_API();
    37c0:	f001 f93e 	bl	4a40 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    37c4:	69fb      	ldr	r3, [r7, #28]
}
    37c6:	4618      	mov	r0, r3
    37c8:	f107 0720 	add.w	r7, r7, #32
    37cc:	46bd      	mov	sp, r7
    37ce:	bd80      	pop	{r7, pc}

000037d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    37d0:	b580      	push	{r7, lr}
    37d2:	b084      	sub	sp, #16
    37d4:	af00      	add	r7, sp, #0
    37d6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    37d8:	f001 f93e 	bl	4a58 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    37dc:	f240 03b0 	movw	r3, #176	; 0xb0
    37e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37e4:	681b      	ldr	r3, [r3, #0]
    37e6:	687a      	ldr	r2, [r7, #4]
    37e8:	429a      	cmp	r2, r3
    37ea:	d102      	bne.n	37f2 <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
    37ec:	f04f 0300 	mov.w	r3, #0
    37f0:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	2b00      	cmp	r3, #0
    37f6:	d105      	bne.n	3804 <vTaskDelete+0x34>
    37f8:	f240 03b0 	movw	r3, #176	; 0xb0
    37fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3800:	681b      	ldr	r3, [r3, #0]
    3802:	e000      	b.n	3806 <vTaskDelete+0x36>
    3804:	687b      	ldr	r3, [r7, #4]
    3806:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3808:	68fb      	ldr	r3, [r7, #12]
    380a:	f103 0304 	add.w	r3, r3, #4
    380e:	4618      	mov	r0, r3
    3810:	f7ff fa9c 	bl	2d4c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3814:	68fb      	ldr	r3, [r7, #12]
    3816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3818:	2b00      	cmp	r3, #0
    381a:	d005      	beq.n	3828 <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    381c:	68fb      	ldr	r3, [r7, #12]
    381e:	f103 0318 	add.w	r3, r3, #24
    3822:	4618      	mov	r0, r3
    3824:	f7ff fa92 	bl	2d4c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	f103 0304 	add.w	r3, r3, #4
    382e:	f240 105c 	movw	r0, #348	; 0x15c
    3832:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3836:	4619      	mov	r1, r3
    3838:	f7ff fa26 	bl	2c88 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    383c:	f240 1370 	movw	r3, #368	; 0x170
    3840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3844:	681b      	ldr	r3, [r3, #0]
    3846:	f103 0201 	add.w	r2, r3, #1
    384a:	f240 1370 	movw	r3, #368	; 0x170
    384e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3852:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3854:	f240 13ac 	movw	r3, #428	; 0x1ac
    3858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	f103 0201 	add.w	r2, r3, #1
    3862:	f240 13ac 	movw	r3, #428	; 0x1ac
    3866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    386a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    386c:	f001 f90a 	bl	4a84 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3870:	f240 1398 	movw	r3, #408	; 0x198
    3874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3878:	681b      	ldr	r3, [r3, #0]
    387a:	2b00      	cmp	r3, #0
    387c:	d004      	beq.n	3888 <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	2b00      	cmp	r3, #0
    3882:	d101      	bne.n	3888 <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
    3884:	f001 f8dc 	bl	4a40 <vPortYieldFromISR>
			}
		}
	}
    3888:	f107 0710 	add.w	r7, r7, #16
    388c:	46bd      	mov	sp, r7
    388e:	bd80      	pop	{r7, pc}

00003890 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3890:	b580      	push	{r7, lr}
    3892:	b086      	sub	sp, #24
    3894:	af00      	add	r7, sp, #0
    3896:	6078      	str	r0, [r7, #4]
    3898:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    389a:	f04f 0300 	mov.w	r3, #0
    389e:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    38a0:	f000 fac0 	bl	3e24 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	681a      	ldr	r2, [r3, #0]
    38a8:	683b      	ldr	r3, [r7, #0]
    38aa:	18d3      	adds	r3, r2, r3
    38ac:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    38ae:	687b      	ldr	r3, [r7, #4]
    38b0:	681a      	ldr	r2, [r3, #0]
    38b2:	f240 138c 	movw	r3, #396	; 0x18c
    38b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ba:	681b      	ldr	r3, [r3, #0]
    38bc:	429a      	cmp	r2, r3
    38be:	d910      	bls.n	38e2 <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    38c0:	687b      	ldr	r3, [r7, #4]
    38c2:	681a      	ldr	r2, [r3, #0]
    38c4:	693b      	ldr	r3, [r7, #16]
    38c6:	429a      	cmp	r2, r3
    38c8:	d91b      	bls.n	3902 <vTaskDelayUntil+0x72>
    38ca:	f240 138c 	movw	r3, #396	; 0x18c
    38ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38d2:	681b      	ldr	r3, [r3, #0]
    38d4:	693a      	ldr	r2, [r7, #16]
    38d6:	429a      	cmp	r2, r3
    38d8:	d913      	bls.n	3902 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    38da:	f04f 0301 	mov.w	r3, #1
    38de:	617b      	str	r3, [r7, #20]
    38e0:	e00f      	b.n	3902 <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    38e2:	687b      	ldr	r3, [r7, #4]
    38e4:	681a      	ldr	r2, [r3, #0]
    38e6:	693b      	ldr	r3, [r7, #16]
    38e8:	429a      	cmp	r2, r3
    38ea:	d807      	bhi.n	38fc <vTaskDelayUntil+0x6c>
    38ec:	f240 138c 	movw	r3, #396	; 0x18c
    38f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38f4:	681b      	ldr	r3, [r3, #0]
    38f6:	693a      	ldr	r2, [r7, #16]
    38f8:	429a      	cmp	r2, r3
    38fa:	d902      	bls.n	3902 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    38fc:	f04f 0301 	mov.w	r3, #1
    3900:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	693a      	ldr	r2, [r7, #16]
    3906:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    3908:	697b      	ldr	r3, [r7, #20]
    390a:	2b00      	cmp	r3, #0
    390c:	d00c      	beq.n	3928 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    390e:	f240 03b0 	movw	r3, #176	; 0xb0
    3912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3916:	681b      	ldr	r3, [r3, #0]
    3918:	f103 0304 	add.w	r3, r3, #4
    391c:	4618      	mov	r0, r3
    391e:	f7ff fa15 	bl	2d4c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3922:	6938      	ldr	r0, [r7, #16]
    3924:	f000 fec2 	bl	46ac <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3928:	f000 fa8e 	bl	3e48 <xTaskResumeAll>
    392c:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    392e:	68fb      	ldr	r3, [r7, #12]
    3930:	2b00      	cmp	r3, #0
    3932:	d101      	bne.n	3938 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    3934:	f001 f884 	bl	4a40 <vPortYieldFromISR>
		}
	}
    3938:	f107 0718 	add.w	r7, r7, #24
    393c:	46bd      	mov	sp, r7
    393e:	bd80      	pop	{r7, pc}

00003940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3940:	b580      	push	{r7, lr}
    3942:	b084      	sub	sp, #16
    3944:	af00      	add	r7, sp, #0
    3946:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3948:	f04f 0300 	mov.w	r3, #0
    394c:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    394e:	687b      	ldr	r3, [r7, #4]
    3950:	2b00      	cmp	r3, #0
    3952:	d019      	beq.n	3988 <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
    3954:	f000 fa66 	bl	3e24 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3958:	f240 138c 	movw	r3, #396	; 0x18c
    395c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3960:	681a      	ldr	r2, [r3, #0]
    3962:	687b      	ldr	r3, [r7, #4]
    3964:	18d3      	adds	r3, r2, r3
    3966:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3968:	f240 03b0 	movw	r3, #176	; 0xb0
    396c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3970:	681b      	ldr	r3, [r3, #0]
    3972:	f103 0304 	add.w	r3, r3, #4
    3976:	4618      	mov	r0, r3
    3978:	f7ff f9e8 	bl	2d4c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    397c:	68b8      	ldr	r0, [r7, #8]
    397e:	f000 fe95 	bl	46ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3982:	f000 fa61 	bl	3e48 <xTaskResumeAll>
    3986:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3988:	68fb      	ldr	r3, [r7, #12]
    398a:	2b00      	cmp	r3, #0
    398c:	d101      	bne.n	3992 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    398e:	f001 f857 	bl	4a40 <vPortYieldFromISR>
		}
	}
    3992:	f107 0710 	add.w	r7, r7, #16
    3996:	46bd      	mov	sp, r7
    3998:	bd80      	pop	{r7, pc}
    399a:	bf00      	nop

0000399c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    399c:	b580      	push	{r7, lr}
    399e:	b084      	sub	sp, #16
    39a0:	af00      	add	r7, sp, #0
    39a2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    39a4:	f001 f858 	bl	4a58 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    39a8:	687b      	ldr	r3, [r7, #4]
    39aa:	2b00      	cmp	r3, #0
    39ac:	d105      	bne.n	39ba <uxTaskPriorityGet+0x1e>
    39ae:	f240 03b0 	movw	r3, #176	; 0xb0
    39b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39b6:	681b      	ldr	r3, [r3, #0]
    39b8:	e000      	b.n	39bc <uxTaskPriorityGet+0x20>
    39ba:	687b      	ldr	r3, [r7, #4]
    39bc:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    39be:	68fb      	ldr	r3, [r7, #12]
    39c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    39c2:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    39c4:	f001 f85e 	bl	4a84 <vPortExitCritical>

		return uxReturn;
    39c8:	68bb      	ldr	r3, [r7, #8]
	}
    39ca:	4618      	mov	r0, r3
    39cc:	f107 0710 	add.w	r7, r7, #16
    39d0:	46bd      	mov	sp, r7
    39d2:	bd80      	pop	{r7, pc}

000039d4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    39d4:	b580      	push	{r7, lr}
    39d6:	b086      	sub	sp, #24
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
    39dc:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    39de:	f04f 0300 	mov.w	r3, #0
    39e2:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    39e4:	683b      	ldr	r3, [r7, #0]
    39e6:	2b04      	cmp	r3, #4
    39e8:	d902      	bls.n	39f0 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    39ea:	f04f 0304 	mov.w	r3, #4
    39ee:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    39f0:	f001 f832 	bl	4a58 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    39f4:	f240 03b0 	movw	r3, #176	; 0xb0
    39f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39fc:	681b      	ldr	r3, [r3, #0]
    39fe:	687a      	ldr	r2, [r7, #4]
    3a00:	429a      	cmp	r2, r3
    3a02:	d102      	bne.n	3a0a <vTaskPrioritySet+0x36>
			{
				pxTask = NULL;
    3a04:	f04f 0300 	mov.w	r3, #0
    3a08:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	2b00      	cmp	r3, #0
    3a0e:	d105      	bne.n	3a1c <vTaskPrioritySet+0x48>
    3a10:	f240 03b0 	movw	r3, #176	; 0xb0
    3a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	e000      	b.n	3a1e <vTaskPrioritySet+0x4a>
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3a20:	693b      	ldr	r3, [r7, #16]
    3a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3a24:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3a26:	68fa      	ldr	r2, [r7, #12]
    3a28:	683b      	ldr	r3, [r7, #0]
    3a2a:	429a      	cmp	r2, r3
    3a2c:	d062      	beq.n	3af4 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3a2e:	683a      	ldr	r2, [r7, #0]
    3a30:	68fb      	ldr	r3, [r7, #12]
    3a32:	429a      	cmp	r2, r3
    3a34:	d906      	bls.n	3a44 <vTaskPrioritySet+0x70>
				{
					if( pxTask != NULL )
    3a36:	687b      	ldr	r3, [r7, #4]
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d009      	beq.n	3a50 <vTaskPrioritySet+0x7c>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3a3c:	f04f 0301 	mov.w	r3, #1
    3a40:	617b      	str	r3, [r7, #20]
    3a42:	e005      	b.n	3a50 <vTaskPrioritySet+0x7c>
					}
				}
				else if( pxTask == NULL )
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d102      	bne.n	3a50 <vTaskPrioritySet+0x7c>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3a4a:	f04f 0301 	mov.w	r3, #1
    3a4e:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3a50:	693b      	ldr	r3, [r7, #16]
    3a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    3a54:	693b      	ldr	r3, [r7, #16]
    3a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a58:	429a      	cmp	r2, r3
    3a5a:	d102      	bne.n	3a62 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
    3a5c:	693b      	ldr	r3, [r7, #16]
    3a5e:	683a      	ldr	r2, [r7, #0]
    3a60:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3a62:	693b      	ldr	r3, [r7, #16]
    3a64:	683a      	ldr	r2, [r7, #0]
    3a66:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3a68:	683b      	ldr	r3, [r7, #0]
    3a6a:	f1c3 0205 	rsb	r2, r3, #5
    3a6e:	693b      	ldr	r3, [r7, #16]
    3a70:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3a72:	693b      	ldr	r3, [r7, #16]
    3a74:	6959      	ldr	r1, [r3, #20]
    3a76:	68fa      	ldr	r2, [r7, #12]
    3a78:	4613      	mov	r3, r2
    3a7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3a7e:	189b      	adds	r3, r3, r2
    3a80:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3a84:	461a      	mov	r2, r3
    3a86:	f240 03b4 	movw	r3, #180	; 0xb4
    3a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a8e:	18d3      	adds	r3, r2, r3
    3a90:	4299      	cmp	r1, r3
    3a92:	d12a      	bne.n	3aea <vTaskPrioritySet+0x116>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3a94:	693b      	ldr	r3, [r7, #16]
    3a96:	f103 0304 	add.w	r3, r3, #4
    3a9a:	4618      	mov	r0, r3
    3a9c:	f7ff f956 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3aa0:	693b      	ldr	r3, [r7, #16]
    3aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3aa4:	f240 1394 	movw	r3, #404	; 0x194
    3aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aac:	681b      	ldr	r3, [r3, #0]
    3aae:	429a      	cmp	r2, r3
    3ab0:	d906      	bls.n	3ac0 <vTaskPrioritySet+0xec>
    3ab2:	693b      	ldr	r3, [r7, #16]
    3ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ab6:	f240 1394 	movw	r3, #404	; 0x194
    3aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3abe:	601a      	str	r2, [r3, #0]
    3ac0:	693b      	ldr	r3, [r7, #16]
    3ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ac4:	4613      	mov	r3, r2
    3ac6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3aca:	189b      	adds	r3, r3, r2
    3acc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3ad0:	461a      	mov	r2, r3
    3ad2:	f240 03b4 	movw	r3, #180	; 0xb4
    3ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ada:	18d2      	adds	r2, r2, r3
    3adc:	693b      	ldr	r3, [r7, #16]
    3ade:	f103 0304 	add.w	r3, r3, #4
    3ae2:	4610      	mov	r0, r2
    3ae4:	4619      	mov	r1, r3
    3ae6:	f7ff f8cf 	bl	2c88 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    3aea:	697b      	ldr	r3, [r7, #20]
    3aec:	2b01      	cmp	r3, #1
    3aee:	d101      	bne.n	3af4 <vTaskPrioritySet+0x120>
				{
					portYIELD_WITHIN_API();
    3af0:	f000 ffa6 	bl	4a40 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    3af4:	f000 ffc6 	bl	4a84 <vPortExitCritical>
	}
    3af8:	f107 0718 	add.w	r7, r7, #24
    3afc:	46bd      	mov	sp, r7
    3afe:	bd80      	pop	{r7, pc}

00003b00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    3b00:	b580      	push	{r7, lr}
    3b02:	b084      	sub	sp, #16
    3b04:	af00      	add	r7, sp, #0
    3b06:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3b08:	f000 ffa6 	bl	4a58 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    3b0c:	f240 03b0 	movw	r3, #176	; 0xb0
    3b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b14:	681b      	ldr	r3, [r3, #0]
    3b16:	687a      	ldr	r2, [r7, #4]
    3b18:	429a      	cmp	r2, r3
    3b1a:	d102      	bne.n	3b22 <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
    3b1c:	f04f 0300 	mov.w	r3, #0
    3b20:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3b22:	687b      	ldr	r3, [r7, #4]
    3b24:	2b00      	cmp	r3, #0
    3b26:	d105      	bne.n	3b34 <vTaskSuspend+0x34>
    3b28:	f240 03b0 	movw	r3, #176	; 0xb0
    3b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b30:	681b      	ldr	r3, [r3, #0]
    3b32:	e000      	b.n	3b36 <vTaskSuspend+0x36>
    3b34:	687b      	ldr	r3, [r7, #4]
    3b36:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3b38:	68fb      	ldr	r3, [r7, #12]
    3b3a:	f103 0304 	add.w	r3, r3, #4
    3b3e:	4618      	mov	r0, r3
    3b40:	f7ff f904 	bl	2d4c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3b44:	68fb      	ldr	r3, [r7, #12]
    3b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b48:	2b00      	cmp	r3, #0
    3b4a:	d005      	beq.n	3b58 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3b4c:	68fb      	ldr	r3, [r7, #12]
    3b4e:	f103 0318 	add.w	r3, r3, #24
    3b52:	4618      	mov	r0, r3
    3b54:	f7ff f8fa 	bl	2d4c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3b58:	68fb      	ldr	r3, [r7, #12]
    3b5a:	f103 0304 	add.w	r3, r3, #4
    3b5e:	f240 1074 	movw	r0, #372	; 0x174
    3b62:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3b66:	4619      	mov	r1, r3
    3b68:	f7ff f88e 	bl	2c88 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3b6c:	f000 ff8a 	bl	4a84 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3b70:	687b      	ldr	r3, [r7, #4]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d11f      	bne.n	3bb6 <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
    3b76:	f240 1398 	movw	r3, #408	; 0x198
    3b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b7e:	681b      	ldr	r3, [r3, #0]
    3b80:	2b00      	cmp	r3, #0
    3b82:	d002      	beq.n	3b8a <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3b84:	f000 ff5c 	bl	4a40 <vPortYieldFromISR>
    3b88:	e015      	b.n	3bb6 <vTaskSuspend+0xb6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3b8a:	f240 1374 	movw	r3, #372	; 0x174
    3b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b92:	681a      	ldr	r2, [r3, #0]
    3b94:	f240 1388 	movw	r3, #392	; 0x188
    3b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b9c:	681b      	ldr	r3, [r3, #0]
    3b9e:	429a      	cmp	r2, r3
    3ba0:	d107      	bne.n	3bb2 <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3ba2:	f240 03b0 	movw	r3, #176	; 0xb0
    3ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3baa:	f04f 0200 	mov.w	r2, #0
    3bae:	601a      	str	r2, [r3, #0]
    3bb0:	e001      	b.n	3bb6 <vTaskSuspend+0xb6>
				}
				else
				{
					vTaskSwitchContext();
    3bb2:	f000 fb15 	bl	41e0 <vTaskSwitchContext>
				}
			}
		}
	}
    3bb6:	f107 0710 	add.w	r7, r7, #16
    3bba:	46bd      	mov	sp, r7
    3bbc:	bd80      	pop	{r7, pc}
    3bbe:	bf00      	nop

00003bc0 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3bc0:	b480      	push	{r7}
    3bc2:	b085      	sub	sp, #20
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    3bc8:	f04f 0300 	mov.w	r3, #0
    3bcc:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    3bce:	687b      	ldr	r3, [r7, #4]
    3bd0:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3bd2:	68bb      	ldr	r3, [r7, #8]
    3bd4:	695a      	ldr	r2, [r3, #20]
    3bd6:	f240 1374 	movw	r3, #372	; 0x174
    3bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bde:	429a      	cmp	r2, r3
    3be0:	d10e      	bne.n	3c00 <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3be2:	68bb      	ldr	r3, [r7, #8]
    3be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3be6:	f240 1348 	movw	r3, #328	; 0x148
    3bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bee:	429a      	cmp	r2, r3
    3bf0:	d006      	beq.n	3c00 <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3bf2:	68bb      	ldr	r3, [r7, #8]
    3bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d102      	bne.n	3c00 <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
    3bfa:	f04f 0301 	mov.w	r3, #1
    3bfe:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    3c00:	68fb      	ldr	r3, [r7, #12]
	}
    3c02:	4618      	mov	r0, r3
    3c04:	f107 0714 	add.w	r7, r7, #20
    3c08:	46bd      	mov	sp, r7
    3c0a:	bc80      	pop	{r7}
    3c0c:	4770      	bx	lr
    3c0e:	bf00      	nop

00003c10 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    3c10:	b580      	push	{r7, lr}
    3c12:	b084      	sub	sp, #16
    3c14:	af00      	add	r7, sp, #0
    3c16:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    3c18:	687b      	ldr	r3, [r7, #4]
    3c1a:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3c1c:	68fb      	ldr	r3, [r7, #12]
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d048      	beq.n	3cb4 <vTaskResume+0xa4>
    3c22:	f240 03b0 	movw	r3, #176	; 0xb0
    3c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c2a:	681b      	ldr	r3, [r3, #0]
    3c2c:	68fa      	ldr	r2, [r7, #12]
    3c2e:	429a      	cmp	r2, r3
    3c30:	d040      	beq.n	3cb4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
    3c32:	f000 ff11 	bl	4a58 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3c36:	68f8      	ldr	r0, [r7, #12]
    3c38:	f7ff ffc2 	bl	3bc0 <xTaskIsTaskSuspended>
    3c3c:	4603      	mov	r3, r0
    3c3e:	2b01      	cmp	r3, #1
    3c40:	d136      	bne.n	3cb0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3c42:	68fb      	ldr	r3, [r7, #12]
    3c44:	f103 0304 	add.w	r3, r3, #4
    3c48:	4618      	mov	r0, r3
    3c4a:	f7ff f87f 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3c4e:	68fb      	ldr	r3, [r7, #12]
    3c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3c52:	f240 1394 	movw	r3, #404	; 0x194
    3c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c5a:	681b      	ldr	r3, [r3, #0]
    3c5c:	429a      	cmp	r2, r3
    3c5e:	d906      	bls.n	3c6e <vTaskResume+0x5e>
    3c60:	68fb      	ldr	r3, [r7, #12]
    3c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3c64:	f240 1394 	movw	r3, #404	; 0x194
    3c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c6c:	601a      	str	r2, [r3, #0]
    3c6e:	68fb      	ldr	r3, [r7, #12]
    3c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3c72:	4613      	mov	r3, r2
    3c74:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3c78:	189b      	adds	r3, r3, r2
    3c7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3c7e:	461a      	mov	r2, r3
    3c80:	f240 03b4 	movw	r3, #180	; 0xb4
    3c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c88:	18d2      	adds	r2, r2, r3
    3c8a:	68fb      	ldr	r3, [r7, #12]
    3c8c:	f103 0304 	add.w	r3, r3, #4
    3c90:	4610      	mov	r0, r2
    3c92:	4619      	mov	r1, r3
    3c94:	f7fe fff8 	bl	2c88 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3c98:	68fb      	ldr	r3, [r7, #12]
    3c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3c9c:	f240 03b0 	movw	r3, #176	; 0xb0
    3ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca4:	681b      	ldr	r3, [r3, #0]
    3ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ca8:	429a      	cmp	r2, r3
    3caa:	d301      	bcc.n	3cb0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    3cac:	f000 fec8 	bl	4a40 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    3cb0:	f000 fee8 	bl	4a84 <vPortExitCritical>
		}
	}
    3cb4:	f107 0710 	add.w	r7, r7, #16
    3cb8:	46bd      	mov	sp, r7
    3cba:	bd80      	pop	{r7, pc}

00003cbc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b086      	sub	sp, #24
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3cc4:	f04f 0300 	mov.w	r3, #0
    3cc8:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3cce:	f04f 0300 	mov.w	r3, #0
    3cd2:	60fb      	str	r3, [r7, #12]
    3cd4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3cd8:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3cdc:	6938      	ldr	r0, [r7, #16]
    3cde:	f7ff ff6f 	bl	3bc0 <xTaskIsTaskSuspended>
    3ce2:	4603      	mov	r3, r0
    3ce4:	2b01      	cmp	r3, #1
    3ce6:	d149      	bne.n	3d7c <xTaskResumeFromISR+0xc0>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3ce8:	f240 139c 	movw	r3, #412	; 0x19c
    3cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf0:	681b      	ldr	r3, [r3, #0]
    3cf2:	2b00      	cmp	r3, #0
    3cf4:	d138      	bne.n	3d68 <xTaskResumeFromISR+0xac>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    3cf6:	693b      	ldr	r3, [r7, #16]
    3cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cfa:	f240 03b0 	movw	r3, #176	; 0xb0
    3cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d02:	681b      	ldr	r3, [r3, #0]
    3d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d06:	429a      	cmp	r2, r3
    3d08:	bf34      	ite	cc
    3d0a:	2300      	movcc	r3, #0
    3d0c:	2301      	movcs	r3, #1
    3d0e:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3d10:	693b      	ldr	r3, [r7, #16]
    3d12:	f103 0304 	add.w	r3, r3, #4
    3d16:	4618      	mov	r0, r3
    3d18:	f7ff f818 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3d1c:	693b      	ldr	r3, [r7, #16]
    3d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d20:	f240 1394 	movw	r3, #404	; 0x194
    3d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d28:	681b      	ldr	r3, [r3, #0]
    3d2a:	429a      	cmp	r2, r3
    3d2c:	d906      	bls.n	3d3c <xTaskResumeFromISR+0x80>
    3d2e:	693b      	ldr	r3, [r7, #16]
    3d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d32:	f240 1394 	movw	r3, #404	; 0x194
    3d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d3a:	601a      	str	r2, [r3, #0]
    3d3c:	693b      	ldr	r3, [r7, #16]
    3d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d40:	4613      	mov	r3, r2
    3d42:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3d46:	189b      	adds	r3, r3, r2
    3d48:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3d4c:	461a      	mov	r2, r3
    3d4e:	f240 03b4 	movw	r3, #180	; 0xb4
    3d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d56:	18d2      	adds	r2, r2, r3
    3d58:	693b      	ldr	r3, [r7, #16]
    3d5a:	f103 0304 	add.w	r3, r3, #4
    3d5e:	4610      	mov	r0, r2
    3d60:	4619      	mov	r1, r3
    3d62:	f7fe ff91 	bl	2c88 <vListInsertEnd>
    3d66:	e009      	b.n	3d7c <xTaskResumeFromISR+0xc0>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3d68:	693b      	ldr	r3, [r7, #16]
    3d6a:	f103 0318 	add.w	r3, r3, #24
    3d6e:	f240 1048 	movw	r0, #328	; 0x148
    3d72:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3d76:	4619      	mov	r1, r3
    3d78:	f7fe ff86 	bl	2c88 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3d7c:	f04f 0000 	mov.w	r0, #0
    3d80:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3d84:	697b      	ldr	r3, [r7, #20]
	}
    3d86:	4618      	mov	r0, r3
    3d88:	f107 0718 	add.w	r7, r7, #24
    3d8c:	46bd      	mov	sp, r7
    3d8e:	bd80      	pop	{r7, pc}

00003d90 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3d90:	b580      	push	{r7, lr}
    3d92:	b086      	sub	sp, #24
    3d94:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3d96:	f04f 0300 	mov.w	r3, #0
    3d9a:	9300      	str	r3, [sp, #0]
    3d9c:	f04f 0300 	mov.w	r3, #0
    3da0:	9301      	str	r3, [sp, #4]
    3da2:	f04f 0300 	mov.w	r3, #0
    3da6:	9302      	str	r3, [sp, #8]
    3da8:	f04f 0300 	mov.w	r3, #0
    3dac:	9303      	str	r3, [sp, #12]
    3dae:	f244 40d5 	movw	r0, #17621	; 0x44d5
    3db2:	f2c0 0000 	movt	r0, #0
    3db6:	f645 31e0 	movw	r1, #23520	; 0x5be0
    3dba:	f2c0 0100 	movt	r1, #0
    3dbe:	f04f 0280 	mov.w	r2, #128	; 0x80
    3dc2:	f04f 0300 	mov.w	r3, #0
    3dc6:	f7ff fc2b 	bl	3620 <xTaskGenericCreate>
    3dca:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3dcc:	687b      	ldr	r3, [r7, #4]
    3dce:	2b01      	cmp	r3, #1
    3dd0:	d113      	bne.n	3dfa <vTaskStartScheduler+0x6a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3dd2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3dd6:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3dda:	f240 1398 	movw	r3, #408	; 0x198
    3dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3de2:	f04f 0201 	mov.w	r2, #1
    3de6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3de8:	f240 138c 	movw	r3, #396	; 0x18c
    3dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3df0:	f04f 0200 	mov.w	r2, #0
    3df4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3df6:	f000 fdf3 	bl	49e0 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3dfa:	f107 0708 	add.w	r7, r7, #8
    3dfe:	46bd      	mov	sp, r7
    3e00:	bd80      	pop	{r7, pc}
    3e02:	bf00      	nop

00003e04 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3e04:	b580      	push	{r7, lr}
    3e06:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3e08:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3e0c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3e10:	f240 1398 	movw	r3, #408	; 0x198
    3e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e18:	f04f 0200 	mov.w	r2, #0
    3e1c:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3e1e:	f000 fe09 	bl	4a34 <vPortEndScheduler>
}
    3e22:	bd80      	pop	{r7, pc}

00003e24 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3e24:	b480      	push	{r7}
    3e26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3e28:	f240 139c 	movw	r3, #412	; 0x19c
    3e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e30:	681b      	ldr	r3, [r3, #0]
    3e32:	f103 0201 	add.w	r2, r3, #1
    3e36:	f240 139c 	movw	r3, #412	; 0x19c
    3e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e3e:	601a      	str	r2, [r3, #0]
}
    3e40:	46bd      	mov	sp, r7
    3e42:	bc80      	pop	{r7}
    3e44:	4770      	bx	lr
    3e46:	bf00      	nop

00003e48 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3e48:	b590      	push	{r4, r7, lr}
    3e4a:	b083      	sub	sp, #12
    3e4c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3e4e:	f04f 0300 	mov.w	r3, #0
    3e52:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3e54:	f000 fe00 	bl	4a58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3e58:	f240 139c 	movw	r3, #412	; 0x19c
    3e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e60:	681b      	ldr	r3, [r3, #0]
    3e62:	f103 32ff 	add.w	r2, r3, #4294967295
    3e66:	f240 139c 	movw	r3, #412	; 0x19c
    3e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e6e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3e70:	f240 139c 	movw	r3, #412	; 0x19c
    3e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e78:	681b      	ldr	r3, [r3, #0]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	f040 8085 	bne.w	3f8a <xTaskResumeAll+0x142>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3e80:	f240 1388 	movw	r3, #392	; 0x188
    3e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e88:	681b      	ldr	r3, [r3, #0]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d07d      	beq.n	3f8a <xTaskResumeAll+0x142>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3e8e:	f04f 0300 	mov.w	r3, #0
    3e92:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3e94:	e03c      	b.n	3f10 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3e96:	f240 1348 	movw	r3, #328	; 0x148
    3e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e9e:	68db      	ldr	r3, [r3, #12]
    3ea0:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3ea2:	f104 0318 	add.w	r3, r4, #24
    3ea6:	4618      	mov	r0, r3
    3ea8:	f7fe ff50 	bl	2d4c <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3eac:	f104 0304 	add.w	r3, r4, #4
    3eb0:	4618      	mov	r0, r3
    3eb2:	f7fe ff4b 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3eb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3eb8:	f240 1394 	movw	r3, #404	; 0x194
    3ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ec0:	681b      	ldr	r3, [r3, #0]
    3ec2:	429a      	cmp	r2, r3
    3ec4:	d905      	bls.n	3ed2 <xTaskResumeAll+0x8a>
    3ec6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3ec8:	f240 1394 	movw	r3, #404	; 0x194
    3ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ed0:	601a      	str	r2, [r3, #0]
    3ed2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3ed4:	4613      	mov	r3, r2
    3ed6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3eda:	189b      	adds	r3, r3, r2
    3edc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3ee0:	461a      	mov	r2, r3
    3ee2:	f240 03b4 	movw	r3, #180	; 0xb4
    3ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eea:	18d2      	adds	r2, r2, r3
    3eec:	f104 0304 	add.w	r3, r4, #4
    3ef0:	4610      	mov	r0, r2
    3ef2:	4619      	mov	r1, r3
    3ef4:	f7fe fec8 	bl	2c88 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ef8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3efa:	f240 03b0 	movw	r3, #176	; 0xb0
    3efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f02:	681b      	ldr	r3, [r3, #0]
    3f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f06:	429a      	cmp	r2, r3
    3f08:	d302      	bcc.n	3f10 <xTaskResumeAll+0xc8>
					{
						xYieldRequired = pdTRUE;
    3f0a:	f04f 0301 	mov.w	r3, #1
    3f0e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3f10:	f240 1348 	movw	r3, #328	; 0x148
    3f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f18:	681b      	ldr	r3, [r3, #0]
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d1bb      	bne.n	3e96 <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3f1e:	f240 13a0 	movw	r3, #416	; 0x1a0
    3f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f26:	681b      	ldr	r3, [r3, #0]
    3f28:	2b00      	cmp	r3, #0
    3f2a:	d018      	beq.n	3f5e <xTaskResumeAll+0x116>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3f2c:	e00d      	b.n	3f4a <xTaskResumeAll+0x102>
					{
						vTaskIncrementTick();
    3f2e:	f000 f871 	bl	4014 <vTaskIncrementTick>
						--uxMissedTicks;
    3f32:	f240 13a0 	movw	r3, #416	; 0x1a0
    3f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f3a:	681b      	ldr	r3, [r3, #0]
    3f3c:	f103 32ff 	add.w	r2, r3, #4294967295
    3f40:	f240 13a0 	movw	r3, #416	; 0x1a0
    3f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f48:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3f4a:	f240 13a0 	movw	r3, #416	; 0x1a0
    3f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f52:	681b      	ldr	r3, [r3, #0]
    3f54:	2b00      	cmp	r3, #0
    3f56:	d1ea      	bne.n	3f2e <xTaskResumeAll+0xe6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3f58:	f04f 0301 	mov.w	r3, #1
    3f5c:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3f5e:	683b      	ldr	r3, [r7, #0]
    3f60:	2b01      	cmp	r3, #1
    3f62:	d006      	beq.n	3f72 <xTaskResumeAll+0x12a>
    3f64:	f240 13a4 	movw	r3, #420	; 0x1a4
    3f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f6c:	681b      	ldr	r3, [r3, #0]
    3f6e:	2b01      	cmp	r3, #1
    3f70:	d10b      	bne.n	3f8a <xTaskResumeAll+0x142>
				{
					xAlreadyYielded = pdTRUE;
    3f72:	f04f 0301 	mov.w	r3, #1
    3f76:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3f78:	f240 13a4 	movw	r3, #420	; 0x1a4
    3f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f80:	f04f 0200 	mov.w	r2, #0
    3f84:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3f86:	f000 fd5b 	bl	4a40 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3f8a:	f000 fd7b 	bl	4a84 <vPortExitCritical>

	return xAlreadyYielded;
    3f8e:	687b      	ldr	r3, [r7, #4]
}
    3f90:	4618      	mov	r0, r3
    3f92:	f107 070c 	add.w	r7, r7, #12
    3f96:	46bd      	mov	sp, r7
    3f98:	bd90      	pop	{r4, r7, pc}
    3f9a:	bf00      	nop

00003f9c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3f9c:	b580      	push	{r7, lr}
    3f9e:	b082      	sub	sp, #8
    3fa0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3fa2:	f000 fd59 	bl	4a58 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    3fa6:	f240 138c 	movw	r3, #396	; 0x18c
    3faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fae:	681b      	ldr	r3, [r3, #0]
    3fb0:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3fb2:	f000 fd67 	bl	4a84 <vPortExitCritical>

	return xTicks;
    3fb6:	687b      	ldr	r3, [r7, #4]
}
    3fb8:	4618      	mov	r0, r3
    3fba:	f107 0708 	add.w	r7, r7, #8
    3fbe:	46bd      	mov	sp, r7
    3fc0:	bd80      	pop	{r7, pc}
    3fc2:	bf00      	nop

00003fc4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3fc4:	b480      	push	{r7}
    3fc6:	b083      	sub	sp, #12
    3fc8:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3fca:	f04f 0300 	mov.w	r3, #0
    3fce:	607b      	str	r3, [r7, #4]
    3fd0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3fd4:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    3fd8:	f240 138c 	movw	r3, #396	; 0x18c
    3fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fe0:	681b      	ldr	r3, [r3, #0]
    3fe2:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3fe4:	f04f 0000 	mov.w	r0, #0
    3fe8:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3fec:	683b      	ldr	r3, [r7, #0]
}
    3fee:	4618      	mov	r0, r3
    3ff0:	f107 070c 	add.w	r7, r7, #12
    3ff4:	46bd      	mov	sp, r7
    3ff6:	bc80      	pop	{r7}
    3ff8:	4770      	bx	lr
    3ffa:	bf00      	nop

00003ffc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3ffc:	b480      	push	{r7}
    3ffe:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4000:	f240 1388 	movw	r3, #392	; 0x188
    4004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4008:	681b      	ldr	r3, [r3, #0]
}
    400a:	4618      	mov	r0, r3
    400c:	46bd      	mov	sp, r7
    400e:	bc80      	pop	{r7}
    4010:	4770      	bx	lr
    4012:	bf00      	nop

00004014 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    4014:	b580      	push	{r7, lr}
    4016:	b084      	sub	sp, #16
    4018:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    401a:	f240 139c 	movw	r3, #412	; 0x19c
    401e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4022:	681b      	ldr	r3, [r3, #0]
    4024:	2b00      	cmp	r3, #0
    4026:	f040 80c0 	bne.w	41aa <vTaskIncrementTick+0x196>
	{
		++xTickCount;
    402a:	f240 138c 	movw	r3, #396	; 0x18c
    402e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4032:	681b      	ldr	r3, [r3, #0]
    4034:	f103 0201 	add.w	r2, r3, #1
    4038:	f240 138c 	movw	r3, #396	; 0x18c
    403c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4040:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    4042:	f240 138c 	movw	r3, #396	; 0x18c
    4046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    404a:	681b      	ldr	r3, [r3, #0]
    404c:	2b00      	cmp	r3, #0
    404e:	d140      	bne.n	40d2 <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4050:	f240 1340 	movw	r3, #320	; 0x140
    4054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    405c:	f240 1344 	movw	r3, #324	; 0x144
    4060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4064:	681a      	ldr	r2, [r3, #0]
    4066:	f240 1340 	movw	r3, #320	; 0x140
    406a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    406e:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    4070:	f240 1344 	movw	r3, #324	; 0x144
    4074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4078:	68fa      	ldr	r2, [r7, #12]
    407a:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    407c:	f240 13a8 	movw	r3, #424	; 0x1a8
    4080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4084:	681b      	ldr	r3, [r3, #0]
    4086:	f103 0201 	add.w	r2, r3, #1
    408a:	f240 13a8 	movw	r3, #424	; 0x1a8
    408e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4092:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4094:	f240 1340 	movw	r3, #320	; 0x140
    4098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    409c:	681b      	ldr	r3, [r3, #0]
    409e:	681b      	ldr	r3, [r3, #0]
    40a0:	2b00      	cmp	r3, #0
    40a2:	d107      	bne.n	40b4 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    40a4:	f240 0328 	movw	r3, #40	; 0x28
    40a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40ac:	f04f 32ff 	mov.w	r2, #4294967295
    40b0:	601a      	str	r2, [r3, #0]
    40b2:	e00e      	b.n	40d2 <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    40b4:	f240 1340 	movw	r3, #320	; 0x140
    40b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40bc:	681b      	ldr	r3, [r3, #0]
    40be:	68db      	ldr	r3, [r3, #12]
    40c0:	68db      	ldr	r3, [r3, #12]
    40c2:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    40c4:	68bb      	ldr	r3, [r7, #8]
    40c6:	685a      	ldr	r2, [r3, #4]
    40c8:	f240 0328 	movw	r3, #40	; 0x28
    40cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40d0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    40d2:	f240 138c 	movw	r3, #396	; 0x18c
    40d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40da:	681a      	ldr	r2, [r3, #0]
    40dc:	f240 0328 	movw	r3, #40	; 0x28
    40e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	429a      	cmp	r2, r3
    40e8:	d36d      	bcc.n	41c6 <vTaskIncrementTick+0x1b2>
    40ea:	f240 1340 	movw	r3, #320	; 0x140
    40ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	681b      	ldr	r3, [r3, #0]
    40f6:	2b00      	cmp	r3, #0
    40f8:	d107      	bne.n	410a <vTaskIncrementTick+0xf6>
    40fa:	f240 0328 	movw	r3, #40	; 0x28
    40fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4102:	f04f 32ff 	mov.w	r2, #4294967295
    4106:	601a      	str	r2, [r3, #0]
    4108:	e05d      	b.n	41c6 <vTaskIncrementTick+0x1b2>
    410a:	f240 1340 	movw	r3, #320	; 0x140
    410e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4112:	681b      	ldr	r3, [r3, #0]
    4114:	68db      	ldr	r3, [r3, #12]
    4116:	68db      	ldr	r3, [r3, #12]
    4118:	60bb      	str	r3, [r7, #8]
    411a:	68bb      	ldr	r3, [r7, #8]
    411c:	685b      	ldr	r3, [r3, #4]
    411e:	607b      	str	r3, [r7, #4]
    4120:	f240 138c 	movw	r3, #396	; 0x18c
    4124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4128:	681a      	ldr	r2, [r3, #0]
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	429a      	cmp	r2, r3
    412e:	d206      	bcs.n	413e <vTaskIncrementTick+0x12a>
    4130:	f240 0328 	movw	r3, #40	; 0x28
    4134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4138:	687a      	ldr	r2, [r7, #4]
    413a:	601a      	str	r2, [r3, #0]
    413c:	e043      	b.n	41c6 <vTaskIncrementTick+0x1b2>
    413e:	68bb      	ldr	r3, [r7, #8]
    4140:	f103 0304 	add.w	r3, r3, #4
    4144:	4618      	mov	r0, r3
    4146:	f7fe fe01 	bl	2d4c <vListRemove>
    414a:	68bb      	ldr	r3, [r7, #8]
    414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    414e:	2b00      	cmp	r3, #0
    4150:	d005      	beq.n	415e <vTaskIncrementTick+0x14a>
    4152:	68bb      	ldr	r3, [r7, #8]
    4154:	f103 0318 	add.w	r3, r3, #24
    4158:	4618      	mov	r0, r3
    415a:	f7fe fdf7 	bl	2d4c <vListRemove>
    415e:	68bb      	ldr	r3, [r7, #8]
    4160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4162:	f240 1394 	movw	r3, #404	; 0x194
    4166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    416a:	681b      	ldr	r3, [r3, #0]
    416c:	429a      	cmp	r2, r3
    416e:	d906      	bls.n	417e <vTaskIncrementTick+0x16a>
    4170:	68bb      	ldr	r3, [r7, #8]
    4172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4174:	f240 1394 	movw	r3, #404	; 0x194
    4178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    417c:	601a      	str	r2, [r3, #0]
    417e:	68bb      	ldr	r3, [r7, #8]
    4180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4182:	4613      	mov	r3, r2
    4184:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4188:	189b      	adds	r3, r3, r2
    418a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    418e:	461a      	mov	r2, r3
    4190:	f240 03b4 	movw	r3, #180	; 0xb4
    4194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4198:	18d2      	adds	r2, r2, r3
    419a:	68bb      	ldr	r3, [r7, #8]
    419c:	f103 0304 	add.w	r3, r3, #4
    41a0:	4610      	mov	r0, r2
    41a2:	4619      	mov	r1, r3
    41a4:	f7fe fd70 	bl	2c88 <vListInsertEnd>
    41a8:	e79f      	b.n	40ea <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
    41aa:	f240 13a0 	movw	r3, #416	; 0x1a0
    41ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41b2:	681b      	ldr	r3, [r3, #0]
    41b4:	f103 0201 	add.w	r2, r3, #1
    41b8:	f240 13a0 	movw	r3, #416	; 0x1a0
    41bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41c0:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    41c2:	f001 f90b 	bl	53dc <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    41c6:	f240 13a0 	movw	r3, #416	; 0x1a0
    41ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	2b00      	cmp	r3, #0
    41d2:	d101      	bne.n	41d8 <vTaskIncrementTick+0x1c4>
		{
			vApplicationTickHook();
    41d4:	f001 f902 	bl	53dc <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    41d8:	f107 0710 	add.w	r7, r7, #16
    41dc:	46bd      	mov	sp, r7
    41de:	bd80      	pop	{r7, pc}

000041e0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    41e0:	b580      	push	{r7, lr}
    41e2:	b082      	sub	sp, #8
    41e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    41e6:	f240 139c 	movw	r3, #412	; 0x19c
    41ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41ee:	681b      	ldr	r3, [r3, #0]
    41f0:	2b00      	cmp	r3, #0
    41f2:	d007      	beq.n	4204 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    41f4:	f240 13a4 	movw	r3, #420	; 0x1a4
    41f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41fc:	f04f 0201 	mov.w	r2, #1
    4200:	601a      	str	r2, [r3, #0]
    4202:	e04f      	b.n	42a4 <vTaskSwitchContext+0xc4>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    4204:	f001 f89c 	bl	5340 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4208:	e00b      	b.n	4222 <vTaskSwitchContext+0x42>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    420a:	f240 1394 	movw	r3, #404	; 0x194
    420e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4212:	681b      	ldr	r3, [r3, #0]
    4214:	f103 32ff 	add.w	r2, r3, #4294967295
    4218:	f240 1394 	movw	r3, #404	; 0x194
    421c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4220:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4222:	f240 1394 	movw	r3, #404	; 0x194
    4226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    422a:	681a      	ldr	r2, [r3, #0]
    422c:	4613      	mov	r3, r2
    422e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4232:	189b      	adds	r3, r3, r2
    4234:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4238:	461a      	mov	r2, r3
    423a:	f240 03b4 	movw	r3, #180	; 0xb4
    423e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4242:	18d3      	adds	r3, r2, r3
    4244:	681b      	ldr	r3, [r3, #0]
    4246:	2b00      	cmp	r3, #0
    4248:	d0df      	beq.n	420a <vTaskSwitchContext+0x2a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    424a:	f240 1394 	movw	r3, #404	; 0x194
    424e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4252:	681a      	ldr	r2, [r3, #0]
    4254:	4613      	mov	r3, r2
    4256:	ea4f 0383 	mov.w	r3, r3, lsl #2
    425a:	189b      	adds	r3, r3, r2
    425c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4260:	461a      	mov	r2, r3
    4262:	f240 03b4 	movw	r3, #180	; 0xb4
    4266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    426a:	18d3      	adds	r3, r2, r3
    426c:	607b      	str	r3, [r7, #4]
    426e:	687b      	ldr	r3, [r7, #4]
    4270:	685b      	ldr	r3, [r3, #4]
    4272:	685a      	ldr	r2, [r3, #4]
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	605a      	str	r2, [r3, #4]
    4278:	687b      	ldr	r3, [r7, #4]
    427a:	685a      	ldr	r2, [r3, #4]
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	f103 0308 	add.w	r3, r3, #8
    4282:	429a      	cmp	r2, r3
    4284:	d104      	bne.n	4290 <vTaskSwitchContext+0xb0>
    4286:	687b      	ldr	r3, [r7, #4]
    4288:	685b      	ldr	r3, [r3, #4]
    428a:	685a      	ldr	r2, [r3, #4]
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	605a      	str	r2, [r3, #4]
    4290:	687b      	ldr	r3, [r7, #4]
    4292:	685b      	ldr	r3, [r3, #4]
    4294:	68da      	ldr	r2, [r3, #12]
    4296:	f240 03b0 	movw	r3, #176	; 0xb0
    429a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    429e:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    42a0:	f001 f848 	bl	5334 <myTraceSwitchedIn>
	}
}
    42a4:	f107 0708 	add.w	r7, r7, #8
    42a8:	46bd      	mov	sp, r7
    42aa:	bd80      	pop	{r7, pc}

000042ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    42ac:	b580      	push	{r7, lr}
    42ae:	b084      	sub	sp, #16
    42b0:	af00      	add	r7, sp, #0
    42b2:	6078      	str	r0, [r7, #4]
    42b4:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    42b6:	f240 03b0 	movw	r3, #176	; 0xb0
    42ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42be:	681b      	ldr	r3, [r3, #0]
    42c0:	f103 0318 	add.w	r3, r3, #24
    42c4:	6878      	ldr	r0, [r7, #4]
    42c6:	4619      	mov	r1, r3
    42c8:	f7fe fd06 	bl	2cd8 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    42cc:	f240 03b0 	movw	r3, #176	; 0xb0
    42d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42d4:	681b      	ldr	r3, [r3, #0]
    42d6:	f103 0304 	add.w	r3, r3, #4
    42da:	4618      	mov	r0, r3
    42dc:	f7fe fd36 	bl	2d4c <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    42e0:	683b      	ldr	r3, [r7, #0]
    42e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    42e6:	d10e      	bne.n	4306 <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    42e8:	f240 03b0 	movw	r3, #176	; 0xb0
    42ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42f0:	681b      	ldr	r3, [r3, #0]
    42f2:	f103 0304 	add.w	r3, r3, #4
    42f6:	f240 1074 	movw	r0, #372	; 0x174
    42fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    42fe:	4619      	mov	r1, r3
    4300:	f7fe fcc2 	bl	2c88 <vListInsertEnd>
    4304:	e00a      	b.n	431c <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    4306:	f240 138c 	movw	r3, #396	; 0x18c
    430a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    430e:	681a      	ldr	r2, [r3, #0]
    4310:	683b      	ldr	r3, [r7, #0]
    4312:	18d3      	adds	r3, r2, r3
    4314:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4316:	68f8      	ldr	r0, [r7, #12]
    4318:	f000 f9c8 	bl	46ac <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    431c:	f107 0710 	add.w	r7, r7, #16
    4320:	46bd      	mov	sp, r7
    4322:	bd80      	pop	{r7, pc}

00004324 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    4324:	b580      	push	{r7, lr}
    4326:	b084      	sub	sp, #16
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	68db      	ldr	r3, [r3, #12]
    4330:	68db      	ldr	r3, [r3, #12]
    4332:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4334:	68bb      	ldr	r3, [r7, #8]
    4336:	f103 0318 	add.w	r3, r3, #24
    433a:	4618      	mov	r0, r3
    433c:	f7fe fd06 	bl	2d4c <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4340:	f240 139c 	movw	r3, #412	; 0x19c
    4344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4348:	681b      	ldr	r3, [r3, #0]
    434a:	2b00      	cmp	r3, #0
    434c:	d12b      	bne.n	43a6 <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    434e:	68bb      	ldr	r3, [r7, #8]
    4350:	f103 0304 	add.w	r3, r3, #4
    4354:	4618      	mov	r0, r3
    4356:	f7fe fcf9 	bl	2d4c <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    435a:	68bb      	ldr	r3, [r7, #8]
    435c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    435e:	f240 1394 	movw	r3, #404	; 0x194
    4362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4366:	681b      	ldr	r3, [r3, #0]
    4368:	429a      	cmp	r2, r3
    436a:	d906      	bls.n	437a <xTaskRemoveFromEventList+0x56>
    436c:	68bb      	ldr	r3, [r7, #8]
    436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4370:	f240 1394 	movw	r3, #404	; 0x194
    4374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4378:	601a      	str	r2, [r3, #0]
    437a:	68bb      	ldr	r3, [r7, #8]
    437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    437e:	4613      	mov	r3, r2
    4380:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4384:	189b      	adds	r3, r3, r2
    4386:	ea4f 0383 	mov.w	r3, r3, lsl #2
    438a:	461a      	mov	r2, r3
    438c:	f240 03b4 	movw	r3, #180	; 0xb4
    4390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4394:	18d2      	adds	r2, r2, r3
    4396:	68bb      	ldr	r3, [r7, #8]
    4398:	f103 0304 	add.w	r3, r3, #4
    439c:	4610      	mov	r0, r2
    439e:	4619      	mov	r1, r3
    43a0:	f7fe fc72 	bl	2c88 <vListInsertEnd>
    43a4:	e009      	b.n	43ba <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    43a6:	68bb      	ldr	r3, [r7, #8]
    43a8:	f103 0318 	add.w	r3, r3, #24
    43ac:	f240 1048 	movw	r0, #328	; 0x148
    43b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    43b4:	4619      	mov	r1, r3
    43b6:	f7fe fc67 	bl	2c88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    43ba:	68bb      	ldr	r3, [r7, #8]
    43bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    43be:	f240 03b0 	movw	r3, #176	; 0xb0
    43c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43c6:	681b      	ldr	r3, [r3, #0]
    43c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    43ca:	429a      	cmp	r2, r3
    43cc:	d303      	bcc.n	43d6 <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    43ce:	f04f 0301 	mov.w	r3, #1
    43d2:	60fb      	str	r3, [r7, #12]
    43d4:	e002      	b.n	43dc <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    43d6:	f04f 0300 	mov.w	r3, #0
    43da:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    43dc:	68fb      	ldr	r3, [r7, #12]
}
    43de:	4618      	mov	r0, r3
    43e0:	f107 0710 	add.w	r7, r7, #16
    43e4:	46bd      	mov	sp, r7
    43e6:	bd80      	pop	{r7, pc}

000043e8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    43e8:	b480      	push	{r7}
    43ea:	b083      	sub	sp, #12
    43ec:	af00      	add	r7, sp, #0
    43ee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    43f0:	f240 13a8 	movw	r3, #424	; 0x1a8
    43f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43f8:	681a      	ldr	r2, [r3, #0]
    43fa:	687b      	ldr	r3, [r7, #4]
    43fc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    43fe:	f240 138c 	movw	r3, #396	; 0x18c
    4402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4406:	681a      	ldr	r2, [r3, #0]
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	605a      	str	r2, [r3, #4]
}
    440c:	f107 070c 	add.w	r7, r7, #12
    4410:	46bd      	mov	sp, r7
    4412:	bc80      	pop	{r7}
    4414:	4770      	bx	lr
    4416:	bf00      	nop

00004418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4418:	b580      	push	{r7, lr}
    441a:	b084      	sub	sp, #16
    441c:	af00      	add	r7, sp, #0
    441e:	6078      	str	r0, [r7, #4]
    4420:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4422:	f000 fb19 	bl	4a58 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4426:	683b      	ldr	r3, [r7, #0]
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	f1b3 3fff 	cmp.w	r3, #4294967295
    442e:	d103      	bne.n	4438 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
    4430:	f04f 0300 	mov.w	r3, #0
    4434:	60fb      	str	r3, [r7, #12]
    4436:	e038      	b.n	44aa <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4438:	687b      	ldr	r3, [r7, #4]
    443a:	681a      	ldr	r2, [r3, #0]
    443c:	f240 13a8 	movw	r3, #424	; 0x1a8
    4440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	429a      	cmp	r2, r3
    4448:	d00c      	beq.n	4464 <xTaskCheckForTimeOut+0x4c>
    444a:	687b      	ldr	r3, [r7, #4]
    444c:	685a      	ldr	r2, [r3, #4]
    444e:	f240 138c 	movw	r3, #396	; 0x18c
    4452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4456:	681b      	ldr	r3, [r3, #0]
    4458:	429a      	cmp	r2, r3
    445a:	d803      	bhi.n	4464 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    445c:	f04f 0301 	mov.w	r3, #1
    4460:	60fb      	str	r3, [r7, #12]
    4462:	e022      	b.n	44aa <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4464:	f240 138c 	movw	r3, #396	; 0x18c
    4468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    446c:	681a      	ldr	r2, [r3, #0]
    446e:	687b      	ldr	r3, [r7, #4]
    4470:	685b      	ldr	r3, [r3, #4]
    4472:	1ad2      	subs	r2, r2, r3
    4474:	683b      	ldr	r3, [r7, #0]
    4476:	681b      	ldr	r3, [r3, #0]
    4478:	429a      	cmp	r2, r3
    447a:	d213      	bcs.n	44a4 <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    447c:	683b      	ldr	r3, [r7, #0]
    447e:	681a      	ldr	r2, [r3, #0]
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	6859      	ldr	r1, [r3, #4]
    4484:	f240 138c 	movw	r3, #396	; 0x18c
    4488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    448c:	681b      	ldr	r3, [r3, #0]
    448e:	1acb      	subs	r3, r1, r3
    4490:	18d2      	adds	r2, r2, r3
    4492:	683b      	ldr	r3, [r7, #0]
    4494:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    4496:	6878      	ldr	r0, [r7, #4]
    4498:	f7ff ffa6 	bl	43e8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    449c:	f04f 0300 	mov.w	r3, #0
    44a0:	60fb      	str	r3, [r7, #12]
    44a2:	e002      	b.n	44aa <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
    44a4:	f04f 0301 	mov.w	r3, #1
    44a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    44aa:	f000 faeb 	bl	4a84 <vPortExitCritical>

	return xReturn;
    44ae:	68fb      	ldr	r3, [r7, #12]
}
    44b0:	4618      	mov	r0, r3
    44b2:	f107 0710 	add.w	r7, r7, #16
    44b6:	46bd      	mov	sp, r7
    44b8:	bd80      	pop	{r7, pc}
    44ba:	bf00      	nop

000044bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    44bc:	b480      	push	{r7}
    44be:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    44c0:	f240 13a4 	movw	r3, #420	; 0x1a4
    44c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44c8:	f04f 0201 	mov.w	r2, #1
    44cc:	601a      	str	r2, [r3, #0]
}
    44ce:	46bd      	mov	sp, r7
    44d0:	bc80      	pop	{r7}
    44d2:	4770      	bx	lr

000044d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    44d4:	b580      	push	{r7, lr}
    44d6:	b082      	sub	sp, #8
    44d8:	af00      	add	r7, sp, #0
    44da:	6078      	str	r0, [r7, #4]
    44dc:	e000      	b.n	44e0 <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    44de:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    44e0:	f000 f898 	bl	4614 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    44e4:	f240 03b4 	movw	r3, #180	; 0xb4
    44e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44ec:	681b      	ldr	r3, [r3, #0]
    44ee:	2b01      	cmp	r3, #1
    44f0:	d9f5      	bls.n	44de <prvIdleTask+0xa>
			{
				taskYIELD();
    44f2:	f000 faa5 	bl	4a40 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    44f6:	e7f2      	b.n	44de <prvIdleTask+0xa>

000044f8 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    44f8:	b580      	push	{r7, lr}
    44fa:	b084      	sub	sp, #16
    44fc:	af00      	add	r7, sp, #0
    44fe:	60f8      	str	r0, [r7, #12]
    4500:	60b9      	str	r1, [r7, #8]
    4502:	607a      	str	r2, [r7, #4]
    4504:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    4506:	68fb      	ldr	r3, [r7, #12]
    4508:	f103 0334 	add.w	r3, r3, #52	; 0x34
    450c:	4618      	mov	r0, r3
    450e:	68b9      	ldr	r1, [r7, #8]
    4510:	f04f 0210 	mov.w	r2, #16
    4514:	f001 fb02 	bl	5b1c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4518:	68fb      	ldr	r3, [r7, #12]
    451a:	f04f 0200 	mov.w	r2, #0
    451e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    4522:	687b      	ldr	r3, [r7, #4]
    4524:	2b04      	cmp	r3, #4
    4526:	d902      	bls.n	452e <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4528:	f04f 0304 	mov.w	r3, #4
    452c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	687a      	ldr	r2, [r7, #4]
    4532:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    4534:	68fb      	ldr	r3, [r7, #12]
    4536:	687a      	ldr	r2, [r7, #4]
    4538:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    453a:	68fb      	ldr	r3, [r7, #12]
    453c:	f103 0304 	add.w	r3, r3, #4
    4540:	4618      	mov	r0, r3
    4542:	f7fe fb93 	bl	2c6c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4546:	68fb      	ldr	r3, [r7, #12]
    4548:	f103 0318 	add.w	r3, r3, #24
    454c:	4618      	mov	r0, r3
    454e:	f7fe fb8d 	bl	2c6c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    4552:	68fb      	ldr	r3, [r7, #12]
    4554:	68fa      	ldr	r2, [r7, #12]
    4556:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4558:	687b      	ldr	r3, [r7, #4]
    455a:	f1c3 0205 	rsb	r2, r3, #5
    455e:	68fb      	ldr	r3, [r7, #12]
    4560:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    4562:	68fb      	ldr	r3, [r7, #12]
    4564:	68fa      	ldr	r2, [r7, #12]
    4566:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    4568:	f107 0710 	add.w	r7, r7, #16
    456c:	46bd      	mov	sp, r7
    456e:	bd80      	pop	{r7, pc}

00004570 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    4570:	b580      	push	{r7, lr}
    4572:	b082      	sub	sp, #8
    4574:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4576:	f04f 0300 	mov.w	r3, #0
    457a:	607b      	str	r3, [r7, #4]
    457c:	e013      	b.n	45a6 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    457e:	687a      	ldr	r2, [r7, #4]
    4580:	4613      	mov	r3, r2
    4582:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4586:	189b      	adds	r3, r3, r2
    4588:	ea4f 0383 	mov.w	r3, r3, lsl #2
    458c:	461a      	mov	r2, r3
    458e:	f240 03b4 	movw	r3, #180	; 0xb4
    4592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4596:	18d3      	adds	r3, r2, r3
    4598:	4618      	mov	r0, r3
    459a:	f7fe fb47 	bl	2c2c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    459e:	687b      	ldr	r3, [r7, #4]
    45a0:	f103 0301 	add.w	r3, r3, #1
    45a4:	607b      	str	r3, [r7, #4]
    45a6:	687b      	ldr	r3, [r7, #4]
    45a8:	2b04      	cmp	r3, #4
    45aa:	d9e8      	bls.n	457e <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    45ac:	f240 1018 	movw	r0, #280	; 0x118
    45b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    45b4:	f7fe fb3a 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    45b8:	f240 102c 	movw	r0, #300	; 0x12c
    45bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    45c0:	f7fe fb34 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    45c4:	f240 1048 	movw	r0, #328	; 0x148
    45c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    45cc:	f7fe fb2e 	bl	2c2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    45d0:	f240 105c 	movw	r0, #348	; 0x15c
    45d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    45d8:	f7fe fb28 	bl	2c2c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    45dc:	f240 1074 	movw	r0, #372	; 0x174
    45e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    45e4:	f7fe fb22 	bl	2c2c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    45e8:	f240 1340 	movw	r3, #320	; 0x140
    45ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45f0:	f240 1218 	movw	r2, #280	; 0x118
    45f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    45f8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    45fa:	f240 1344 	movw	r3, #324	; 0x144
    45fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4602:	f240 122c 	movw	r2, #300	; 0x12c
    4606:	f2c2 0200 	movt	r2, #8192	; 0x2000
    460a:	601a      	str	r2, [r3, #0]
}
    460c:	f107 0708 	add.w	r7, r7, #8
    4610:	46bd      	mov	sp, r7
    4612:	bd80      	pop	{r7, pc}

00004614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4614:	b580      	push	{r7, lr}
    4616:	b082      	sub	sp, #8
    4618:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    461a:	f240 1370 	movw	r3, #368	; 0x170
    461e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4622:	681b      	ldr	r3, [r3, #0]
    4624:	2b00      	cmp	r3, #0
    4626:	d03c      	beq.n	46a2 <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
    4628:	f7ff fbfc 	bl	3e24 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    462c:	f240 135c 	movw	r3, #348	; 0x15c
    4630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4634:	681b      	ldr	r3, [r3, #0]
    4636:	2b00      	cmp	r3, #0
    4638:	bf14      	ite	ne
    463a:	2300      	movne	r3, #0
    463c:	2301      	moveq	r3, #1
    463e:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    4640:	f7ff fc02 	bl	3e48 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	2b00      	cmp	r3, #0
    4648:	d12b      	bne.n	46a2 <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    464a:	f000 fa05 	bl	4a58 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    464e:	f240 135c 	movw	r3, #348	; 0x15c
    4652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4656:	68db      	ldr	r3, [r3, #12]
    4658:	68db      	ldr	r3, [r3, #12]
    465a:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    465c:	683b      	ldr	r3, [r7, #0]
    465e:	f103 0304 	add.w	r3, r3, #4
    4662:	4618      	mov	r0, r3
    4664:	f7fe fb72 	bl	2d4c <vListRemove>
					--uxCurrentNumberOfTasks;
    4668:	f240 1388 	movw	r3, #392	; 0x188
    466c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4670:	681b      	ldr	r3, [r3, #0]
    4672:	f103 32ff 	add.w	r2, r3, #4294967295
    4676:	f240 1388 	movw	r3, #392	; 0x188
    467a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    467e:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    4680:	f240 1370 	movw	r3, #368	; 0x170
    4684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4688:	681b      	ldr	r3, [r3, #0]
    468a:	f103 32ff 	add.w	r2, r3, #4294967295
    468e:	f240 1370 	movw	r3, #368	; 0x170
    4692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4696:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    4698:	f000 f9f4 	bl	4a84 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    469c:	6838      	ldr	r0, [r7, #0]
    469e:	f000 f883 	bl	47a8 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    46a2:	f107 0708 	add.w	r7, r7, #8
    46a6:	46bd      	mov	sp, r7
    46a8:	bd80      	pop	{r7, pc}
    46aa:	bf00      	nop

000046ac <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    46ac:	b580      	push	{r7, lr}
    46ae:	b082      	sub	sp, #8
    46b0:	af00      	add	r7, sp, #0
    46b2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    46b4:	f240 03b0 	movw	r3, #176	; 0xb0
    46b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46bc:	681b      	ldr	r3, [r3, #0]
    46be:	687a      	ldr	r2, [r7, #4]
    46c0:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    46c2:	f240 138c 	movw	r3, #396	; 0x18c
    46c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46ca:	681b      	ldr	r3, [r3, #0]
    46cc:	687a      	ldr	r2, [r7, #4]
    46ce:	429a      	cmp	r2, r3
    46d0:	d210      	bcs.n	46f4 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    46d2:	f240 1344 	movw	r3, #324	; 0x144
    46d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46da:	681a      	ldr	r2, [r3, #0]
    46dc:	f240 03b0 	movw	r3, #176	; 0xb0
    46e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46e4:	681b      	ldr	r3, [r3, #0]
    46e6:	f103 0304 	add.w	r3, r3, #4
    46ea:	4610      	mov	r0, r2
    46ec:	4619      	mov	r1, r3
    46ee:	f7fe faf3 	bl	2cd8 <vListInsert>
    46f2:	e01d      	b.n	4730 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    46f4:	f240 1340 	movw	r3, #320	; 0x140
    46f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46fc:	681a      	ldr	r2, [r3, #0]
    46fe:	f240 03b0 	movw	r3, #176	; 0xb0
    4702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4706:	681b      	ldr	r3, [r3, #0]
    4708:	f103 0304 	add.w	r3, r3, #4
    470c:	4610      	mov	r0, r2
    470e:	4619      	mov	r1, r3
    4710:	f7fe fae2 	bl	2cd8 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4714:	f240 0328 	movw	r3, #40	; 0x28
    4718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    471c:	681b      	ldr	r3, [r3, #0]
    471e:	687a      	ldr	r2, [r7, #4]
    4720:	429a      	cmp	r2, r3
    4722:	d205      	bcs.n	4730 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4724:	f240 0328 	movw	r3, #40	; 0x28
    4728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    472c:	687a      	ldr	r2, [r7, #4]
    472e:	601a      	str	r2, [r3, #0]
		}
	}
}
    4730:	f107 0708 	add.w	r7, r7, #8
    4734:	46bd      	mov	sp, r7
    4736:	bd80      	pop	{r7, pc}

00004738 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4738:	b580      	push	{r7, lr}
    473a:	b084      	sub	sp, #16
    473c:	af00      	add	r7, sp, #0
    473e:	4603      	mov	r3, r0
    4740:	6039      	str	r1, [r7, #0]
    4742:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4744:	f04f 0048 	mov.w	r0, #72	; 0x48
    4748:	f000 fa0a 	bl	4b60 <pvPortMalloc>
    474c:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    474e:	68fb      	ldr	r3, [r7, #12]
    4750:	2b00      	cmp	r3, #0
    4752:	d023      	beq.n	479c <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4754:	683b      	ldr	r3, [r7, #0]
    4756:	2b00      	cmp	r3, #0
    4758:	d107      	bne.n	476a <prvAllocateTCBAndStack+0x32>
    475a:	88fb      	ldrh	r3, [r7, #6]
    475c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4760:	4618      	mov	r0, r3
    4762:	f000 f9fd 	bl	4b60 <pvPortMalloc>
    4766:	4603      	mov	r3, r0
    4768:	e000      	b.n	476c <prvAllocateTCBAndStack+0x34>
    476a:	683b      	ldr	r3, [r7, #0]
    476c:	68fa      	ldr	r2, [r7, #12]
    476e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    4770:	68fb      	ldr	r3, [r7, #12]
    4772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4774:	2b00      	cmp	r3, #0
    4776:	d106      	bne.n	4786 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4778:	68f8      	ldr	r0, [r7, #12]
    477a:	f000 fa3d 	bl	4bf8 <vPortFree>
			pxNewTCB = NULL;
    477e:	f04f 0300 	mov.w	r3, #0
    4782:	60fb      	str	r3, [r7, #12]
    4784:	e00a      	b.n	479c <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    4786:	68fb      	ldr	r3, [r7, #12]
    4788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    478a:	88fb      	ldrh	r3, [r7, #6]
    478c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4790:	4610      	mov	r0, r2
    4792:	f04f 01a5 	mov.w	r1, #165	; 0xa5
    4796:	461a      	mov	r2, r3
    4798:	f001 f91c 	bl	59d4 <memset>
		}
	}

	return pxNewTCB;
    479c:	68fb      	ldr	r3, [r7, #12]
}
    479e:	4618      	mov	r0, r3
    47a0:	f107 0710 	add.w	r7, r7, #16
    47a4:	46bd      	mov	sp, r7
    47a6:	bd80      	pop	{r7, pc}

000047a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    47a8:	b580      	push	{r7, lr}
    47aa:	b082      	sub	sp, #8
    47ac:	af00      	add	r7, sp, #0
    47ae:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    47b0:	687b      	ldr	r3, [r7, #4]
    47b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    47b4:	4618      	mov	r0, r3
    47b6:	f000 fa1f 	bl	4bf8 <vPortFree>
		vPortFree( pxTCB );
    47ba:	6878      	ldr	r0, [r7, #4]
    47bc:	f000 fa1c 	bl	4bf8 <vPortFree>
	}
    47c0:	f107 0708 	add.w	r7, r7, #8
    47c4:	46bd      	mov	sp, r7
    47c6:	bd80      	pop	{r7, pc}

000047c8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    47c8:	b480      	push	{r7}
    47ca:	b083      	sub	sp, #12
    47cc:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    47ce:	f240 03b0 	movw	r3, #176	; 0xb0
    47d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47d6:	681b      	ldr	r3, [r3, #0]
    47d8:	607b      	str	r3, [r7, #4]

		return xReturn;
    47da:	687b      	ldr	r3, [r7, #4]
	}
    47dc:	4618      	mov	r0, r3
    47de:	f107 070c 	add.w	r7, r7, #12
    47e2:	46bd      	mov	sp, r7
    47e4:	bc80      	pop	{r7}
    47e6:	4770      	bx	lr

000047e8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    47e8:	b580      	push	{r7, lr}
    47ea:	b084      	sub	sp, #16
    47ec:	af00      	add	r7, sp, #0
    47ee:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    47f0:	687b      	ldr	r3, [r7, #4]
    47f2:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    47f4:	68fb      	ldr	r3, [r7, #12]
    47f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    47f8:	f240 03b0 	movw	r3, #176	; 0xb0
    47fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4800:	681b      	ldr	r3, [r3, #0]
    4802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4804:	429a      	cmp	r2, r3
    4806:	d257      	bcs.n	48b8 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4808:	f240 03b0 	movw	r3, #176	; 0xb0
    480c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4810:	681b      	ldr	r3, [r3, #0]
    4812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4814:	f1c3 0205 	rsb	r2, r3, #5
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    481c:	68fb      	ldr	r3, [r7, #12]
    481e:	6959      	ldr	r1, [r3, #20]
    4820:	68fb      	ldr	r3, [r7, #12]
    4822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4824:	4613      	mov	r3, r2
    4826:	ea4f 0383 	mov.w	r3, r3, lsl #2
    482a:	189b      	adds	r3, r3, r2
    482c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4830:	461a      	mov	r2, r3
    4832:	f240 03b4 	movw	r3, #180	; 0xb4
    4836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    483a:	18d3      	adds	r3, r2, r3
    483c:	4299      	cmp	r1, r3
    483e:	d133      	bne.n	48a8 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    4840:	68fb      	ldr	r3, [r7, #12]
    4842:	f103 0304 	add.w	r3, r3, #4
    4846:	4618      	mov	r0, r3
    4848:	f7fe fa80 	bl	2d4c <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    484c:	f240 03b0 	movw	r3, #176	; 0xb0
    4850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4854:	681b      	ldr	r3, [r3, #0]
    4856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4858:	68fb      	ldr	r3, [r7, #12]
    485a:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    485c:	68fb      	ldr	r3, [r7, #12]
    485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4860:	f240 1394 	movw	r3, #404	; 0x194
    4864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	429a      	cmp	r2, r3
    486c:	d906      	bls.n	487c <vTaskPriorityInherit+0x94>
    486e:	68fb      	ldr	r3, [r7, #12]
    4870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4872:	f240 1394 	movw	r3, #404	; 0x194
    4876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    487a:	601a      	str	r2, [r3, #0]
    487c:	68fb      	ldr	r3, [r7, #12]
    487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4880:	4613      	mov	r3, r2
    4882:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4886:	189b      	adds	r3, r3, r2
    4888:	ea4f 0383 	mov.w	r3, r3, lsl #2
    488c:	461a      	mov	r2, r3
    488e:	f240 03b4 	movw	r3, #180	; 0xb4
    4892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4896:	18d2      	adds	r2, r2, r3
    4898:	68fb      	ldr	r3, [r7, #12]
    489a:	f103 0304 	add.w	r3, r3, #4
    489e:	4610      	mov	r0, r2
    48a0:	4619      	mov	r1, r3
    48a2:	f7fe f9f1 	bl	2c88 <vListInsertEnd>
    48a6:	e007      	b.n	48b8 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    48a8:	f240 03b0 	movw	r3, #176	; 0xb0
    48ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b0:	681b      	ldr	r3, [r3, #0]
    48b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48b4:	68fb      	ldr	r3, [r7, #12]
    48b6:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    48b8:	f107 0710 	add.w	r7, r7, #16
    48bc:	46bd      	mov	sp, r7
    48be:	bd80      	pop	{r7, pc}

000048c0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    48c0:	b580      	push	{r7, lr}
    48c2:	b084      	sub	sp, #16
    48c4:	af00      	add	r7, sp, #0
    48c6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    48cc:	687b      	ldr	r3, [r7, #4]
    48ce:	2b00      	cmp	r3, #0
    48d0:	d03a      	beq.n	4948 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    48d2:	68fb      	ldr	r3, [r7, #12]
    48d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48d6:	68fb      	ldr	r3, [r7, #12]
    48d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    48da:	429a      	cmp	r2, r3
    48dc:	d034      	beq.n	4948 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    48de:	68fb      	ldr	r3, [r7, #12]
    48e0:	f103 0304 	add.w	r3, r3, #4
    48e4:	4618      	mov	r0, r3
    48e6:	f7fe fa31 	bl	2d4c <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    48ea:	68fb      	ldr	r3, [r7, #12]
    48ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    48ee:	68fb      	ldr	r3, [r7, #12]
    48f0:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    48f2:	68fb      	ldr	r3, [r7, #12]
    48f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48f6:	f1c3 0205 	rsb	r2, r3, #5
    48fa:	68fb      	ldr	r3, [r7, #12]
    48fc:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    48fe:	68fb      	ldr	r3, [r7, #12]
    4900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4902:	f240 1394 	movw	r3, #404	; 0x194
    4906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	429a      	cmp	r2, r3
    490e:	d906      	bls.n	491e <vTaskPriorityDisinherit+0x5e>
    4910:	68fb      	ldr	r3, [r7, #12]
    4912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4914:	f240 1394 	movw	r3, #404	; 0x194
    4918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    491c:	601a      	str	r2, [r3, #0]
    491e:	68fb      	ldr	r3, [r7, #12]
    4920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4922:	4613      	mov	r3, r2
    4924:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4928:	189b      	adds	r3, r3, r2
    492a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    492e:	461a      	mov	r2, r3
    4930:	f240 03b4 	movw	r3, #180	; 0xb4
    4934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4938:	18d2      	adds	r2, r2, r3
    493a:	68fb      	ldr	r3, [r7, #12]
    493c:	f103 0304 	add.w	r3, r3, #4
    4940:	4610      	mov	r0, r2
    4942:	4619      	mov	r1, r3
    4944:	f7fe f9a0 	bl	2c88 <vListInsertEnd>
			}
		}
	}
    4948:	f107 0710 	add.w	r7, r7, #16
    494c:	46bd      	mov	sp, r7
    494e:	bd80      	pop	{r7, pc}

00004950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4950:	b480      	push	{r7}
    4952:	b085      	sub	sp, #20
    4954:	af00      	add	r7, sp, #0
    4956:	60f8      	str	r0, [r7, #12]
    4958:	60b9      	str	r1, [r7, #8]
    495a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    495c:	68fb      	ldr	r3, [r7, #12]
    495e:	f1a3 0304 	sub.w	r3, r3, #4
    4962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4964:	68fb      	ldr	r3, [r7, #12]
    4966:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    496a:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    496c:	68fb      	ldr	r3, [r7, #12]
    496e:	f1a3 0304 	sub.w	r3, r3, #4
    4972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4974:	68ba      	ldr	r2, [r7, #8]
    4976:	68fb      	ldr	r3, [r7, #12]
    4978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    497a:	68fb      	ldr	r3, [r7, #12]
    497c:	f1a3 0304 	sub.w	r3, r3, #4
    4980:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4982:	68fb      	ldr	r3, [r7, #12]
    4984:	f04f 0200 	mov.w	r2, #0
    4988:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    498a:	68fb      	ldr	r3, [r7, #12]
    498c:	f1a3 0314 	sub.w	r3, r3, #20
    4990:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    4992:	687a      	ldr	r2, [r7, #4]
    4994:	68fb      	ldr	r3, [r7, #12]
    4996:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    4998:	68fb      	ldr	r3, [r7, #12]
    499a:	f1a3 0320 	sub.w	r3, r3, #32
    499e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    49a0:	68fb      	ldr	r3, [r7, #12]
}
    49a2:	4618      	mov	r0, r3
    49a4:	f107 0714 	add.w	r7, r7, #20
    49a8:	46bd      	mov	sp, r7
    49aa:	bc80      	pop	{r7}
    49ac:	4770      	bx	lr
    49ae:	bf00      	nop

000049b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    49b0:	4b06      	ldr	r3, [pc, #24]	; (49cc <pxCurrentTCBConst2>)
    49b2:	6819      	ldr	r1, [r3, #0]
    49b4:	6808      	ldr	r0, [r1, #0]
    49b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    49ba:	f380 8809 	msr	PSP, r0
    49be:	f04f 0000 	mov.w	r0, #0
    49c2:	f380 8811 	msr	BASEPRI, r0
    49c6:	f04e 0e0d 	orr.w	lr, lr, #13
    49ca:	4770      	bx	lr

000049cc <pxCurrentTCBConst2>:
    49cc:	200000b0 	.word	0x200000b0

000049d0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    49d0:	4862      	ldr	r0, [pc, #392]	; (4b5c <prvSetupTimerInterrupt+0x2c>)
    49d2:	6800      	ldr	r0, [r0, #0]
    49d4:	6800      	ldr	r0, [r0, #0]
    49d6:	f380 8808 	msr	MSP, r0
    49da:	b662      	cpsie	i
    49dc:	df00      	svc	0
    49de:	bf00      	nop

000049e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    49e0:	b580      	push	{r7, lr}
    49e2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    49e4:	f64e 5320 	movw	r3, #60704	; 0xed20
    49e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    49ec:	f64e 5220 	movw	r2, #60704	; 0xed20
    49f0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    49f4:	6812      	ldr	r2, [r2, #0]
    49f6:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    49fa:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    49fc:	f64e 5320 	movw	r3, #60704	; 0xed20
    4a00:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4a04:	f64e 5220 	movw	r2, #60704	; 0xed20
    4a08:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4a0c:	6812      	ldr	r2, [r2, #0]
    4a0e:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    4a12:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4a14:	f000 f88c 	bl	4b30 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    4a18:	f240 032c 	movw	r3, #44	; 0x2c
    4a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a20:	f04f 0200 	mov.w	r2, #0
    4a24:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4a26:	f7ff ffd3 	bl	49d0 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4a2a:	f04f 0300 	mov.w	r3, #0
}
    4a2e:	4618      	mov	r0, r3
    4a30:	bd80      	pop	{r7, pc}
    4a32:	bf00      	nop

00004a34 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4a34:	b480      	push	{r7}
    4a36:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4a38:	46bd      	mov	sp, r7
    4a3a:	bc80      	pop	{r7}
    4a3c:	4770      	bx	lr
    4a3e:	bf00      	nop

00004a40 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4a40:	b480      	push	{r7}
    4a42:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4a44:	f64e 5304 	movw	r3, #60676	; 0xed04
    4a48:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a50:	601a      	str	r2, [r3, #0]
}
    4a52:	46bd      	mov	sp, r7
    4a54:	bc80      	pop	{r7}
    4a56:	4770      	bx	lr

00004a58 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4a58:	b480      	push	{r7}
    4a5a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4a5c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4a60:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4a64:	f240 032c 	movw	r3, #44	; 0x2c
    4a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	f103 0201 	add.w	r2, r3, #1
    4a72:	f240 032c 	movw	r3, #44	; 0x2c
    4a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7a:	601a      	str	r2, [r3, #0]
}
    4a7c:	46bd      	mov	sp, r7
    4a7e:	bc80      	pop	{r7}
    4a80:	4770      	bx	lr
    4a82:	bf00      	nop

00004a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4a84:	b480      	push	{r7}
    4a86:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4a88:	f240 032c 	movw	r3, #44	; 0x2c
    4a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	f103 32ff 	add.w	r2, r3, #4294967295
    4a96:	f240 032c 	movw	r3, #44	; 0x2c
    4a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    4aa0:	f240 032c 	movw	r3, #44	; 0x2c
    4aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa8:	681b      	ldr	r3, [r3, #0]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d103      	bne.n	4ab6 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
    4aae:	f04f 0000 	mov.w	r0, #0
    4ab2:	f380 8811 	msr	BASEPRI, r0
	}
}
    4ab6:	46bd      	mov	sp, r7
    4ab8:	bc80      	pop	{r7}
    4aba:	4770      	bx	lr

00004abc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4abc:	f3ef 8009 	mrs	r0, PSP
    4ac0:	4b0c      	ldr	r3, [pc, #48]	; (4af4 <pxCurrentTCBConst>)
    4ac2:	681a      	ldr	r2, [r3, #0]
    4ac4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4ac8:	6010      	str	r0, [r2, #0]
    4aca:	e92d 4008 	stmdb	sp!, {r3, lr}
    4ace:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4ad2:	f380 8811 	msr	BASEPRI, r0
    4ad6:	f7ff fb83 	bl	41e0 <vTaskSwitchContext>
    4ada:	f04f 0000 	mov.w	r0, #0
    4ade:	f380 8811 	msr	BASEPRI, r0
    4ae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4ae6:	6819      	ldr	r1, [r3, #0]
    4ae8:	6808      	ldr	r0, [r1, #0]
    4aea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4aee:	f380 8809 	msr	PSP, r0
    4af2:	4770      	bx	lr

00004af4 <pxCurrentTCBConst>:
    4af4:	200000b0 	.word	0x200000b0

00004af8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    4af8:	b580      	push	{r7, lr}
    4afa:	b082      	sub	sp, #8
    4afc:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4afe:	f64e 5304 	movw	r3, #60676	; 0xed04
    4b02:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4b0a:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    4b0c:	f04f 0300 	mov.w	r3, #0
    4b10:	607b      	str	r3, [r7, #4]
    4b12:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4b16:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    4b1a:	f7ff fa7b 	bl	4014 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4b1e:	f04f 0000 	mov.w	r0, #0
    4b22:	f380 8811 	msr	BASEPRI, r0
}
    4b26:	f107 0708 	add.w	r7, r7, #8
    4b2a:	46bd      	mov	sp, r7
    4b2c:	bd80      	pop	{r7, pc}
    4b2e:	bf00      	nop

00004b30 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4b30:	b480      	push	{r7}
    4b32:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4b34:	f24e 0314 	movw	r3, #57364	; 0xe014
    4b38:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4b3c:	f64f 427f 	movw	r2, #64639	; 0xfc7f
    4b40:	f2c0 020a 	movt	r2, #10
    4b44:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    4b46:	f24e 0310 	movw	r3, #57360	; 0xe010
    4b4a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4b4e:	f04f 0207 	mov.w	r2, #7
    4b52:	601a      	str	r2, [r3, #0]
}
    4b54:	46bd      	mov	sp, r7
    4b56:	bc80      	pop	{r7}
    4b58:	4770      	bx	lr
    4b5a:	0000      	.short	0x0000
    4b5c:	e000ed08 	.word	0xe000ed08

00004b60 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4b60:	b580      	push	{r7, lr}
    4b62:	b084      	sub	sp, #16
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    4b68:	f04f 0300 	mov.w	r3, #0
    4b6c:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    4b6e:	687b      	ldr	r3, [r7, #4]
    4b70:	f003 0307 	and.w	r3, r3, #7
    4b74:	2b00      	cmp	r3, #0
    4b76:	d005      	beq.n	4b84 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	f023 0307 	bic.w	r3, r3, #7
    4b7e:	f103 0308 	add.w	r3, r3, #8
    4b82:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
    4b84:	f7ff f94e 	bl	3e24 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4b88:	f244 53b0 	movw	r3, #17840	; 0x45b0
    4b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b90:	681a      	ldr	r2, [r3, #0]
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	18d2      	adds	r2, r2, r3
    4b96:	f244 33ff 	movw	r3, #17407	; 0x43ff
    4b9a:	429a      	cmp	r2, r3
    4b9c:	d824      	bhi.n	4be8 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    4b9e:	f244 53b0 	movw	r3, #17840	; 0x45b0
    4ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ba6:	681a      	ldr	r2, [r3, #0]
    4ba8:	687b      	ldr	r3, [r7, #4]
    4baa:	18d2      	adds	r2, r2, r3
    4bac:	f244 53b0 	movw	r3, #17840	; 0x45b0
    4bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb4:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4bb6:	429a      	cmp	r2, r3
    4bb8:	d916      	bls.n	4be8 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    4bba:	f244 53b0 	movw	r3, #17840	; 0x45b0
    4bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc2:	681a      	ldr	r2, [r3, #0]
    4bc4:	f240 13b0 	movw	r3, #432	; 0x1b0
    4bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bcc:	18d3      	adds	r3, r2, r3
    4bce:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
    4bd0:	f244 53b0 	movw	r3, #17840	; 0x45b0
    4bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd8:	681a      	ldr	r2, [r3, #0]
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	18d2      	adds	r2, r2, r3
    4bde:	f244 53b0 	movw	r3, #17840	; 0x45b0
    4be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4be6:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
    4be8:	f7ff f92e 	bl	3e48 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    4bec:	68fb      	ldr	r3, [r7, #12]
}
    4bee:	4618      	mov	r0, r3
    4bf0:	f107 0710 	add.w	r7, r7, #16
    4bf4:	46bd      	mov	sp, r7
    4bf6:	bd80      	pop	{r7, pc}

00004bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4bf8:	b480      	push	{r7}
    4bfa:	b083      	sub	sp, #12
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c
	for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    4c00:	f107 070c 	add.w	r7, r7, #12
    4c04:	46bd      	mov	sp, r7
    4c06:	bc80      	pop	{r7}
    4c08:	4770      	bx	lr
    4c0a:	bf00      	nop

00004c0c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4c0c:	b480      	push	{r7}
    4c0e:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    4c10:	f244 53b0 	movw	r3, #17840	; 0x45b0
    4c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c18:	f04f 0200 	mov.w	r2, #0
    4c1c:	601a      	str	r2, [r3, #0]
}
    4c1e:	46bd      	mov	sp, r7
    4c20:	bc80      	pop	{r7}
    4c22:	4770      	bx	lr

00004c24 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4c24:	b480      	push	{r7}
    4c26:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    4c28:	f244 53b0 	movw	r3, #17840	; 0x45b0
    4c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c30:	681b      	ldr	r3, [r3, #0]
    4c32:	f5c3 4388 	rsb	r3, r3, #17408	; 0x4400
}
    4c36:	4618      	mov	r0, r3
    4c38:	46bd      	mov	sp, r7
    4c3a:	bc80      	pop	{r7}
    4c3c:	4770      	bx	lr
    4c3e:	bf00      	nop

00004c40 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    4c40:	b580      	push	{r7, lr}
    4c42:	b082      	sub	sp, #8
    4c44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    4c46:	f04f 0010 	mov.w	r0, #16
    4c4a:	f04f 0101 	mov.w	r1, #1
    4c4e:	f7fc f919 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    4c52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4c56:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4c5e:	f04f 0201 	mov.w	r2, #1
    4c62:	f7fc fc77 	bl	1554 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    4c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4c6a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    4c6c:	f04f 0310 	mov.w	r3, #16
    4c70:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4c72:	f04f 0303 	mov.w	r3, #3
    4c76:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    4c78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4c7c:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4c80:	f107 0304 	add.w	r3, r7, #4
    4c84:	4619      	mov	r1, r3
    4c86:	f7fc fb03 	bl	1290 <GPIO_Init>
}
    4c8a:	f107 0708 	add.w	r7, r7, #8
    4c8e:	46bd      	mov	sp, r7
    4c90:	bd80      	pop	{r7, pc}
    4c92:	bf00      	nop

00004c94 <init_button>:

void init_button(void)
{
    4c94:	b580      	push	{r7, lr}
    4c96:	b082      	sub	sp, #8
    4c98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    4c9a:	f04f 0004 	mov.w	r0, #4
    4c9e:	f04f 0101 	mov.w	r1, #1
    4ca2:	f7fc f8ef 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    4ca6:	f04f 0301 	mov.w	r3, #1
    4caa:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    4cac:	f04f 0304 	mov.w	r3, #4
    4cb0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4cb2:	f04f 0303 	mov.w	r3, #3
    4cb6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    4cb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4cbc:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4cc0:	f107 0304 	add.w	r3, r7, #4
    4cc4:	4619      	mov	r1, r3
    4cc6:	f7fc fae3 	bl	1290 <GPIO_Init>
}
    4cca:	f107 0708 	add.w	r7, r7, #8
    4cce:	46bd      	mov	sp, r7
    4cd0:	bd80      	pop	{r7, pc}
    4cd2:	bf00      	nop

00004cd4 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    4cd4:	b580      	push	{r7, lr}
    4cd6:	b084      	sub	sp, #16
    4cd8:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    4cda:	f04f 0001 	mov.w	r0, #1
    4cde:	f04f 0101 	mov.w	r1, #1
    4ce2:	f7fc f8cf 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    4ce6:	f04f 0000 	mov.w	r0, #0
    4cea:	f04f 0100 	mov.w	r1, #0
    4cee:	f7fc fd43 	bl	1778 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    4cf2:	f04f 0301 	mov.w	r3, #1
    4cf6:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    4cf8:	f04f 0300 	mov.w	r3, #0
    4cfc:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    4cfe:	f04f 0308 	mov.w	r3, #8
    4d02:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    4d04:	f04f 0301 	mov.w	r3, #1
    4d08:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    4d0a:	f107 0308 	add.w	r3, r7, #8
    4d0e:	4618      	mov	r0, r3
    4d10:	f7fd faa0 	bl	2254 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    4d14:	f04f 0306 	mov.w	r3, #6
    4d18:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    4d1a:	f04f 030f 	mov.w	r3, #15
    4d1e:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    4d20:	f04f 030f 	mov.w	r3, #15
    4d24:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    4d26:	f04f 0301 	mov.w	r3, #1
    4d2a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    4d2c:	f107 0304 	add.w	r3, r7, #4
    4d30:	4618      	mov	r0, r3
    4d32:	f7fd fbd9 	bl	24e8 <NVIC_Init>
}
    4d36:	f107 0710 	add.w	r7, r7, #16
    4d3a:	46bd      	mov	sp, r7
    4d3c:	bd80      	pop	{r7, pc}
    4d3e:	bf00      	nop

00004d40 <init_rs232>:

void init_rs232(void)
{
    4d40:	b580      	push	{r7, lr}
    4d42:	b086      	sub	sp, #24
    4d44:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    4d46:	f04f 0005 	mov.w	r0, #5
    4d4a:	f04f 0101 	mov.w	r1, #1
    4d4e:	f7fc f899 	bl	e84 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    4d52:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4d56:	f04f 0101 	mov.w	r1, #1
    4d5a:	f7fc f8bd 	bl	ed8 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    4d5e:	f04f 0308 	mov.w	r3, #8
    4d62:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    4d64:	f04f 0304 	mov.w	r3, #4
    4d68:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    4d6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4d6e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4d72:	f107 0304 	add.w	r3, r7, #4
    4d76:	4619      	mov	r1, r3
    4d78:	f7fc fa8a 	bl	1290 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    4d7c:	f04f 0304 	mov.w	r3, #4
    4d80:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4d82:	f04f 0303 	mov.w	r3, #3
    4d86:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    4d88:	f04f 0318 	mov.w	r3, #24
    4d8c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    4d8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4d92:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4d96:	f107 0304 	add.w	r3, r7, #4
    4d9a:	4619      	mov	r1, r3
    4d9c:	f7fc fa78 	bl	1290 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    4da0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    4da4:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    4da6:	f04f 0300 	mov.w	r3, #0
    4daa:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    4dac:	f04f 0300 	mov.w	r3, #0
    4db0:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    4db2:	f04f 0300 	mov.w	r3, #0
    4db6:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    4db8:	f04f 0300 	mov.w	r3, #0
    4dbc:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    4dbe:	f04f 030c 	mov.w	r3, #12
    4dc2:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    4dc4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4dc8:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4dcc:	f107 0308 	add.w	r3, r7, #8
    4dd0:	4619      	mov	r1, r3
    4dd2:	f7fc fda5 	bl	1920 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    4dd6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4dda:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4dde:	f04f 0101 	mov.w	r1, #1
    4de2:	f7fc fedb 	bl	1b9c <USART_Cmd>
}
    4de6:	f107 0718 	add.w	r7, r7, #24
    4dea:	46bd      	mov	sp, r7
    4dec:	bd80      	pop	{r7, pc}
    4dee:	bf00      	nop

00004df0 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    4df0:	b580      	push	{r7, lr}
    4df2:	b082      	sub	sp, #8
    4df4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    4df6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4dfa:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4dfe:	f240 7127 	movw	r1, #1831	; 0x727
    4e02:	f04f 0200 	mov.w	r2, #0
    4e06:	f7fc fee9 	bl	1bdc <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    4e0a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4e0e:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4e12:	f240 5125 	movw	r1, #1317	; 0x525
    4e16:	f04f 0201 	mov.w	r2, #1
    4e1a:	f7fc fedf 	bl	1bdc <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    4e1e:	f04f 0326 	mov.w	r3, #38	; 0x26
    4e22:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    4e24:	f04f 0300 	mov.w	r3, #0
    4e28:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    4e2a:	f04f 0301 	mov.w	r3, #1
    4e2e:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    4e30:	f107 0304 	add.w	r3, r7, #4
    4e34:	4618      	mov	r0, r3
    4e36:	f7fd fb57 	bl	24e8 <NVIC_Init>
}
    4e3a:	f107 0708 	add.w	r7, r7, #8
    4e3e:	46bd      	mov	sp, r7
    4e40:	bd80      	pop	{r7, pc}
    4e42:	bf00      	nop

00004e44 <enable_rs232>:

void enable_rs232(void)
{
    4e44:	b580      	push	{r7, lr}
    4e46:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    4e48:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4e4c:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4e50:	f04f 0101 	mov.w	r1, #1
    4e54:	f7fc fea2 	bl	1b9c <USART_Cmd>
}
    4e58:	bd80      	pop	{r7, pc}
    4e5a:	bf00      	nop

00004e5c <USART2_IRQHandler>:
} serial_ch_msg;

/* IRQ handler to handle USART2 interruptss (both transmit and receive
 * interrupts). */
void USART2_IRQHandler()
{
    4e5c:	b580      	push	{r7, lr}
    4e5e:	b082      	sub	sp, #8
    4e60:	af00      	add	r7, sp, #0
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	serial_ch_msg rx_msg;

	/* If this interrupt is for a transmit... */
	if (USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
    4e62:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4e66:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4e6a:	f240 7127 	movw	r1, #1831	; 0x727
    4e6e:	f7fd f943 	bl	20f8 <USART_GetITStatus>
    4e72:	4603      	mov	r3, r0
    4e74:	2b00      	cmp	r3, #0
    4e76:	d01a      	beq.n	4eae <USART2_IRQHandler+0x52>
		/* "give" the serial_tx_wait_sem semaphore to notfiy processes
		 * that the buffer has a spot free for the next byte.
		 */
		xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
    4e78:	f244 53bc 	movw	r3, #17852	; 0x45bc
    4e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e80:	681b      	ldr	r3, [r3, #0]
    4e82:	4618      	mov	r0, r3
    4e84:	f04f 0100 	mov.w	r1, #0
    4e88:	f244 52c4 	movw	r2, #17860	; 0x45c4
    4e8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e90:	f04f 0300 	mov.w	r3, #0
    4e94:	f7fe f90e 	bl	30b4 <xQueueGenericSendFromISR>

		/* Diables the transmit interrupt. */
		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    4e98:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4e9c:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4ea0:	f240 7127 	movw	r1, #1831	; 0x727
    4ea4:	f04f 0200 	mov.w	r2, #0
    4ea8:	f7fc fe98 	bl	1bdc <USART_ITConfig>
    4eac:	e029      	b.n	4f02 <USART2_IRQHandler+0xa6>
		/* If this interrupt is for a receive... */
	}
	else if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
    4eae:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4eb2:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4eb6:	f240 5125 	movw	r1, #1317	; 0x525
    4eba:	f7fd f91d 	bl	20f8 <USART_GetITStatus>
    4ebe:	4603      	mov	r3, r0
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d01d      	beq.n	4f00 <USART2_IRQHandler+0xa4>
		/* Receive the byte from the buffer. */
		rx_msg.ch = USART_ReceiveData(USART2);
    4ec4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4ec8:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4ecc:	f7fc ffa4 	bl	1e18 <USART_ReceiveData>
    4ed0:	4603      	mov	r3, r0
    4ed2:	b2db      	uxtb	r3, r3
    4ed4:	713b      	strb	r3, [r7, #4]

		/* Queue the received byte. */
		if(!xQueueSendToBackFromISR(serial_rx_queue, &rx_msg, &xHigherPriorityTaskWoken)) {
    4ed6:	f244 53c0 	movw	r3, #17856	; 0x45c0
    4eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ede:	681b      	ldr	r3, [r3, #0]
    4ee0:	4618      	mov	r0, r3
    4ee2:	f107 0304 	add.w	r3, r7, #4
    4ee6:	4619      	mov	r1, r3
    4ee8:	f244 52c4 	movw	r2, #17860	; 0x45c4
    4eec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ef0:	f04f 0300 	mov.w	r3, #0
    4ef4:	f7fe f8de 	bl	30b4 <xQueueGenericSendFromISR>
    4ef8:	4603      	mov	r3, r0
    4efa:	2b00      	cmp	r3, #0
    4efc:	d101      	bne.n	4f02 <USART2_IRQHandler+0xa6>
			/* If there was an error queueing the received byte,
			 * freeze. */
			while(1);
    4efe:	e7fe      	b.n	4efe <USART2_IRQHandler+0xa2>
	}
	else {
		/* Only transmit and receive interrupts should be enabled.
		 * If this is another type of interrupt, freeze.
		 */
		while(1);
    4f00:	e7fe      	b.n	4f00 <USART2_IRQHandler+0xa4>
	}

	if (xHigherPriorityTaskWoken) {
    4f02:	f244 53c4 	movw	r3, #17860	; 0x45c4
    4f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d001      	beq.n	4f14 <USART2_IRQHandler+0xb8>
		taskYIELD();
    4f10:	f7ff fd96 	bl	4a40 <vPortYieldFromISR>
	}
}
    4f14:	f107 0708 	add.w	r7, r7, #8
    4f18:	46bd      	mov	sp, r7
    4f1a:	bd80      	pop	{r7, pc}

00004f1c <send_byte>:

void send_byte(char ch)
{
    4f1c:	b580      	push	{r7, lr}
    4f1e:	b082      	sub	sp, #8
    4f20:	af00      	add	r7, sp, #0
    4f22:	4603      	mov	r3, r0
    4f24:	71fb      	strb	r3, [r7, #7]
	/* Wait until the RS232 port can receive another byte (this semaphore
	 * is "given" by the RS232 port interrupt when the buffer has room for
	 * another byte.
	 */
	while (!xSemaphoreTake(serial_tx_wait_sem, portMAX_DELAY));
    4f26:	bf00      	nop
    4f28:	f244 53bc 	movw	r3, #17852	; 0x45bc
    4f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f30:	681b      	ldr	r3, [r3, #0]
    4f32:	4618      	mov	r0, r3
    4f34:	f04f 0100 	mov.w	r1, #0
    4f38:	f04f 32ff 	mov.w	r2, #4294967295
    4f3c:	f04f 0300 	mov.w	r3, #0
    4f40:	f7fe f900 	bl	3144 <xQueueGenericReceive>
    4f44:	4603      	mov	r3, r0
    4f46:	2b00      	cmp	r3, #0
    4f48:	d0ee      	beq.n	4f28 <send_byte+0xc>

	/* Send the byte and enable the transmit interrupt (it is disabled by
	 * the interrupt).
	 */
	USART_SendData(USART2, ch);
    4f4a:	79fb      	ldrb	r3, [r7, #7]
    4f4c:	b29b      	uxth	r3, r3
    4f4e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4f52:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4f56:	4619      	mov	r1, r3
    4f58:	f7fc ff4a 	bl	1df0 <USART_SendData>
	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    4f5c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    4f60:	f2c4 0000 	movt	r0, #16384	; 0x4000
    4f64:	f240 7127 	movw	r1, #1831	; 0x727
    4f68:	f04f 0201 	mov.w	r2, #1
    4f6c:	f7fc fe36 	bl	1bdc <USART_ITConfig>
}
    4f70:	f107 0708 	add.w	r7, r7, #8
    4f74:	46bd      	mov	sp, r7
    4f76:	bd80      	pop	{r7, pc}

00004f78 <receive_byte>:

char receive_byte()
{
    4f78:	b580      	push	{r7, lr}
    4f7a:	b082      	sub	sp, #8
    4f7c:	af00      	add	r7, sp, #0
	serial_ch_msg msg;

	/* Wait for a byte to be queued by the receive interrupts handler. */
	while (!xQueueReceive(serial_rx_queue, &msg, portMAX_DELAY));
    4f7e:	bf00      	nop
    4f80:	f244 53c0 	movw	r3, #17856	; 0x45c0
    4f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f88:	681b      	ldr	r3, [r3, #0]
    4f8a:	4618      	mov	r0, r3
    4f8c:	f107 0304 	add.w	r3, r7, #4
    4f90:	4619      	mov	r1, r3
    4f92:	f04f 32ff 	mov.w	r2, #4294967295
    4f96:	f04f 0300 	mov.w	r3, #0
    4f9a:	f7fe f8d3 	bl	3144 <xQueueGenericReceive>
    4f9e:	4603      	mov	r3, r0
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d0ed      	beq.n	4f80 <receive_byte+0x8>

	return msg.ch;
    4fa4:	793b      	ldrb	r3, [r7, #4]
}
    4fa6:	4618      	mov	r0, r3
    4fa8:	f107 0708 	add.w	r7, r7, #8
    4fac:	46bd      	mov	sp, r7
    4fae:	bd80      	pop	{r7, pc}

00004fb0 <led_flash_task>:

void led_flash_task(void *pvParameters)
{
    4fb0:	b580      	push	{r7, lr}
    4fb2:	b082      	sub	sp, #8
    4fb4:	af00      	add	r7, sp, #0
    4fb6:	6078      	str	r0, [r7, #4]
	while (1) {
		/* Toggle the LED. */
		GPIOC->ODR = GPIOC->ODR ^ 0x00001000;
    4fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4fbc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4fc4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4fc8:	68d2      	ldr	r2, [r2, #12]
    4fca:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
    4fce:	60da      	str	r2, [r3, #12]

		/* Wait one second. */
		vTaskDelay(100);
    4fd0:	f04f 0064 	mov.w	r0, #100	; 0x64
    4fd4:	f7fe fcb4 	bl	3940 <vTaskDelay>
	}
    4fd8:	e7ee      	b.n	4fb8 <led_flash_task+0x8>
    4fda:	bf00      	nop

00004fdc <rs232_xmit_msg_task>:
}

void rs232_xmit_msg_task(void *pvParameters)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	b09c      	sub	sp, #112	; 0x70
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	6078      	str	r0, [r7, #4]

	while (1) {
		/* Read from the queue.  Keep trying until a message is
		 * received.  This will block for a period of time (specified
		 * by portMAX_DELAY). */
		while (!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));
    4fe4:	e7ff      	b.n	4fe6 <rs232_xmit_msg_task+0xa>
    4fe6:	bf00      	nop
    4fe8:	f244 53b8 	movw	r3, #17848	; 0x45b8
    4fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff0:	681b      	ldr	r3, [r3, #0]
    4ff2:	4618      	mov	r0, r3
    4ff4:	f107 0308 	add.w	r3, r7, #8
    4ff8:	4619      	mov	r1, r3
    4ffa:	f04f 32ff 	mov.w	r2, #4294967295
    4ffe:	f04f 0300 	mov.w	r3, #0
    5002:	f7fe f89f 	bl	3144 <xQueueGenericReceive>
    5006:	4603      	mov	r3, r0
    5008:	2b00      	cmp	r3, #0
    500a:	d0ed      	beq.n	4fe8 <rs232_xmit_msg_task+0xc>

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
    500c:	f04f 0300 	mov.w	r3, #0
    5010:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (msg.str[curr_char] != '\0') {
    5012:	e00b      	b.n	502c <rs232_xmit_msg_task+0x50>
			send_byte(msg.str[curr_char]);
    5014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    5016:	f107 0208 	add.w	r2, r7, #8
    501a:	18d3      	adds	r3, r2, r3
    501c:	781b      	ldrb	r3, [r3, #0]
    501e:	4618      	mov	r0, r3
    5020:	f7ff ff7c 	bl	4f1c <send_byte>
			curr_char++;
    5024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    5026:	f103 0301 	add.w	r3, r3, #1
    502a:	66fb      	str	r3, [r7, #108]	; 0x6c
		 * by portMAX_DELAY). */
		while (!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
		while (msg.str[curr_char] != '\0') {
    502c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    502e:	f107 0208 	add.w	r2, r7, #8
    5032:	18d3      	adds	r3, r2, r3
    5034:	781b      	ldrb	r3, [r3, #0]
    5036:	2b00      	cmp	r3, #0
    5038:	d1ec      	bne.n	5014 <rs232_xmit_msg_task+0x38>
			send_byte(msg.str[curr_char]);
			curr_char++;
		}
	}
    503a:	e7d4      	b.n	4fe6 <rs232_xmit_msg_task+0xa>

0000503c <queue_str_task>:
/* Repeatedly queues a string to be sent to the RS232.
 *   delay - the time to wait between sending messages.  A delay of 1 means
 *           wait 1/100th of a second.
 */
void queue_str_task(const char *str, int delay)
{
    503c:	b580      	push	{r7, lr}
    503e:	b09c      	sub	sp, #112	; 0x70
    5040:	af00      	add	r7, sp, #0
    5042:	6078      	str	r0, [r7, #4]
    5044:	6039      	str	r1, [r7, #0]
	serial_str_msg msg;

	/* Prepare the message to be queued. */
	strcpy(msg.str, str);
    5046:	f107 030c 	add.w	r3, r7, #12
    504a:	4618      	mov	r0, r3
    504c:	6879      	ldr	r1, [r7, #4]
    504e:	f000 fd07 	bl	5a60 <strcpy>

	while (1) {
		/* Post the message.  Keep on trying until it is successful. */
		while (!xQueueSendToBack(serial_str_queue, &msg,
    5052:	bf00      	nop
    5054:	f244 53b8 	movw	r3, #17848	; 0x45b8
    5058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    505c:	681b      	ldr	r3, [r3, #0]
    505e:	4618      	mov	r0, r3
    5060:	f107 030c 	add.w	r3, r7, #12
    5064:	4619      	mov	r1, r3
    5066:	f04f 32ff 	mov.w	r2, #4294967295
    506a:	f04f 0300 	mov.w	r3, #0
    506e:	f7fd ff91 	bl	2f94 <xQueueGenericSend>
    5072:	4603      	mov	r3, r0
    5074:	2b00      	cmp	r3, #0
    5076:	d0ed      	beq.n	5054 <queue_str_task+0x18>
		       portMAX_DELAY));

		/* Wait. */
		vTaskDelay(delay);
    5078:	683b      	ldr	r3, [r7, #0]
    507a:	4618      	mov	r0, r3
    507c:	f7fe fc60 	bl	3940 <vTaskDelay>
	}
    5080:	bf00      	nop
	/* Prepare the message to be queued. */
	strcpy(msg.str, str);

	while (1) {
		/* Post the message.  Keep on trying until it is successful. */
		while (!xQueueSendToBack(serial_str_queue, &msg,
    5082:	e7e6      	b.n	5052 <queue_str_task+0x16>

00005084 <queue_str_task1>:
		vTaskDelay(delay);
	}
}

void queue_str_task1(void *pvParameters)
{
    5084:	b580      	push	{r7, lr}
    5086:	b082      	sub	sp, #8
    5088:	af00      	add	r7, sp, #0
    508a:	6078      	str	r0, [r7, #4]
	queue_str_task("Hello 1\n", 200);
    508c:	f645 30ec 	movw	r0, #23532	; 0x5bec
    5090:	f2c0 0000 	movt	r0, #0
    5094:	f04f 01c8 	mov.w	r1, #200	; 0xc8
    5098:	f7ff ffd0 	bl	503c <queue_str_task>
}
    509c:	f107 0708 	add.w	r7, r7, #8
    50a0:	46bd      	mov	sp, r7
    50a2:	bd80      	pop	{r7, pc}

000050a4 <queue_str_task2>:

void queue_str_task2(void *pvParameters)
{
    50a4:	b580      	push	{r7, lr}
    50a6:	b082      	sub	sp, #8
    50a8:	af00      	add	r7, sp, #0
    50aa:	6078      	str	r0, [r7, #4]
	queue_str_task("Hello 2\n", 50);
    50ac:	f645 30f8 	movw	r0, #23544	; 0x5bf8
    50b0:	f2c0 0000 	movt	r0, #0
    50b4:	f04f 0132 	mov.w	r1, #50	; 0x32
    50b8:	f7ff ffc0 	bl	503c <queue_str_task>
}
    50bc:	f107 0708 	add.w	r7, r7, #8
    50c0:	46bd      	mov	sp, r7
    50c2:	bd80      	pop	{r7, pc}

000050c4 <serial_readwrite_task>:

void serial_readwrite_task(void *pvParameters)
{
    50c4:	b580      	push	{r7, lr}
    50c6:	b09e      	sub	sp, #120	; 0x78
    50c8:	af00      	add	r7, sp, #0
    50ca:	6078      	str	r0, [r7, #4]
	char ch;
	int curr_char;
	int done;

	/* Prepare the response message to be queued. */
	strcpy(msg.str, "Got:");
    50cc:	f645 4204 	movw	r2, #23556	; 0x5c04
    50d0:	f2c0 0200 	movt	r2, #0
    50d4:	f107 0308 	add.w	r3, r7, #8
    50d8:	e892 0003 	ldmia.w	r2, {r0, r1}
    50dc:	6018      	str	r0, [r3, #0]
    50de:	f103 0304 	add.w	r3, r3, #4
    50e2:	7019      	strb	r1, [r3, #0]

	while (1) {
		curr_char = 4;
    50e4:	f04f 0304 	mov.w	r3, #4
    50e8:	677b      	str	r3, [r7, #116]	; 0x74
		done = 0;
    50ea:	f04f 0300 	mov.w	r3, #0
    50ee:	673b      	str	r3, [r7, #112]	; 0x70
		do {
			/* Receive a byte from the RS232 port (this call will
			 * block). */
			ch = receive_byte();
    50f0:	f7ff ff42 	bl	4f78 <receive_byte>
    50f4:	4603      	mov	r3, r0
    50f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

			/* If the byte is an end-of-line type character, then
			 * finish the string and inidcate we are done.
			 */
			if ((ch == '\r') || (ch == '\n')) {
    50fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    50fe:	2b0d      	cmp	r3, #13
    5100:	d003      	beq.n	510a <serial_readwrite_task+0x46>
    5102:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    5106:	2b0a      	cmp	r3, #10
    5108:	d114      	bne.n	5134 <serial_readwrite_task+0x70>
				msg.str[curr_char] = '\n';
    510a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    510c:	f107 0208 	add.w	r2, r7, #8
    5110:	18d3      	adds	r3, r2, r3
    5112:	f04f 020a 	mov.w	r2, #10
    5116:	701a      	strb	r2, [r3, #0]
				msg.str[curr_char+1] = '\0';
    5118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    511a:	f103 0301 	add.w	r3, r3, #1
    511e:	f107 0278 	add.w	r2, r7, #120	; 0x78
    5122:	18d3      	adds	r3, r2, r3
    5124:	f04f 0200 	mov.w	r2, #0
    5128:	f803 2c70 	strb.w	r2, [r3, #-112]
				done = -1;
    512c:	f04f 33ff 	mov.w	r3, #4294967295
    5130:	673b      	str	r3, [r7, #112]	; 0x70
    5132:	e00a      	b.n	514a <serial_readwrite_task+0x86>
				/* Otherwise, add the character to the
				 * response string. */
			}
			else {
				msg.str[curr_char++] = ch;
    5134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    5136:	f107 0208 	add.w	r2, r7, #8
    513a:	18d3      	adds	r3, r2, r3
    513c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
    5140:	701a      	strb	r2, [r3, #0]
    5142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    5144:	f103 0301 	add.w	r3, r3, #1
    5148:	677b      	str	r3, [r7, #116]	; 0x74
			}
		} while (!done);
    514a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    514c:	2b00      	cmp	r3, #0
    514e:	d0cf      	beq.n	50f0 <serial_readwrite_task+0x2c>

		/* Once we are done building the response string, queue the
		 * response to be sent to the RS232 port.
		 */
		while (!xQueueSendToBack(serial_str_queue, &msg,
    5150:	bf00      	nop
    5152:	f244 53b8 	movw	r3, #17848	; 0x45b8
    5156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    515a:	681b      	ldr	r3, [r3, #0]
    515c:	4618      	mov	r0, r3
    515e:	f107 0308 	add.w	r3, r7, #8
    5162:	4619      	mov	r1, r3
    5164:	f04f 32ff 	mov.w	r2, #4294967295
    5168:	f04f 0300 	mov.w	r3, #0
    516c:	f7fd ff12 	bl	2f94 <xQueueGenericSend>
    5170:	4603      	mov	r3, r0
    5172:	2b00      	cmp	r3, #0
    5174:	d0ed      	beq.n	5152 <serial_readwrite_task+0x8e>
		                         portMAX_DELAY));
	}
    5176:	e7b5      	b.n	50e4 <serial_readwrite_task+0x20>

00005178 <main>:
}

int main()
{
    5178:	b580      	push	{r7, lr}
    517a:	b084      	sub	sp, #16
    517c:	af04      	add	r7, sp, #16
	init_led();
    517e:	f7ff fd5f 	bl	4c40 <init_led>

	init_button();
    5182:	f7ff fd87 	bl	4c94 <init_button>
	enable_button_interrupts();
    5186:	f7ff fda5 	bl	4cd4 <enable_button_interrupts>

	init_rs232();
    518a:	f7ff fdd9 	bl	4d40 <init_rs232>
	enable_rs232_interrupts();
    518e:	f7ff fe2f 	bl	4df0 <enable_rs232_interrupts>
	enable_rs232();
    5192:	f7ff fe57 	bl	4e44 <enable_rs232>

	/* Create the queue used by the serial task.  Messages for write to
	 * the RS232. */
	serial_str_queue = xQueueCreate(10, sizeof(serial_str_msg));
    5196:	f04f 000a 	mov.w	r0, #10
    519a:	f04f 0164 	mov.w	r1, #100	; 0x64
    519e:	f04f 0200 	mov.w	r2, #0
    51a2:	f7fd fe53 	bl	2e4c <xQueueGenericCreate>
    51a6:	4602      	mov	r2, r0
    51a8:	f244 53b8 	movw	r3, #17848	; 0x45b8
    51ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b0:	601a      	str	r2, [r3, #0]
	vSemaphoreCreateBinary(serial_tx_wait_sem);
    51b2:	f04f 0001 	mov.w	r0, #1
    51b6:	f04f 0100 	mov.w	r1, #0
    51ba:	f04f 0203 	mov.w	r2, #3
    51be:	f7fd fe45 	bl	2e4c <xQueueGenericCreate>
    51c2:	4602      	mov	r2, r0
    51c4:	f244 53bc 	movw	r3, #17852	; 0x45bc
    51c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51cc:	601a      	str	r2, [r3, #0]
    51ce:	f244 53bc 	movw	r3, #17852	; 0x45bc
    51d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d6:	681b      	ldr	r3, [r3, #0]
    51d8:	2b00      	cmp	r3, #0
    51da:	d00d      	beq.n	51f8 <main+0x80>
    51dc:	f244 53bc 	movw	r3, #17852	; 0x45bc
    51e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e4:	681b      	ldr	r3, [r3, #0]
    51e6:	4618      	mov	r0, r3
    51e8:	f04f 0100 	mov.w	r1, #0
    51ec:	f04f 0200 	mov.w	r2, #0
    51f0:	f04f 0300 	mov.w	r3, #0
    51f4:	f7fd fece 	bl	2f94 <xQueueGenericSend>
	serial_rx_queue = xQueueCreate(1, sizeof(serial_ch_msg));
    51f8:	f04f 0001 	mov.w	r0, #1
    51fc:	f04f 0101 	mov.w	r1, #1
    5200:	f04f 0200 	mov.w	r2, #0
    5204:	f7fd fe22 	bl	2e4c <xQueueGenericCreate>
    5208:	4602      	mov	r2, r0
    520a:	f244 53c0 	movw	r3, #17856	; 0x45c0
    520e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5212:	601a      	str	r2, [r3, #0]

	/* Create a task to flash the LED. */
	xTaskCreate(led_flash_task,
    5214:	f04f 0305 	mov.w	r3, #5
    5218:	9300      	str	r3, [sp, #0]
    521a:	f04f 0300 	mov.w	r3, #0
    521e:	9301      	str	r3, [sp, #4]
    5220:	f04f 0300 	mov.w	r3, #0
    5224:	9302      	str	r3, [sp, #8]
    5226:	f04f 0300 	mov.w	r3, #0
    522a:	9303      	str	r3, [sp, #12]
    522c:	f644 70b1 	movw	r0, #20401	; 0x4fb1
    5230:	f2c0 0000 	movt	r0, #0
    5234:	f645 410c 	movw	r1, #23564	; 0x5c0c
    5238:	f2c0 0100 	movt	r1, #0
    523c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5240:	f04f 0300 	mov.w	r3, #0
    5244:	f7fe f9ec 	bl	3620 <xTaskGenericCreate>
	            (signed portCHAR *) "LED Flash",
	            512 /* stack size */, NULL,
	            tskIDLE_PRIORITY + 5, NULL);

	/* Create tasks to queue a string to be written to the RS232 port. */
	xTaskCreate(queue_str_task1,
    5248:	f04f 030a 	mov.w	r3, #10
    524c:	9300      	str	r3, [sp, #0]
    524e:	f04f 0300 	mov.w	r3, #0
    5252:	9301      	str	r3, [sp, #4]
    5254:	f04f 0300 	mov.w	r3, #0
    5258:	9302      	str	r3, [sp, #8]
    525a:	f04f 0300 	mov.w	r3, #0
    525e:	9303      	str	r3, [sp, #12]
    5260:	f245 0085 	movw	r0, #20613	; 0x5085
    5264:	f2c0 0000 	movt	r0, #0
    5268:	f645 4118 	movw	r1, #23576	; 0x5c18
    526c:	f2c0 0100 	movt	r1, #0
    5270:	f44f 7200 	mov.w	r2, #512	; 0x200
    5274:	f04f 0300 	mov.w	r3, #0
    5278:	f7fe f9d2 	bl	3620 <xTaskGenericCreate>
	            (signed portCHAR *) "Serial Write 1",
	            512 /* stack size */, NULL,
	            tskIDLE_PRIORITY + 10, NULL );
	xTaskCreate(queue_str_task2,
    527c:	f04f 030a 	mov.w	r3, #10
    5280:	9300      	str	r3, [sp, #0]
    5282:	f04f 0300 	mov.w	r3, #0
    5286:	9301      	str	r3, [sp, #4]
    5288:	f04f 0300 	mov.w	r3, #0
    528c:	9302      	str	r3, [sp, #8]
    528e:	f04f 0300 	mov.w	r3, #0
    5292:	9303      	str	r3, [sp, #12]
    5294:	f245 00a5 	movw	r0, #20645	; 0x50a5
    5298:	f2c0 0000 	movt	r0, #0
    529c:	f645 4128 	movw	r1, #23592	; 0x5c28
    52a0:	f2c0 0100 	movt	r1, #0
    52a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    52a8:	f04f 0300 	mov.w	r3, #0
    52ac:	f7fe f9b8 	bl	3620 <xTaskGenericCreate>
	            (signed portCHAR *) "Serial Write 2",
	            512 /* stack size */,
	            NULL, tskIDLE_PRIORITY + 10, NULL);

	/* Create a task to write messages from the queue to the RS232 port. */
	xTaskCreate(rs232_xmit_msg_task,
    52b0:	f04f 0302 	mov.w	r3, #2
    52b4:	9300      	str	r3, [sp, #0]
    52b6:	f04f 0300 	mov.w	r3, #0
    52ba:	9301      	str	r3, [sp, #4]
    52bc:	f04f 0300 	mov.w	r3, #0
    52c0:	9302      	str	r3, [sp, #8]
    52c2:	f04f 0300 	mov.w	r3, #0
    52c6:	9303      	str	r3, [sp, #12]
    52c8:	f644 70dd 	movw	r0, #20445	; 0x4fdd
    52cc:	f2c0 0000 	movt	r0, #0
    52d0:	f645 4138 	movw	r1, #23608	; 0x5c38
    52d4:	f2c0 0100 	movt	r1, #0
    52d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    52dc:	f04f 0300 	mov.w	r3, #0
    52e0:	f7fe f99e 	bl	3620 <xTaskGenericCreate>
	            (signed portCHAR *) "Serial Xmit Str",
	            512 /* stack size */, NULL, tskIDLE_PRIORITY + 2, NULL);

	/* Create a task to receive characters from the RS232 port and echo
	 * them back to the RS232 port. */
	xTaskCreate(serial_readwrite_task,
    52e4:	f04f 030a 	mov.w	r3, #10
    52e8:	9300      	str	r3, [sp, #0]
    52ea:	f04f 0300 	mov.w	r3, #0
    52ee:	9301      	str	r3, [sp, #4]
    52f0:	f04f 0300 	mov.w	r3, #0
    52f4:	9302      	str	r3, [sp, #8]
    52f6:	f04f 0300 	mov.w	r3, #0
    52fa:	9303      	str	r3, [sp, #12]
    52fc:	f245 00c5 	movw	r0, #20677	; 0x50c5
    5300:	f2c0 0000 	movt	r0, #0
    5304:	f645 4148 	movw	r1, #23624	; 0x5c48
    5308:	f2c0 0100 	movt	r1, #0
    530c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5310:	f04f 0300 	mov.w	r3, #0
    5314:	f7fe f984 	bl	3620 <xTaskGenericCreate>
	            (signed portCHAR *) "Serial Read/Write",
	            512 /* stack size */, NULL,
	            tskIDLE_PRIORITY + 10, NULL);

	/* Start running the tasks. */
	vTaskStartScheduler();
    5318:	f7fe fd3a 	bl	3d90 <vTaskStartScheduler>

	return 0;
    531c:	f04f 0300 	mov.w	r3, #0
}
    5320:	4618      	mov	r0, r3
    5322:	46bd      	mov	sp, r7
    5324:	bd80      	pop	{r7, pc}
    5326:	bf00      	nop

00005328 <myTraceCreate>:

void myTraceCreate      (){
    5328:	b480      	push	{r7}
    532a:	af00      	add	r7, sp, #0
}
    532c:	46bd      	mov	sp, r7
    532e:	bc80      	pop	{r7}
    5330:	4770      	bx	lr
    5332:	bf00      	nop

00005334 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
    5334:	b480      	push	{r7}
    5336:	af00      	add	r7, sp, #0
}
    5338:	46bd      	mov	sp, r7
    533a:	bc80      	pop	{r7}
    533c:	4770      	bx	lr
    533e:	bf00      	nop

00005340 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
    5340:	b480      	push	{r7}
    5342:	af00      	add	r7, sp, #0
}
    5344:	46bd      	mov	sp, r7
    5346:	bc80      	pop	{r7}
    5348:	4770      	bx	lr
    534a:	bf00      	nop

0000534c <myTraceGetTick>:

inline float myTraceGetTick(){
    534c:	b598      	push	{r3, r4, r7, lr}
    534e:	af00      	add	r7, sp, #0
	// 0xE000E014 -> Systick reload value
	// 0xE000E018 -> Systick current value
	return ((float)((*(unsigned long *)0xE000E014)-(*(unsigned long *)0xE000E018)))/(*(unsigned long *)0xE000E014);
    5350:	f24e 0314 	movw	r3, #57364	; 0xe014
    5354:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5358:	681a      	ldr	r2, [r3, #0]
    535a:	f24e 0318 	movw	r3, #57368	; 0xe018
    535e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5362:	681b      	ldr	r3, [r3, #0]
    5364:	1ad3      	subs	r3, r2, r3
    5366:	4618      	mov	r0, r3
    5368:	f000 f8f4 	bl	5554 <__aeabi_ui2f>
    536c:	4604      	mov	r4, r0
    536e:	f24e 0314 	movw	r3, #57364	; 0xe014
    5372:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	4618      	mov	r0, r3
    537a:	f000 f8eb 	bl	5554 <__aeabi_ui2f>
    537e:	4603      	mov	r3, r0
    5380:	4620      	mov	r0, r4
    5382:	4619      	mov	r1, r3
    5384:	f000 f9f2 	bl	576c <__aeabi_fdiv>
    5388:	4603      	mov	r3, r0
}
    538a:	4618      	mov	r0, r3
    538c:	bd98      	pop	{r3, r4, r7, pc}
    538e:	bf00      	nop

00005390 <myTraceGetTimeMillisecond>:

inline unsigned long myTraceGetTimeMillisecond(){
    5390:	b598      	push	{r3, r4, r7, lr}
    5392:	af00      	add	r7, sp, #0
	return (xTaskGetTickCountFromISR() + myTraceGetTick()) * 1000 / configTICK_RATE_HZ;
    5394:	f7fe fe16 	bl	3fc4 <xTaskGetTickCountFromISR>
    5398:	4603      	mov	r3, r0
    539a:	4618      	mov	r0, r3
    539c:	f000 f8da 	bl	5554 <__aeabi_ui2f>
    53a0:	4604      	mov	r4, r0
    53a2:	f7ff ffd3 	bl	534c <myTraceGetTick>
    53a6:	4603      	mov	r3, r0
    53a8:	4620      	mov	r0, r4
    53aa:	4619      	mov	r1, r3
    53ac:	f000 f822 	bl	53f4 <__addsf3>
    53b0:	4603      	mov	r3, r0
    53b2:	4618      	mov	r0, r3
    53b4:	4907      	ldr	r1, [pc, #28]	; (53d4 <myTraceGetTimeMillisecond+0x44>)
    53b6:	f000 f925 	bl	5604 <__aeabi_fmul>
    53ba:	4603      	mov	r3, r0
    53bc:	4618      	mov	r0, r3
    53be:	4906      	ldr	r1, [pc, #24]	; (53d8 <myTraceGetTimeMillisecond+0x48>)
    53c0:	f000 f9d4 	bl	576c <__aeabi_fdiv>
    53c4:	4603      	mov	r3, r0
    53c6:	4618      	mov	r0, r3
    53c8:	f000 fa6c 	bl	58a4 <__aeabi_f2uiz>
    53cc:	4603      	mov	r3, r0
}
    53ce:	4618      	mov	r0, r3
    53d0:	bd98      	pop	{r3, r4, r7, pc}
    53d2:	bf00      	nop
    53d4:	447a0000 	.word	0x447a0000
    53d8:	42c80000 	.word	0x42c80000

000053dc <vApplicationTickHook>:

void vApplicationTickHook()
{
    53dc:	b480      	push	{r7}
    53de:	af00      	add	r7, sp, #0
}
    53e0:	46bd      	mov	sp, r7
    53e2:	bc80      	pop	{r7}
    53e4:	4770      	bx	lr
    53e6:	bf00      	nop

000053e8 <__aeabi_frsub>:
    53e8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    53ec:	e002      	b.n	53f4 <__addsf3>
    53ee:	bf00      	nop

000053f0 <__aeabi_fsub>:
    53f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000053f4 <__addsf3>:
    53f4:	0042      	lsls	r2, r0, #1
    53f6:	bf1f      	itttt	ne
    53f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    53fc:	ea92 0f03 	teqne	r2, r3
    5400:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    5404:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    5408:	d06a      	beq.n	54e0 <__addsf3+0xec>
    540a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    540e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    5412:	bfc1      	itttt	gt
    5414:	18d2      	addgt	r2, r2, r3
    5416:	4041      	eorgt	r1, r0
    5418:	4048      	eorgt	r0, r1
    541a:	4041      	eorgt	r1, r0
    541c:	bfb8      	it	lt
    541e:	425b      	neglt	r3, r3
    5420:	2b19      	cmp	r3, #25
    5422:	bf88      	it	hi
    5424:	4770      	bxhi	lr
    5426:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    542a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    542e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5432:	bf18      	it	ne
    5434:	4240      	negne	r0, r0
    5436:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    543a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    543e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5442:	bf18      	it	ne
    5444:	4249      	negne	r1, r1
    5446:	ea92 0f03 	teq	r2, r3
    544a:	d03f      	beq.n	54cc <__addsf3+0xd8>
    544c:	f1a2 0201 	sub.w	r2, r2, #1
    5450:	fa41 fc03 	asr.w	ip, r1, r3
    5454:	eb10 000c 	adds.w	r0, r0, ip
    5458:	f1c3 0320 	rsb	r3, r3, #32
    545c:	fa01 f103 	lsl.w	r1, r1, r3
    5460:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    5464:	d502      	bpl.n	546c <__addsf3+0x78>
    5466:	4249      	negs	r1, r1
    5468:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    546c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5470:	d313      	bcc.n	549a <__addsf3+0xa6>
    5472:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    5476:	d306      	bcc.n	5486 <__addsf3+0x92>
    5478:	0840      	lsrs	r0, r0, #1
    547a:	ea4f 0131 	mov.w	r1, r1, rrx
    547e:	f102 0201 	add.w	r2, r2, #1
    5482:	2afe      	cmp	r2, #254	; 0xfe
    5484:	d251      	bcs.n	552a <__addsf3+0x136>
    5486:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    548a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    548e:	bf08      	it	eq
    5490:	f020 0001 	biceq.w	r0, r0, #1
    5494:	ea40 0003 	orr.w	r0, r0, r3
    5498:	4770      	bx	lr
    549a:	0049      	lsls	r1, r1, #1
    549c:	eb40 0000 	adc.w	r0, r0, r0
    54a0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    54a4:	f1a2 0201 	sub.w	r2, r2, #1
    54a8:	d1ed      	bne.n	5486 <__addsf3+0x92>
    54aa:	fab0 fc80 	clz	ip, r0
    54ae:	f1ac 0c08 	sub.w	ip, ip, #8
    54b2:	ebb2 020c 	subs.w	r2, r2, ip
    54b6:	fa00 f00c 	lsl.w	r0, r0, ip
    54ba:	bfaa      	itet	ge
    54bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    54c0:	4252      	neglt	r2, r2
    54c2:	4318      	orrge	r0, r3
    54c4:	bfbc      	itt	lt
    54c6:	40d0      	lsrlt	r0, r2
    54c8:	4318      	orrlt	r0, r3
    54ca:	4770      	bx	lr
    54cc:	f092 0f00 	teq	r2, #0
    54d0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    54d4:	bf06      	itte	eq
    54d6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    54da:	3201      	addeq	r2, #1
    54dc:	3b01      	subne	r3, #1
    54de:	e7b5      	b.n	544c <__addsf3+0x58>
    54e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    54e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    54e8:	bf18      	it	ne
    54ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    54ee:	d021      	beq.n	5534 <__addsf3+0x140>
    54f0:	ea92 0f03 	teq	r2, r3
    54f4:	d004      	beq.n	5500 <__addsf3+0x10c>
    54f6:	f092 0f00 	teq	r2, #0
    54fa:	bf08      	it	eq
    54fc:	4608      	moveq	r0, r1
    54fe:	4770      	bx	lr
    5500:	ea90 0f01 	teq	r0, r1
    5504:	bf1c      	itt	ne
    5506:	2000      	movne	r0, #0
    5508:	4770      	bxne	lr
    550a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    550e:	d104      	bne.n	551a <__addsf3+0x126>
    5510:	0040      	lsls	r0, r0, #1
    5512:	bf28      	it	cs
    5514:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    5518:	4770      	bx	lr
    551a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    551e:	bf3c      	itt	cc
    5520:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    5524:	4770      	bxcc	lr
    5526:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    552a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    552e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    5532:	4770      	bx	lr
    5534:	ea7f 6222 	mvns.w	r2, r2, asr #24
    5538:	bf16      	itet	ne
    553a:	4608      	movne	r0, r1
    553c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    5540:	4601      	movne	r1, r0
    5542:	0242      	lsls	r2, r0, #9
    5544:	bf06      	itte	eq
    5546:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    554a:	ea90 0f01 	teqeq	r0, r1
    554e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    5552:	4770      	bx	lr

00005554 <__aeabi_ui2f>:
    5554:	f04f 0300 	mov.w	r3, #0
    5558:	e004      	b.n	5564 <__aeabi_i2f+0x8>
    555a:	bf00      	nop

0000555c <__aeabi_i2f>:
    555c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    5560:	bf48      	it	mi
    5562:	4240      	negmi	r0, r0
    5564:	ea5f 0c00 	movs.w	ip, r0
    5568:	bf08      	it	eq
    556a:	4770      	bxeq	lr
    556c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    5570:	4601      	mov	r1, r0
    5572:	f04f 0000 	mov.w	r0, #0
    5576:	e01c      	b.n	55b2 <__aeabi_l2f+0x2a>

00005578 <__aeabi_ul2f>:
    5578:	ea50 0201 	orrs.w	r2, r0, r1
    557c:	bf08      	it	eq
    557e:	4770      	bxeq	lr
    5580:	f04f 0300 	mov.w	r3, #0
    5584:	e00a      	b.n	559c <__aeabi_l2f+0x14>
    5586:	bf00      	nop

00005588 <__aeabi_l2f>:
    5588:	ea50 0201 	orrs.w	r2, r0, r1
    558c:	bf08      	it	eq
    558e:	4770      	bxeq	lr
    5590:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    5594:	d502      	bpl.n	559c <__aeabi_l2f+0x14>
    5596:	4240      	negs	r0, r0
    5598:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    559c:	ea5f 0c01 	movs.w	ip, r1
    55a0:	bf02      	ittt	eq
    55a2:	4684      	moveq	ip, r0
    55a4:	4601      	moveq	r1, r0
    55a6:	2000      	moveq	r0, #0
    55a8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    55ac:	bf08      	it	eq
    55ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    55b2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    55b6:	fabc f28c 	clz	r2, ip
    55ba:	3a08      	subs	r2, #8
    55bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    55c0:	db10      	blt.n	55e4 <__aeabi_l2f+0x5c>
    55c2:	fa01 fc02 	lsl.w	ip, r1, r2
    55c6:	4463      	add	r3, ip
    55c8:	fa00 fc02 	lsl.w	ip, r0, r2
    55cc:	f1c2 0220 	rsb	r2, r2, #32
    55d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    55d4:	fa20 f202 	lsr.w	r2, r0, r2
    55d8:	eb43 0002 	adc.w	r0, r3, r2
    55dc:	bf08      	it	eq
    55de:	f020 0001 	biceq.w	r0, r0, #1
    55e2:	4770      	bx	lr
    55e4:	f102 0220 	add.w	r2, r2, #32
    55e8:	fa01 fc02 	lsl.w	ip, r1, r2
    55ec:	f1c2 0220 	rsb	r2, r2, #32
    55f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    55f4:	fa21 f202 	lsr.w	r2, r1, r2
    55f8:	eb43 0002 	adc.w	r0, r3, r2
    55fc:	bf08      	it	eq
    55fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    5602:	4770      	bx	lr

00005604 <__aeabi_fmul>:
    5604:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5608:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    560c:	bf1e      	ittt	ne
    560e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    5612:	ea92 0f0c 	teqne	r2, ip
    5616:	ea93 0f0c 	teqne	r3, ip
    561a:	d06f      	beq.n	56fc <__aeabi_fmul+0xf8>
    561c:	441a      	add	r2, r3
    561e:	ea80 0c01 	eor.w	ip, r0, r1
    5622:	0240      	lsls	r0, r0, #9
    5624:	bf18      	it	ne
    5626:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    562a:	d01e      	beq.n	566a <__aeabi_fmul+0x66>
    562c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    5630:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    5634:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    5638:	fba0 3101 	umull	r3, r1, r0, r1
    563c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    5640:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    5644:	bf3e      	ittt	cc
    5646:	0049      	lslcc	r1, r1, #1
    5648:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    564c:	005b      	lslcc	r3, r3, #1
    564e:	ea40 0001 	orr.w	r0, r0, r1
    5652:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    5656:	2afd      	cmp	r2, #253	; 0xfd
    5658:	d81d      	bhi.n	5696 <__aeabi_fmul+0x92>
    565a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    565e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    5662:	bf08      	it	eq
    5664:	f020 0001 	biceq.w	r0, r0, #1
    5668:	4770      	bx	lr
    566a:	f090 0f00 	teq	r0, #0
    566e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    5672:	bf08      	it	eq
    5674:	0249      	lsleq	r1, r1, #9
    5676:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    567a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    567e:	3a7f      	subs	r2, #127	; 0x7f
    5680:	bfc2      	ittt	gt
    5682:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    5686:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    568a:	4770      	bxgt	lr
    568c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    5690:	f04f 0300 	mov.w	r3, #0
    5694:	3a01      	subs	r2, #1
    5696:	dc5d      	bgt.n	5754 <__aeabi_fmul+0x150>
    5698:	f112 0f19 	cmn.w	r2, #25
    569c:	bfdc      	itt	le
    569e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    56a2:	4770      	bxle	lr
    56a4:	f1c2 0200 	rsb	r2, r2, #0
    56a8:	0041      	lsls	r1, r0, #1
    56aa:	fa21 f102 	lsr.w	r1, r1, r2
    56ae:	f1c2 0220 	rsb	r2, r2, #32
    56b2:	fa00 fc02 	lsl.w	ip, r0, r2
    56b6:	ea5f 0031 	movs.w	r0, r1, rrx
    56ba:	f140 0000 	adc.w	r0, r0, #0
    56be:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    56c2:	bf08      	it	eq
    56c4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    56c8:	4770      	bx	lr
    56ca:	f092 0f00 	teq	r2, #0
    56ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    56d2:	bf02      	ittt	eq
    56d4:	0040      	lsleq	r0, r0, #1
    56d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    56da:	3a01      	subeq	r2, #1
    56dc:	d0f9      	beq.n	56d2 <__aeabi_fmul+0xce>
    56de:	ea40 000c 	orr.w	r0, r0, ip
    56e2:	f093 0f00 	teq	r3, #0
    56e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    56ea:	bf02      	ittt	eq
    56ec:	0049      	lsleq	r1, r1, #1
    56ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    56f2:	3b01      	subeq	r3, #1
    56f4:	d0f9      	beq.n	56ea <__aeabi_fmul+0xe6>
    56f6:	ea41 010c 	orr.w	r1, r1, ip
    56fa:	e78f      	b.n	561c <__aeabi_fmul+0x18>
    56fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    5700:	ea92 0f0c 	teq	r2, ip
    5704:	bf18      	it	ne
    5706:	ea93 0f0c 	teqne	r3, ip
    570a:	d00a      	beq.n	5722 <__aeabi_fmul+0x11e>
    570c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    5710:	bf18      	it	ne
    5712:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    5716:	d1d8      	bne.n	56ca <__aeabi_fmul+0xc6>
    5718:	ea80 0001 	eor.w	r0, r0, r1
    571c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    5720:	4770      	bx	lr
    5722:	f090 0f00 	teq	r0, #0
    5726:	bf17      	itett	ne
    5728:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    572c:	4608      	moveq	r0, r1
    572e:	f091 0f00 	teqne	r1, #0
    5732:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    5736:	d014      	beq.n	5762 <__aeabi_fmul+0x15e>
    5738:	ea92 0f0c 	teq	r2, ip
    573c:	d101      	bne.n	5742 <__aeabi_fmul+0x13e>
    573e:	0242      	lsls	r2, r0, #9
    5740:	d10f      	bne.n	5762 <__aeabi_fmul+0x15e>
    5742:	ea93 0f0c 	teq	r3, ip
    5746:	d103      	bne.n	5750 <__aeabi_fmul+0x14c>
    5748:	024b      	lsls	r3, r1, #9
    574a:	bf18      	it	ne
    574c:	4608      	movne	r0, r1
    574e:	d108      	bne.n	5762 <__aeabi_fmul+0x15e>
    5750:	ea80 0001 	eor.w	r0, r0, r1
    5754:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    5758:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    575c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    5760:	4770      	bx	lr
    5762:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    5766:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    576a:	4770      	bx	lr

0000576c <__aeabi_fdiv>:
    576c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5770:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    5774:	bf1e      	ittt	ne
    5776:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    577a:	ea92 0f0c 	teqne	r2, ip
    577e:	ea93 0f0c 	teqne	r3, ip
    5782:	d069      	beq.n	5858 <__aeabi_fdiv+0xec>
    5784:	eba2 0203 	sub.w	r2, r2, r3
    5788:	ea80 0c01 	eor.w	ip, r0, r1
    578c:	0249      	lsls	r1, r1, #9
    578e:	ea4f 2040 	mov.w	r0, r0, lsl #9
    5792:	d037      	beq.n	5804 <__aeabi_fdiv+0x98>
    5794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5798:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    579c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    57a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    57a4:	428b      	cmp	r3, r1
    57a6:	bf38      	it	cc
    57a8:	005b      	lslcc	r3, r3, #1
    57aa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    57ae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    57b2:	428b      	cmp	r3, r1
    57b4:	bf24      	itt	cs
    57b6:	1a5b      	subcs	r3, r3, r1
    57b8:	ea40 000c 	orrcs.w	r0, r0, ip
    57bc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    57c0:	bf24      	itt	cs
    57c2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    57c6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    57ca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    57ce:	bf24      	itt	cs
    57d0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    57d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    57d8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    57dc:	bf24      	itt	cs
    57de:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    57e2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    57e6:	011b      	lsls	r3, r3, #4
    57e8:	bf18      	it	ne
    57ea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    57ee:	d1e0      	bne.n	57b2 <__aeabi_fdiv+0x46>
    57f0:	2afd      	cmp	r2, #253	; 0xfd
    57f2:	f63f af50 	bhi.w	5696 <__aeabi_fmul+0x92>
    57f6:	428b      	cmp	r3, r1
    57f8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    57fc:	bf08      	it	eq
    57fe:	f020 0001 	biceq.w	r0, r0, #1
    5802:	4770      	bx	lr
    5804:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    5808:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    580c:	327f      	adds	r2, #127	; 0x7f
    580e:	bfc2      	ittt	gt
    5810:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    5814:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    5818:	4770      	bxgt	lr
    581a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    581e:	f04f 0300 	mov.w	r3, #0
    5822:	3a01      	subs	r2, #1
    5824:	e737      	b.n	5696 <__aeabi_fmul+0x92>
    5826:	f092 0f00 	teq	r2, #0
    582a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    582e:	bf02      	ittt	eq
    5830:	0040      	lsleq	r0, r0, #1
    5832:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    5836:	3a01      	subeq	r2, #1
    5838:	d0f9      	beq.n	582e <__aeabi_fdiv+0xc2>
    583a:	ea40 000c 	orr.w	r0, r0, ip
    583e:	f093 0f00 	teq	r3, #0
    5842:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    5846:	bf02      	ittt	eq
    5848:	0049      	lsleq	r1, r1, #1
    584a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    584e:	3b01      	subeq	r3, #1
    5850:	d0f9      	beq.n	5846 <__aeabi_fdiv+0xda>
    5852:	ea41 010c 	orr.w	r1, r1, ip
    5856:	e795      	b.n	5784 <__aeabi_fdiv+0x18>
    5858:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    585c:	ea92 0f0c 	teq	r2, ip
    5860:	d108      	bne.n	5874 <__aeabi_fdiv+0x108>
    5862:	0242      	lsls	r2, r0, #9
    5864:	f47f af7d 	bne.w	5762 <__aeabi_fmul+0x15e>
    5868:	ea93 0f0c 	teq	r3, ip
    586c:	f47f af70 	bne.w	5750 <__aeabi_fmul+0x14c>
    5870:	4608      	mov	r0, r1
    5872:	e776      	b.n	5762 <__aeabi_fmul+0x15e>
    5874:	ea93 0f0c 	teq	r3, ip
    5878:	d104      	bne.n	5884 <__aeabi_fdiv+0x118>
    587a:	024b      	lsls	r3, r1, #9
    587c:	f43f af4c 	beq.w	5718 <__aeabi_fmul+0x114>
    5880:	4608      	mov	r0, r1
    5882:	e76e      	b.n	5762 <__aeabi_fmul+0x15e>
    5884:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    5888:	bf18      	it	ne
    588a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    588e:	d1ca      	bne.n	5826 <__aeabi_fdiv+0xba>
    5890:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    5894:	f47f af5c 	bne.w	5750 <__aeabi_fmul+0x14c>
    5898:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    589c:	f47f af3c 	bne.w	5718 <__aeabi_fmul+0x114>
    58a0:	e75f      	b.n	5762 <__aeabi_fmul+0x15e>
    58a2:	bf00      	nop

000058a4 <__aeabi_f2uiz>:
    58a4:	0042      	lsls	r2, r0, #1
    58a6:	d20e      	bcs.n	58c6 <__aeabi_f2uiz+0x22>
    58a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    58ac:	d30b      	bcc.n	58c6 <__aeabi_f2uiz+0x22>
    58ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
    58b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    58b6:	d409      	bmi.n	58cc <__aeabi_f2uiz+0x28>
    58b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    58bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    58c0:	fa23 f002 	lsr.w	r0, r3, r2
    58c4:	4770      	bx	lr
    58c6:	f04f 0000 	mov.w	r0, #0
    58ca:	4770      	bx	lr
    58cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    58d0:	d101      	bne.n	58d6 <__aeabi_f2uiz+0x32>
    58d2:	0242      	lsls	r2, r0, #9
    58d4:	d102      	bne.n	58dc <__aeabi_f2uiz+0x38>
    58d6:	f04f 30ff 	mov.w	r0, #4294967295
    58da:	4770      	bx	lr
    58dc:	f04f 0000 	mov.w	r0, #0
    58e0:	4770      	bx	lr
    58e2:	bf00      	nop

000058e4 <memcpy>:
    58e4:	2a03      	cmp	r2, #3
    58e6:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    58ea:	d809      	bhi.n	5900 <memcpy+0x1c>
    58ec:	b12a      	cbz	r2, 58fa <memcpy+0x16>
    58ee:	2300      	movs	r3, #0
    58f0:	5ccc      	ldrb	r4, [r1, r3]
    58f2:	54c4      	strb	r4, [r0, r3]
    58f4:	3301      	adds	r3, #1
    58f6:	4293      	cmp	r3, r2
    58f8:	d1fa      	bne.n	58f0 <memcpy+0xc>
    58fa:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    58fe:	4770      	bx	lr
    5900:	0785      	lsls	r5, r0, #30
    5902:	4402      	add	r2, r0
    5904:	4603      	mov	r3, r0
    5906:	d005      	beq.n	5914 <memcpy+0x30>
    5908:	f811 4b01 	ldrb.w	r4, [r1], #1
    590c:	f803 4b01 	strb.w	r4, [r3], #1
    5910:	079c      	lsls	r4, r3, #30
    5912:	d1f9      	bne.n	5908 <memcpy+0x24>
    5914:	f011 0503 	ands.w	r5, r1, #3
    5918:	d042      	beq.n	59a0 <memcpy+0xbc>
    591a:	1ad4      	subs	r4, r2, r3
    591c:	426e      	negs	r6, r5
    591e:	2c03      	cmp	r4, #3
    5920:	598f      	ldr	r7, [r1, r6]
    5922:	dd12      	ble.n	594a <memcpy+0x66>
    5924:	f1c5 0c04 	rsb	ip, r5, #4
    5928:	00ed      	lsls	r5, r5, #3
    592a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    592e:	3104      	adds	r1, #4
    5930:	fa27 f805 	lsr.w	r8, r7, r5
    5934:	598c      	ldr	r4, [r1, r6]
    5936:	4627      	mov	r7, r4
    5938:	fa04 f40c 	lsl.w	r4, r4, ip
    593c:	ea44 0408 	orr.w	r4, r4, r8
    5940:	f843 4b04 	str.w	r4, [r3], #4
    5944:	1ad4      	subs	r4, r2, r3
    5946:	2c03      	cmp	r4, #3
    5948:	dcf1      	bgt.n	592e <memcpy+0x4a>
    594a:	429a      	cmp	r2, r3
    594c:	d9d5      	bls.n	58fa <memcpy+0x16>
    594e:	2200      	movs	r2, #0
    5950:	5c8d      	ldrb	r5, [r1, r2]
    5952:	549d      	strb	r5, [r3, r2]
    5954:	3201      	adds	r2, #1
    5956:	42a2      	cmp	r2, r4
    5958:	d1fa      	bne.n	5950 <memcpy+0x6c>
    595a:	e7ce      	b.n	58fa <memcpy+0x16>
    595c:	680c      	ldr	r4, [r1, #0]
    595e:	601c      	str	r4, [r3, #0]
    5960:	684c      	ldr	r4, [r1, #4]
    5962:	605c      	str	r4, [r3, #4]
    5964:	688c      	ldr	r4, [r1, #8]
    5966:	609c      	str	r4, [r3, #8]
    5968:	68cc      	ldr	r4, [r1, #12]
    596a:	60dc      	str	r4, [r3, #12]
    596c:	690c      	ldr	r4, [r1, #16]
    596e:	611c      	str	r4, [r3, #16]
    5970:	694c      	ldr	r4, [r1, #20]
    5972:	615c      	str	r4, [r3, #20]
    5974:	698c      	ldr	r4, [r1, #24]
    5976:	619c      	str	r4, [r3, #24]
    5978:	69cc      	ldr	r4, [r1, #28]
    597a:	61dc      	str	r4, [r3, #28]
    597c:	6a0c      	ldr	r4, [r1, #32]
    597e:	621c      	str	r4, [r3, #32]
    5980:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    5982:	625c      	str	r4, [r3, #36]	; 0x24
    5984:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    5986:	629c      	str	r4, [r3, #40]	; 0x28
    5988:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    598a:	62dc      	str	r4, [r3, #44]	; 0x2c
    598c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    598e:	631c      	str	r4, [r3, #48]	; 0x30
    5990:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    5992:	635c      	str	r4, [r3, #52]	; 0x34
    5994:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    5996:	639c      	str	r4, [r3, #56]	; 0x38
    5998:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    599a:	3140      	adds	r1, #64	; 0x40
    599c:	63dc      	str	r4, [r3, #60]	; 0x3c
    599e:	3340      	adds	r3, #64	; 0x40
    59a0:	1ad4      	subs	r4, r2, r3
    59a2:	2c3f      	cmp	r4, #63	; 0x3f
    59a4:	dcda      	bgt.n	595c <memcpy+0x78>
    59a6:	e00a      	b.n	59be <memcpy+0xda>
    59a8:	680c      	ldr	r4, [r1, #0]
    59aa:	601c      	str	r4, [r3, #0]
    59ac:	684c      	ldr	r4, [r1, #4]
    59ae:	605c      	str	r4, [r3, #4]
    59b0:	688c      	ldr	r4, [r1, #8]
    59b2:	609c      	str	r4, [r3, #8]
    59b4:	68cc      	ldr	r4, [r1, #12]
    59b6:	3110      	adds	r1, #16
    59b8:	60dc      	str	r4, [r3, #12]
    59ba:	3310      	adds	r3, #16
    59bc:	1ad4      	subs	r4, r2, r3
    59be:	2c0f      	cmp	r4, #15
    59c0:	dcf2      	bgt.n	59a8 <memcpy+0xc4>
    59c2:	e004      	b.n	59ce <memcpy+0xea>
    59c4:	f851 4b04 	ldr.w	r4, [r1], #4
    59c8:	f843 4b04 	str.w	r4, [r3], #4
    59cc:	1ad4      	subs	r4, r2, r3
    59ce:	2c03      	cmp	r4, #3
    59d0:	dcf8      	bgt.n	59c4 <memcpy+0xe0>
    59d2:	e7ba      	b.n	594a <memcpy+0x66>

000059d4 <memset>:
    59d4:	2a03      	cmp	r2, #3
    59d6:	b2c9      	uxtb	r1, r1
    59d8:	b470      	push	{r4, r5, r6}
    59da:	d807      	bhi.n	59ec <memset+0x18>
    59dc:	b122      	cbz	r2, 59e8 <memset+0x14>
    59de:	2300      	movs	r3, #0
    59e0:	54c1      	strb	r1, [r0, r3]
    59e2:	3301      	adds	r3, #1
    59e4:	4293      	cmp	r3, r2
    59e6:	d1fb      	bne.n	59e0 <memset+0xc>
    59e8:	bc70      	pop	{r4, r5, r6}
    59ea:	4770      	bx	lr
    59ec:	0785      	lsls	r5, r0, #30
    59ee:	4402      	add	r2, r0
    59f0:	4603      	mov	r3, r0
    59f2:	d003      	beq.n	59fc <memset+0x28>
    59f4:	f803 1b01 	strb.w	r1, [r3], #1
    59f8:	079c      	lsls	r4, r3, #30
    59fa:	d1fb      	bne.n	59f4 <memset+0x20>
    59fc:	020c      	lsls	r4, r1, #8
    59fe:	1ad5      	subs	r5, r2, r3
    5a00:	1864      	adds	r4, r4, r1
    5a02:	0426      	lsls	r6, r4, #16
    5a04:	2d3f      	cmp	r5, #63	; 0x3f
    5a06:	4434      	add	r4, r6
    5a08:	dd1a      	ble.n	5a40 <memset+0x6c>
    5a0a:	601c      	str	r4, [r3, #0]
    5a0c:	605c      	str	r4, [r3, #4]
    5a0e:	609c      	str	r4, [r3, #8]
    5a10:	60dc      	str	r4, [r3, #12]
    5a12:	611c      	str	r4, [r3, #16]
    5a14:	615c      	str	r4, [r3, #20]
    5a16:	619c      	str	r4, [r3, #24]
    5a18:	61dc      	str	r4, [r3, #28]
    5a1a:	621c      	str	r4, [r3, #32]
    5a1c:	625c      	str	r4, [r3, #36]	; 0x24
    5a1e:	629c      	str	r4, [r3, #40]	; 0x28
    5a20:	62dc      	str	r4, [r3, #44]	; 0x2c
    5a22:	631c      	str	r4, [r3, #48]	; 0x30
    5a24:	635c      	str	r4, [r3, #52]	; 0x34
    5a26:	639c      	str	r4, [r3, #56]	; 0x38
    5a28:	63dc      	str	r4, [r3, #60]	; 0x3c
    5a2a:	3340      	adds	r3, #64	; 0x40
    5a2c:	1ad5      	subs	r5, r2, r3
    5a2e:	2d3f      	cmp	r5, #63	; 0x3f
    5a30:	dceb      	bgt.n	5a0a <memset+0x36>
    5a32:	e005      	b.n	5a40 <memset+0x6c>
    5a34:	601c      	str	r4, [r3, #0]
    5a36:	605c      	str	r4, [r3, #4]
    5a38:	609c      	str	r4, [r3, #8]
    5a3a:	60dc      	str	r4, [r3, #12]
    5a3c:	3310      	adds	r3, #16
    5a3e:	1ad5      	subs	r5, r2, r3
    5a40:	2d0f      	cmp	r5, #15
    5a42:	dcf7      	bgt.n	5a34 <memset+0x60>
    5a44:	e002      	b.n	5a4c <memset+0x78>
    5a46:	f843 4b04 	str.w	r4, [r3], #4
    5a4a:	1ad5      	subs	r5, r2, r3
    5a4c:	2d03      	cmp	r5, #3
    5a4e:	dcfa      	bgt.n	5a46 <memset+0x72>
    5a50:	4293      	cmp	r3, r2
    5a52:	d2c9      	bcs.n	59e8 <memset+0x14>
    5a54:	f803 1b01 	strb.w	r1, [r3], #1
    5a58:	4293      	cmp	r3, r2
    5a5a:	d1fb      	bne.n	5a54 <memset+0x80>
    5a5c:	e7c4      	b.n	59e8 <memset+0x14>
    5a5e:	bf00      	nop

00005a60 <strcpy>:
    5a60:	ea80 0201 	eor.w	r2, r0, r1
    5a64:	4684      	mov	ip, r0
    5a66:	f012 0f03 	tst.w	r2, #3
    5a6a:	d14f      	bne.n	5b0c <strcpy+0xac>
    5a6c:	f011 0f03 	tst.w	r1, #3
    5a70:	d132      	bne.n	5ad8 <strcpy+0x78>
    5a72:	f84d 4d04 	str.w	r4, [sp, #-4]!
    5a76:	f011 0f04 	tst.w	r1, #4
    5a7a:	f851 3b04 	ldr.w	r3, [r1], #4
    5a7e:	d00b      	beq.n	5a98 <strcpy+0x38>
    5a80:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    5a84:	439a      	bics	r2, r3
    5a86:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    5a8a:	bf04      	itt	eq
    5a8c:	f84c 3b04 	streq.w	r3, [ip], #4
    5a90:	f851 3b04 	ldreq.w	r3, [r1], #4
    5a94:	d116      	bne.n	5ac4 <strcpy+0x64>
    5a96:	bf00      	nop
    5a98:	f851 4b04 	ldr.w	r4, [r1], #4
    5a9c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    5aa0:	439a      	bics	r2, r3
    5aa2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    5aa6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    5aaa:	d10b      	bne.n	5ac4 <strcpy+0x64>
    5aac:	f84c 3b04 	str.w	r3, [ip], #4
    5ab0:	43a2      	bics	r2, r4
    5ab2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    5ab6:	bf04      	itt	eq
    5ab8:	f851 3b04 	ldreq.w	r3, [r1], #4
    5abc:	f84c 4b04 	streq.w	r4, [ip], #4
    5ac0:	d0ea      	beq.n	5a98 <strcpy+0x38>
    5ac2:	4623      	mov	r3, r4
    5ac4:	f80c 3b01 	strb.w	r3, [ip], #1
    5ac8:	f013 0fff 	tst.w	r3, #255	; 0xff
    5acc:	ea4f 2333 	mov.w	r3, r3, ror #8
    5ad0:	d1f8      	bne.n	5ac4 <strcpy+0x64>
    5ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ad6:	4770      	bx	lr
    5ad8:	f011 0f01 	tst.w	r1, #1
    5adc:	d006      	beq.n	5aec <strcpy+0x8c>
    5ade:	f811 2b01 	ldrb.w	r2, [r1], #1
    5ae2:	f80c 2b01 	strb.w	r2, [ip], #1
    5ae6:	2a00      	cmp	r2, #0
    5ae8:	bf08      	it	eq
    5aea:	4770      	bxeq	lr
    5aec:	f011 0f02 	tst.w	r1, #2
    5af0:	d0bf      	beq.n	5a72 <strcpy+0x12>
    5af2:	f831 2b02 	ldrh.w	r2, [r1], #2
    5af6:	f012 0fff 	tst.w	r2, #255	; 0xff
    5afa:	bf16      	itet	ne
    5afc:	f82c 2b02 	strhne.w	r2, [ip], #2
    5b00:	f88c 2000 	strbeq.w	r2, [ip]
    5b04:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    5b08:	d1b3      	bne.n	5a72 <strcpy+0x12>
    5b0a:	4770      	bx	lr
    5b0c:	f811 2b01 	ldrb.w	r2, [r1], #1
    5b10:	f80c 2b01 	strb.w	r2, [ip], #1
    5b14:	2a00      	cmp	r2, #0
    5b16:	d1f9      	bne.n	5b0c <strcpy+0xac>
    5b18:	4770      	bx	lr
    5b1a:	bf00      	nop

00005b1c <strncpy>:
    5b1c:	ea41 0300 	orr.w	r3, r1, r0
    5b20:	f013 0f03 	tst.w	r3, #3
    5b24:	4603      	mov	r3, r0
    5b26:	b470      	push	{r4, r5, r6}
    5b28:	bf14      	ite	ne
    5b2a:	2400      	movne	r4, #0
    5b2c:	2401      	moveq	r4, #1
    5b2e:	2a03      	cmp	r2, #3
    5b30:	bf94      	ite	ls
    5b32:	2400      	movls	r4, #0
    5b34:	f004 0401 	andhi.w	r4, r4, #1
    5b38:	460d      	mov	r5, r1
    5b3a:	b9c4      	cbnz	r4, 5b6e <strncpy+0x52>
    5b3c:	b1aa      	cbz	r2, 5b6a <strncpy+0x4e>
    5b3e:	780c      	ldrb	r4, [r1, #0]
    5b40:	3a01      	subs	r2, #1
    5b42:	f803 4b01 	strb.w	r4, [r3], #1
    5b46:	b14c      	cbz	r4, 5b5c <strncpy+0x40>
    5b48:	461c      	mov	r4, r3
    5b4a:	b172      	cbz	r2, 5b6a <strncpy+0x4e>
    5b4c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    5b50:	3a01      	subs	r2, #1
    5b52:	f804 6b01 	strb.w	r6, [r4], #1
    5b56:	4623      	mov	r3, r4
    5b58:	2e00      	cmp	r6, #0
    5b5a:	d1f6      	bne.n	5b4a <strncpy+0x2e>
    5b5c:	b12a      	cbz	r2, 5b6a <strncpy+0x4e>
    5b5e:	189a      	adds	r2, r3, r2
    5b60:	2100      	movs	r1, #0
    5b62:	f803 1b01 	strb.w	r1, [r3], #1
    5b66:	4293      	cmp	r3, r2
    5b68:	d1fb      	bne.n	5b62 <strncpy+0x46>
    5b6a:	bc70      	pop	{r4, r5, r6}
    5b6c:	4770      	bx	lr
    5b6e:	4629      	mov	r1, r5
    5b70:	f855 4b04 	ldr.w	r4, [r5], #4
    5b74:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    5b78:	ea26 0604 	bic.w	r6, r6, r4
    5b7c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    5b80:	d1dc      	bne.n	5b3c <strncpy+0x20>
    5b82:	3a04      	subs	r2, #4
    5b84:	f843 4b04 	str.w	r4, [r3], #4
    5b88:	2a03      	cmp	r2, #3
    5b8a:	d8f0      	bhi.n	5b6e <strncpy+0x52>
    5b8c:	4629      	mov	r1, r5
    5b8e:	e7d5      	b.n	5b3c <strncpy+0x20>

00005b90 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    5b90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    5b92:	f000 b804 	b.w	5b9e <LoopCopyDataInit>

00005b96 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    5b96:	4b0c      	ldr	r3, [pc, #48]	; (5bc8 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
    5b98:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    5b9a:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    5b9c:	3104      	adds	r1, #4

00005b9e <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    5b9e:	480b      	ldr	r0, [pc, #44]	; (5bcc <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
    5ba0:	4b0b      	ldr	r3, [pc, #44]	; (5bd0 <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
    5ba2:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    5ba4:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    5ba6:	f4ff aff6 	bcc.w	5b96 <CopyDataInit>
	ldr	r2, =_sbss
    5baa:	4a0a      	ldr	r2, [pc, #40]	; (5bd4 <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
    5bac:	f000 b803 	b.w	5bb6 <LoopFillZerobss>

00005bb0 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    5bb0:	2300      	movs	r3, #0
	str	r3, [r2], #4
    5bb2:	f842 3b04 	str.w	r3, [r2], #4

00005bb6 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    5bb6:	4b08      	ldr	r3, [pc, #32]	; (5bd8 <LoopFillZerobss+0x22>)
	cmp	r2, r3
    5bb8:	429a      	cmp	r2, r3
	bcc	FillZerobss
    5bba:	f4ff aff9 	bcc.w	5bb0 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    5bbe:	f7fa fbeb 	bl	398 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    5bc2:	f7ff fad9 	bl	5178 <main>
	bx	lr    
    5bc6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    5bc8:	00005c5c 	.word	0x00005c5c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    5bcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    5bd0:	20000030 	.word	0x20000030
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    5bd4:	20000030 	.word	0x20000030
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    5bd8:	200045c8 	.word	0x200045c8

00005bdc <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    5bdc:	f7ff bffe 	b.w	5bdc <ADC1_2_IRQHandler>
    5be0:	454c4449 	.word	0x454c4449
    5be4:	00000000 	.word	0x00000000

00005be8 <ulKernelPriority>:
    5be8:	0000007f 6c6c6548 0a31206f 00000000     ....Hello 1.....
    5bf8:	6c6c6548 0a32206f 00000000 3a746f47     Hello 2.....Got:
    5c08:	00000000 2044454c 73616c46 00000068     ....LED Flash...
    5c18:	69726553 57206c61 65746972 00003120     Serial Write 1..
    5c28:	69726553 57206c61 65746972 00003220     Serial Write 2..
    5c38:	69726553 58206c61 2074696d 00727453     Serial Xmit Str.
    5c48:	69726553 52206c61 2f646165 74697257     Serial Read/Writ
    5c58:	00000065                                e...
